{
  "language": "java",
  "directory": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx",
  "symbols": [
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Animation",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
      "range": {
        "start": {
          "line": 51,
          "character": 0
        },
        "end": {
          "line": 2573,
          "character": 1
        }
      },
      "preview": "public class Animation",
      "documentation": "Stores a list of timelines to animate a skeleton's pose over time.",
      "children": [
        {
          "name": "name",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 19
            }
          },
          "preview": "final String name;",
          "children": []
        },
        {
          "name": "duration",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 16
            }
          },
          "preview": "float duration;",
          "children": []
        },
        {
          "name": "timelines",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 27
            }
          },
          "preview": "Array<Timeline> timelines;",
          "children": []
        },
        {
          "name": "timelineIds",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 37
            }
          },
          "preview": "final ObjectSet<String> timelineIds;",
          "children": []
        },
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 22
            }
          },
          "preview": "final IntArray bones;",
          "children": []
        },
        {
          "name": "Animation(String, Array",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 2
            }
          },
          "preview": "public Animation (String name, Array<Timeline> timelines, float duration) {",
          "children": []
        },
        {
          "name": "getTimelines()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 2
            }
          },
          "preview": "public Array<Timeline> getTimelines () {",
          "documentation": "If the returned array or the timelines it contains are modified, {@link #setTimelines(Array)} must be called.",
          "children": []
        },
        {
          "name": "setTimelines(Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 2
            }
          },
          "preview": "public void setTimelines (Array<Timeline> timelines) {",
          "children": []
        },
        {
          "name": "hasTimeline(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 2
            }
          },
          "preview": "public boolean hasTimeline (String[] propertyIds) {",
          "documentation": "Returns true if this animation contains a timeline with any of the specified property IDs.",
          "children": []
        },
        {
          "name": "getDuration()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public float getDuration () {",
          "documentation": "The duration of the animation in seconds, which is usually the highest time of all frames in the timeline. The duration is\nused to know when it has completed and when it should loop back to the start.",
          "children": []
        },
        {
          "name": "setDuration(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public void setDuration (float duration) {",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 2
            }
          },
          "preview": "public IntArray getBones() {",
          "children": []
        },
        {
          "name": "apply(Skeleton, float, float, boolean, Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 144,
              "character": 2
            }
          },
          "preview": "public void apply (Skeleton skeleton, float lastTime, float time, boolean loop, @Null Array<Event> events, float alpha,",
          "documentation": "Applies the animation's timelines to the specified skeleton.\n<p>\nSee Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection, boolean)}.\n@param skeleton The skeleton the animation is being applied to. This provides access to the bones, slots, and other skeleton\ncomponents the timelines may change.\n@param lastTime The last time in seconds this animation was applied. Some timelines trigger only at specific times rather\nthan every frame. Pass -1 the first time an animation is applied to ensure frame 0 is triggered.\n@param time The time in seconds the skeleton is being posed for. Most timelines find the frame before and the frame after\nthis time and interpolate between the frame values. If beyond the {@link #getDuration()} and <code>loop</code> is\ntrue then the animation will repeat, else the last frame will be applied.\n@param loop If true, the animation repeats after the {@link #getDuration()}.\n@param events If any events are fired, they are added to this list. Can be null to ignore fired events or if no timelines\nfire events.\n@param alpha 0 applies the current or setup values (depending on <code>blend</code>). 1 applies the timeline values. Between\n0 and 1 applies values between the current or setup values and the timeline values. By adjusting\n<code>alpha</code> over time, an animation can be mixed in or out. <code>alpha</code> can also be useful to apply\nanimations on top of each other (layering).\n@param blend Controls how mixing is applied when <code>alpha</code> < 1.\n@param direction Indicates whether the timelines are mixing in or out. Used by timelines which perform instant transitions,\nsuch as {@link DrawOrderTimeline} or {@link AttachmentTimeline}.",
          "children": []
        },
        {
          "name": "getName()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 147,
              "character": 0
            },
            "end": {
              "line": 149,
              "character": 2
            }
          },
          "preview": "public String getName () {",
          "documentation": "The animation's name, which is unique across all animations in the skeleton.",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 151,
              "character": 0
            },
            "end": {
              "line": 153,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        },
        {
          "name": "MixBlend",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 159,
              "character": 0
            },
            "end": {
              "line": 182,
              "character": 2
            }
          },
          "preview": "static public enum MixBlend",
          "documentation": "Controls how timeline values are mixed with setup pose values or current pose values when a timeline is applied with\n<code>alpha</code> < 1.\n<p>\nSee Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection, boolean)}.",
          "children": [
            {
              "name": "setup",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 164,
                  "character": 0
                },
                "end": {
                  "line": 164,
                  "character": 7
                }
              },
              "preview": "setup,",
              "documentation": "Transitions between the setup and timeline values (the current value is not used). Before the first frame, the setup\nvalue is used.\n<p>\n<code>setup</code> is intended to transition to or from the setup pose, not for animations layered on top of others.",
              "children": []
            },
            {
              "name": "first",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 170,
                  "character": 0
                },
                "end": {
                  "line": 170,
                  "character": 7
                }
              },
              "preview": "first,",
              "documentation": "Transitions between the current and timeline values. Before the first frame, transitions between the current and setup\nvalues. Timelines which perform instant transitions, such as {@link DrawOrderTimeline} or {@link AttachmentTimeline}, use\nthe setup value before the first frame.\n<p>\n<code>first</code> is intended for the first animations applied, not for animations layered on top of others.",
              "children": []
            },
            {
              "name": "replace",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 174,
                  "character": 0
                },
                "end": {
                  "line": 174,
                  "character": 9
                }
              },
              "preview": "replace,",
              "documentation": "Transitions between the current and timeline values. No change is made before the first frame.\n<p>\n<code>replace</code> is intended for animations layered on top of others, not for the first animations applied.",
              "children": []
            },
            {
              "name": "add",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 181,
                  "character": 0
                },
                "end": {
                  "line": 181,
                  "character": 5
                }
              },
              "preview": "add",
              "documentation": "Transitions between the current value and the current plus timeline values. No change is made before the first frame.\n<p>\n<code>add</code> is intended for animations layered on top of others, not for the first animations applied.\n<p>\nProperties set by additive animations must be set manually or by another animation before applying the additive\nanimations, else the property values will increase each time the additive animations are applied.",
              "children": []
            }
          ]
        },
        {
          "name": "MixDirection",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 188,
              "character": 0
            },
            "end": {
              "line": 190,
              "character": 2
            }
          },
          "preview": "static public enum MixDirection",
          "documentation": "Indicates whether a timeline's <code>alpha</code> is mixing out over time toward 0 (the setup or current pose value) or\nmixing in toward 1 (the timeline's value). Some timelines use this to decide how values are applied.\n<p>\nSee Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection, boolean)}.",
          "children": [
            {
              "name": "in",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 189,
                  "character": 0
                },
                "end": {
                  "line": 189,
                  "character": 4
                }
              },
              "preview": "in, out",
              "children": []
            },
            {
              "name": "out",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 189,
                  "character": 0
                },
                "end": {
                  "line": 189,
                  "character": 9
                }
              },
              "preview": "in, out",
              "children": []
            }
          ]
        },
        {
          "name": "Property",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 192,
              "character": 0
            },
            "end": {
              "line": 203,
              "character": 2
            }
          },
          "preview": "static private enum Property",
          "children": [
            {
              "name": "rotate",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 193,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 8
                }
              },
              "preview": "rotate, x, y, scaleX, scaleY, shearX, shearY, inherit, //",
              "children": []
            },
            {
              "name": "x",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 193,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 11
                }
              },
              "preview": "rotate, x, y, scaleX, scaleY, shearX, shearY, inherit, //",
              "children": []
            },
            {
              "name": "y",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 193,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 14
                }
              },
              "preview": "rotate, x, y, scaleX, scaleY, shearX, shearY, inherit, //",
              "children": []
            },
            {
              "name": "scaleX",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 193,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 22
                }
              },
              "preview": "rotate, x, y, scaleX, scaleY, shearX, shearY, inherit, //",
              "children": []
            },
            {
              "name": "scaleY",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 193,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 30
                }
              },
              "preview": "rotate, x, y, scaleX, scaleY, shearX, shearY, inherit, //",
              "children": []
            },
            {
              "name": "shearX",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 193,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 38
                }
              },
              "preview": "rotate, x, y, scaleX, scaleY, shearX, shearY, inherit, //",
              "children": []
            },
            {
              "name": "shearY",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 193,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 46
                }
              },
              "preview": "rotate, x, y, scaleX, scaleY, shearX, shearY, inherit, //",
              "children": []
            },
            {
              "name": "inherit",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 193,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 55
                }
              },
              "preview": "rotate, x, y, scaleX, scaleY, shearX, shearY, inherit, //",
              "children": []
            },
            {
              "name": "rgb",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 194,
                  "character": 0
                },
                "end": {
                  "line": 194,
                  "character": 5
                }
              },
              "preview": "rgb, alpha, rgb2, //",
              "children": []
            },
            {
              "name": "alpha",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 194,
                  "character": 0
                },
                "end": {
                  "line": 194,
                  "character": 12
                }
              },
              "preview": "rgb, alpha, rgb2, //",
              "children": []
            },
            {
              "name": "rgb2",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 194,
                  "character": 0
                },
                "end": {
                  "line": 194,
                  "character": 18
                }
              },
              "preview": "rgb, alpha, rgb2, //",
              "children": []
            },
            {
              "name": "attachment",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 195,
                  "character": 0
                },
                "end": {
                  "line": 195,
                  "character": 12
                }
              },
              "preview": "attachment, deform, //",
              "children": []
            },
            {
              "name": "deform",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 195,
                  "character": 0
                },
                "end": {
                  "line": 195,
                  "character": 20
                }
              },
              "preview": "attachment, deform, //",
              "children": []
            },
            {
              "name": "event",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 196,
                  "character": 0
                },
                "end": {
                  "line": 196,
                  "character": 7
                }
              },
              "preview": "event, drawOrder, //",
              "children": []
            },
            {
              "name": "drawOrder",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 196,
                  "character": 0
                },
                "end": {
                  "line": 196,
                  "character": 18
                }
              },
              "preview": "event, drawOrder, //",
              "children": []
            },
            {
              "name": "ikConstraint",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 197,
                  "character": 0
                },
                "end": {
                  "line": 197,
                  "character": 14
                }
              },
              "preview": "ikConstraint, transformConstraint, //",
              "children": []
            },
            {
              "name": "transformConstraint",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 197,
                  "character": 0
                },
                "end": {
                  "line": 197,
                  "character": 35
                }
              },
              "preview": "ikConstraint, transformConstraint, //",
              "children": []
            },
            {
              "name": "pathConstraintPosition",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 198,
                  "character": 0
                },
                "end": {
                  "line": 198,
                  "character": 24
                }
              },
              "preview": "pathConstraintPosition, pathConstraintSpacing, pathConstraintMix, //",
              "children": []
            },
            {
              "name": "pathConstraintSpacing",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 198,
                  "character": 0
                },
                "end": {
                  "line": 198,
                  "character": 47
                }
              },
              "preview": "pathConstraintPosition, pathConstraintSpacing, pathConstraintMix, //",
              "children": []
            },
            {
              "name": "pathConstraintMix",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 198,
                  "character": 0
                },
                "end": {
                  "line": 198,
                  "character": 66
                }
              },
              "preview": "pathConstraintPosition, pathConstraintSpacing, pathConstraintMix, //",
              "children": []
            },
            {
              "name": "physicsConstraintInertia",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 199,
                  "character": 0
                },
                "end": {
                  "line": 199,
                  "character": 26
                }
              },
              "preview": "physicsConstraintInertia, physicsConstraintStrength, physicsConstraintDamping, physicsConstraintMass, //",
              "children": []
            },
            {
              "name": "physicsConstraintStrength",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 199,
                  "character": 0
                },
                "end": {
                  "line": 199,
                  "character": 53
                }
              },
              "preview": "physicsConstraintInertia, physicsConstraintStrength, physicsConstraintDamping, physicsConstraintMass, //",
              "children": []
            },
            {
              "name": "physicsConstraintDamping",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 199,
                  "character": 0
                },
                "end": {
                  "line": 199,
                  "character": 79
                }
              },
              "preview": "physicsConstraintInertia, physicsConstraintStrength, physicsConstraintDamping, physicsConstraintMass, //",
              "children": []
            },
            {
              "name": "physicsConstraintMass",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 199,
                  "character": 0
                },
                "end": {
                  "line": 199,
                  "character": 102
                }
              },
              "preview": "physicsConstraintInertia, physicsConstraintStrength, physicsConstraintDamping, physicsConstraintMass, //",
              "children": []
            },
            {
              "name": "physicsConstraintWind",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 200,
                  "character": 0
                },
                "end": {
                  "line": 200,
                  "character": 23
                }
              },
              "preview": "physicsConstraintWind, physicsConstraintGravity, physicsConstraintMix, physicsConstraintReset, //",
              "children": []
            },
            {
              "name": "physicsConstraintGravity",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 200,
                  "character": 0
                },
                "end": {
                  "line": 200,
                  "character": 49
                }
              },
              "preview": "physicsConstraintWind, physicsConstraintGravity, physicsConstraintMix, physicsConstraintReset, //",
              "children": []
            },
            {
              "name": "physicsConstraintMix",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 200,
                  "character": 0
                },
                "end": {
                  "line": 200,
                  "character": 71
                }
              },
              "preview": "physicsConstraintWind, physicsConstraintGravity, physicsConstraintMix, physicsConstraintReset, //",
              "children": []
            },
            {
              "name": "physicsConstraintReset",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 200,
                  "character": 0
                },
                "end": {
                  "line": 200,
                  "character": 95
                }
              },
              "preview": "physicsConstraintWind, physicsConstraintGravity, physicsConstraintMix, physicsConstraintReset, //",
              "children": []
            },
            {
              "name": "sequence",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 201,
                  "character": 0
                },
                "end": {
                  "line": 201,
                  "character": 10
                }
              },
              "preview": "sequence, //",
              "children": []
            },
            {
              "name": "sliderTime",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 202,
                  "character": 0
                },
                "end": {
                  "line": 202,
                  "character": 12
                }
              },
              "preview": "sliderTime, sliderMix",
              "children": []
            },
            {
              "name": "sliderMix",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 202,
                  "character": 0
                },
                "end": {
                  "line": 202,
                  "character": 23
                }
              },
              "preview": "sliderTime, sliderMix",
              "children": []
            }
          ]
        },
        {
          "name": "Timeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 206,
              "character": 0
            },
            "end": {
              "line": 283,
              "character": 2
            }
          },
          "preview": "static abstract public class Timeline",
          "documentation": "The base class for all timelines.",
          "children": [
            {
              "name": "propertyIds",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 207,
                  "character": 0
                },
                "end": {
                  "line": 207,
                  "character": 37
                }
              },
              "preview": "private final String[] propertyIds;",
              "children": []
            },
            {
              "name": "frames",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 208,
                  "character": 0
                },
                "end": {
                  "line": 208,
                  "character": 23
                }
              },
              "preview": "final float[] frames;",
              "children": []
            },
            {
              "name": "Timeline(int, String...)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 211,
                  "character": 0
                },
                "end": {
                  "line": 215,
                  "character": 3
                }
              },
              "preview": "public Timeline (int frameCount, String... propertyIds) {",
              "documentation": "@param propertyIds Unique identifiers for the properties the timeline modifies.",
              "children": []
            },
            {
              "name": "getPropertyIds()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 218,
                  "character": 0
                },
                "end": {
                  "line": 220,
                  "character": 3
                }
              },
              "preview": "public String[] getPropertyIds () {",
              "documentation": "Uniquely encodes both the type of this timeline and the skeleton properties that it affects.",
              "children": []
            },
            {
              "name": "getFrames()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 223,
                  "character": 0
                },
                "end": {
                  "line": 225,
                  "character": 3
                }
              },
              "preview": "public float[] getFrames () {",
              "documentation": "The time in seconds and any other values for each frame.",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 228,
                  "character": 0
                },
                "end": {
                  "line": 230,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "documentation": "The number of entries stored per frame.",
              "children": []
            },
            {
              "name": "getFrameCount()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 233,
                  "character": 0
                },
                "end": {
                  "line": 235,
                  "character": 3
                }
              },
              "preview": "public int getFrameCount () {",
              "documentation": "The number of frames for this timeline.",
              "children": []
            },
            {
              "name": "getDuration()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 237,
                  "character": 0
                },
                "end": {
                  "line": 239,
                  "character": 3
                }
              },
              "preview": "public float getDuration () {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 261,
                  "character": 0
                },
                "end": {
                  "line": 262,
                  "character": 64
                }
              },
              "preview": "abstract public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha,",
              "documentation": "Applies this timeline to the skeleton.\n@param skeleton The skeleton to which the timeline is being applied. This provides access to the bones, slots, and other\nskeleton components that the timeline may change.\n@param lastTime The last time in seconds this timeline was applied. Timelines such as {@link EventTimeline} trigger only\nat specific times rather than every frame. In that case, the timeline triggers everything between\n<code>lastTime</code> (exclusive) and <code>time</code> (inclusive). Pass -1 the first time an animation is\napplied to ensure frame 0 is triggered.\n@param time The time in seconds that the skeleton is being posed for. Most timelines find the frame before and the frame\nafter this time and interpolate between the frame values. If beyond the last frame, the last frame will be\napplied.\n@param events If any events are fired, they are added to this list. Can be null to ignore fired events or if the timeline\ndoes not fire events.\n@param alpha 0 applies the current or setup value (depending on <code>blend</code>). 1 applies the timeline value.\nBetween 0 and 1 applies a value between the current or setup value and the timeline value. By adjusting\n<code>alpha</code> over time, an animation can be mixed in or out. <code>alpha</code> can also be useful to\napply animations on top of each other (layering).\n@param blend Controls how mixing is applied when <code>alpha</code> < 1.\n@param direction Indicates whether the timeline is mixing in or out. Used by timelines which perform instant transitions,\nsuch as {@link DrawOrderTimeline} or {@link AttachmentTimeline}, and others such as {@link ScaleTimeline}.\n@param appliedPose True to to modify the applied pose.",
              "children": []
            },
            {
              "name": "search(float[], float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 267,
                  "character": 0
                },
                "end": {
                  "line": 272,
                  "character": 3
                }
              },
              "preview": "static int search (float[] frames, float time) {",
              "documentation": "Linear search using a stride of 1.\n@param time Must be >= the first value in <code>frames</code>.\n@return The index of the first value <= <code>time</code>.",
              "children": []
            },
            {
              "name": "search(float[], float, int)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 277,
                  "character": 0
                },
                "end": {
                  "line": 282,
                  "character": 3
                }
              },
              "preview": "static int search (float[] frames, float time, int step) {",
              "documentation": "Linear search using the specified stride.\n@param time Must be >= the first value in <code>frames</code>.\n@return The index of the first value <= <code>time</code>.",
              "children": []
            }
          ]
        },
        {
          "name": "SlotTimeline",
          "kind": "interface",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 286,
              "character": 0
            },
            "end": {
              "line": 289,
              "character": 2
            }
          },
          "preview": "static public interface SlotTimeline",
          "documentation": "An interface for timelines which change the property of a slot.",
          "children": [
            {
              "name": "getSlotIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 288,
                  "character": 0
                },
                "end": {
                  "line": 288,
                  "character": 29
                }
              },
              "preview": "public int getSlotIndex ();",
              "documentation": "The index of the slot in {@link Skeleton#getSlots()} that will be changed when this timeline is applied.",
              "children": []
            }
          ]
        },
        {
          "name": "CurveTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 292,
              "character": 0
            },
            "end": {
              "line": 392,
              "character": 2
            }
          },
          "preview": "static abstract public class CurveTimeline extends Timeline",
          "documentation": "The base class for timelines that interpolate between frame values using stepped, linear, or a Bezier curve.",
          "supertypes": [
            {
              "name": "Timeline"
            }
          ],
          "children": [
            {
              "name": "LINEAR",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 293,
                  "character": 0
                },
                "end": {
                  "line": 293,
                  "character": 80
                }
              },
              "preview": "static public final int LINEAR = 0, STEPPED = 1, BEZIER = 2, BEZIER_SIZE = 18;",
              "children": []
            },
            {
              "name": "STEPPED",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 293,
                  "character": 0
                },
                "end": {
                  "line": 293,
                  "character": 80
                }
              },
              "preview": "static public final int LINEAR = 0, STEPPED = 1, BEZIER = 2, BEZIER_SIZE = 18;",
              "children": []
            },
            {
              "name": "BEZIER",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 293,
                  "character": 0
                },
                "end": {
                  "line": 293,
                  "character": 80
                }
              },
              "preview": "static public final int LINEAR = 0, STEPPED = 1, BEZIER = 2, BEZIER_SIZE = 18;",
              "children": []
            },
            {
              "name": "BEZIER_SIZE",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 293,
                  "character": 0
                },
                "end": {
                  "line": 293,
                  "character": 80
                }
              },
              "preview": "static public final int LINEAR = 0, STEPPED = 1, BEZIER = 2, BEZIER_SIZE = 18;",
              "children": []
            },
            {
              "name": "curves",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 295,
                  "character": 0
                },
                "end": {
                  "line": 295,
                  "character": 17
                }
              },
              "preview": "float[] curves;",
              "children": []
            },
            {
              "name": "CurveTimeline(int, int, String...)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 299,
                  "character": 0
                },
                "end": {
                  "line": 303,
                  "character": 3
                }
              },
              "preview": "public CurveTimeline (int frameCount, int bezierCount, String... propertyIds) {",
              "documentation": "@param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\n@param propertyIds Unique identifiers for the properties the timeline modifies.",
              "children": []
            },
            {
              "name": "setLinear(int)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 307,
                  "character": 0
                },
                "end": {
                  "line": 309,
                  "character": 3
                }
              },
              "preview": "public void setLinear (int frame) {",
              "documentation": "Sets the specified frame to linear interpolation.\n@param frame Between 0 and <code>frameCount - 1</code>, inclusive.",
              "children": []
            },
            {
              "name": "setStepped(int)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 313,
                  "character": 0
                },
                "end": {
                  "line": 315,
                  "character": 3
                }
              },
              "preview": "public void setStepped (int frame) {",
              "documentation": "Sets the specified frame to stepped interpolation.\n@param frame Between 0 and <code>frameCount - 1</code>, inclusive.",
              "children": []
            },
            {
              "name": "getCurveType(int)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 320,
                  "character": 0
                },
                "end": {
                  "line": 322,
                  "character": 3
                }
              },
              "preview": "public int getCurveType (int frame) {",
              "documentation": "Returns the interpolation type for the specified frame.\n@param frame Between 0 and <code>frameCount - 1</code>, inclusive.\n@return {@link #LINEAR}, {@link #STEPPED}, or {@link #BEZIER} + the index of the Bezier segments.",
              "children": []
            },
            {
              "name": "shrink(int)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 326,
                  "character": 0
                },
                "end": {
                  "line": 333,
                  "character": 3
                }
              },
              "preview": "public void shrink (int bezierCount) {",
              "documentation": "Shrinks the storage for Bezier curves, for use when <code>bezierCount</code> (specified in the constructor) was larger\nthan the actual number of Bezier curves.",
              "children": []
            },
            {
              "name": "setBezier(int, int, int, float, float, float, float, float, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 349,
                  "character": 0
                },
                "end": {
                  "line": 369,
                  "character": 3
                }
              },
              "preview": "public void setBezier (int bezier, int frame, int value, float time1, float value1, float cx1, float cy1, float cx2,",
              "documentation": "Stores the segments for the specified Bezier curve. For timelines that modify multiple values, there may be more than\none curve per frame.\n@param bezier The ordinal of this Bezier curve for this timeline, between 0 and <code>bezierCount - 1</code> (specified\nin the constructor), inclusive.\n@param frame Between 0 and <code>frameCount - 1</code>, inclusive.\n@param value The index of the value for the frame this curve is used for.\n@param time1 The time for the first key.\n@param value1 The value for the first key.\n@param cx1 The time for the first Bezier handle.\n@param cy1 The value for the first Bezier handle.\n@param cx2 The time of the second Bezier handle.\n@param cy2 The value for the second Bezier handle.\n@param time2 The time for the second key.\n@param value2 The value for the second key.",
              "children": []
            },
            {
              "name": "getBezierValue(float, int, int, int)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 375,
                  "character": 0
                },
                "end": {
                  "line": 391,
                  "character": 3
                }
              },
              "preview": "public float getBezierValue (float time, int frameIndex, int valueOffset, int i) {",
              "documentation": "Returns the Bezier interpolated value for the specified time.\n@param frameIndex The index into {@link #getFrames()} for the values of the frame before <code>time</code>.\n@param valueOffset The offset from <code>frameIndex</code> to the value this curve is used for.\n@param i The index of the Bezier segments. See {@link #getCurveType(int)}.",
              "children": []
            }
          ]
        },
        {
          "name": "CurveTimeline1",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 395,
              "character": 0
            },
            "end": {
              "line": 521,
              "character": 2
            }
          },
          "preview": "static abstract public class CurveTimeline1 extends CurveTimeline",
          "documentation": "The base class for a {@link CurveTimeline} that sets one property.",
          "supertypes": [
            {
              "name": "CurveTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 396,
                  "character": 0
                },
                "end": {
                  "line": 396,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 2;",
              "children": []
            },
            {
              "name": "VALUE",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 397,
                  "character": 0
                },
                "end": {
                  "line": 397,
                  "character": 29
                }
              },
              "preview": "static final int VALUE = 1;",
              "children": []
            },
            {
              "name": "CurveTimeline1(int, int, String)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 401,
                  "character": 0
                },
                "end": {
                  "line": 403,
                  "character": 3
                }
              },
              "preview": "public CurveTimeline1 (int frameCount, int bezierCount, String propertyId) {",
              "documentation": "@param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.\n@param propertyId Unique identifier for the property the timeline modifies.",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 405,
                  "character": 0
                },
                "end": {
                  "line": 407,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 412,
                  "character": 0
                },
                "end": {
                  "line": 416,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float value) {",
              "documentation": "Sets the time and value for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "getCurveValue(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 419,
                  "character": 0
                },
                "end": {
                  "line": 438,
                  "character": 3
                }
              },
              "preview": "public float getCurveValue (float time) {",
              "documentation": "Returns the interpolated value for the specified time.",
              "children": []
            },
            {
              "name": "getRelativeValue(float, float, MixBlend, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 440,
                  "character": 0
                },
                "end": {
                  "line": 454,
                  "character": 3
                }
              },
              "preview": "public float getRelativeValue (float time, float alpha, MixBlend blend, float current, float setup) {",
              "children": []
            },
            {
              "name": "getAbsoluteValue(float, float, MixBlend, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 456,
                  "character": 0
                },
                "end": {
                  "line": 470,
                  "character": 3
                }
              },
              "preview": "public float getAbsoluteValue (float time, float alpha, MixBlend blend, float current, float setup) {",
              "children": []
            },
            {
              "name": "getAbsoluteValue(float, float, MixBlend, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 472,
                  "character": 0
                },
                "end": {
                  "line": 485,
                  "character": 3
                }
              },
              "preview": "public float getAbsoluteValue (float time, float alpha, MixBlend blend, float current, float setup, float value) {",
              "children": []
            },
            {
              "name": "getScaleValue(float, float, MixBlend, MixDirection, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 487,
                  "character": 0
                },
                "end": {
                  "line": 520,
                  "character": 3
                }
              },
              "preview": "public float getScaleValue (float time, float alpha, MixBlend blend, MixDirection direction, float current, float setup) {",
              "children": []
            }
          ]
        },
        {
          "name": "BoneTimeline2",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 524,
              "character": 0
            },
            "end": {
              "line": 563,
              "character": 2
            }
          },
          "preview": "static abstract public class BoneTimeline2 extends CurveTimeline implements BoneTimeline",
          "documentation": "The base class for a {@link CurveTimeline} that is a {@link BoneTimeline} and sets two properties.",
          "supertypes": [
            {
              "name": "CurveTimeline"
            },
            {
              "name": "BoneTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 525,
                  "character": 0
                },
                "end": {
                  "line": 525,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 3;",
              "children": []
            },
            {
              "name": "VALUE1",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 526,
                  "character": 0
                },
                "end": {
                  "line": 526,
                  "character": 42
                }
              },
              "preview": "static final int VALUE1 = 1, VALUE2 = 2;",
              "children": []
            },
            {
              "name": "VALUE2",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 526,
                  "character": 0
                },
                "end": {
                  "line": 526,
                  "character": 42
                }
              },
              "preview": "static final int VALUE1 = 1, VALUE2 = 2;",
              "children": []
            },
            {
              "name": "boneIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 528,
                  "character": 0
                },
                "end": {
                  "line": 528,
                  "character": 22
                }
              },
              "preview": "final int boneIndex;",
              "children": []
            },
            {
              "name": "BoneTimeline2(int, int, int, Property, Property)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 531,
                  "character": 0
                },
                "end": {
                  "line": 534,
                  "character": 3
                }
              },
              "preview": "public BoneTimeline2 (int frameCount, int bezierCount, int boneIndex, Property property1, Property property2) {",
              "documentation": "@param bezierCount The maximum number of Bezier curves. See {@link #shrink(int)}.",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 536,
                  "character": 0
                },
                "end": {
                  "line": 538,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 543,
                  "character": 0
                },
                "end": {
                  "line": 548,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float value1, float value2) {",
              "documentation": "Sets the time and values for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "getBoneIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 550,
                  "character": 0
                },
                "end": {
                  "line": 552,
                  "character": 3
                }
              },
              "preview": "public int getBoneIndex () {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 554,
                  "character": 0
                },
                "end": {
                  "line": 559,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 561,
                  "character": 0
                },
                "end": {
                  "line": 562,
                  "character": 27
                }
              },
              "preview": "abstract protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "BoneTimeline",
          "kind": "interface",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 566,
              "character": 0
            },
            "end": {
              "line": 569,
              "character": 2
            }
          },
          "preview": "static public interface BoneTimeline",
          "documentation": "An interface for timelines which change the property of a bone.",
          "children": [
            {
              "name": "getBoneIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 568,
                  "character": 0
                },
                "end": {
                  "line": 568,
                  "character": 29
                }
              },
              "preview": "public int getBoneIndex ();",
              "documentation": "The index of the bone in {@link Skeleton#getBones()} that will be changed when this timeline is applied.",
              "children": []
            }
          ]
        },
        {
          "name": "BoneTimeline1",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 571,
              "character": 0
            },
            "end": {
              "line": 592,
              "character": 2
            }
          },
          "preview": "static abstract public class BoneTimeline1 extends CurveTimeline1 implements BoneTimeline",
          "supertypes": [
            {
              "name": "CurveTimeline1"
            },
            {
              "name": "BoneTimeline"
            }
          ],
          "children": [
            {
              "name": "boneIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 572,
                  "character": 0
                },
                "end": {
                  "line": 572,
                  "character": 22
                }
              },
              "preview": "final int boneIndex;",
              "children": []
            },
            {
              "name": "BoneTimeline1(int, int, int, Property)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 574,
                  "character": 0
                },
                "end": {
                  "line": 577,
                  "character": 3
                }
              },
              "preview": "public BoneTimeline1 (int frameCount, int bezierCount, int boneIndex, Property property) {",
              "children": []
            },
            {
              "name": "getBoneIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 579,
                  "character": 0
                },
                "end": {
                  "line": 581,
                  "character": 3
                }
              },
              "preview": "public int getBoneIndex () {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 583,
                  "character": 0
                },
                "end": {
                  "line": 588,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 590,
                  "character": 0
                },
                "end": {
                  "line": 591,
                  "character": 27
                }
              },
              "preview": "abstract protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "RotateTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 595,
              "character": 0
            },
            "end": {
              "line": 603,
              "character": 2
            }
          },
          "preview": "static public class RotateTimeline extends BoneTimeline1",
          "documentation": "Changes a bone's local {@link BoneLocal#getRotation()}.",
          "supertypes": [
            {
              "name": "BoneTimeline1"
            }
          ],
          "children": [
            {
              "name": "RotateTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 596,
                  "character": 0
                },
                "end": {
                  "line": 598,
                  "character": 3
                }
              },
              "preview": "public RotateTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 600,
                  "character": 0
                },
                "end": {
                  "line": 602,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "TranslateTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 606,
              "character": 0
            },
            "end": {
              "line": 663,
              "character": 2
            }
          },
          "preview": "static public class TranslateTimeline extends BoneTimeline2",
          "documentation": "Changes a bone's local {@link BoneLocal#getX()} and {@link BoneLocal#getY()}.",
          "supertypes": [
            {
              "name": "BoneTimeline2"
            }
          ],
          "children": [
            {
              "name": "TranslateTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 607,
                  "character": 0
                },
                "end": {
                  "line": 609,
                  "character": 3
                }
              },
              "preview": "public TranslateTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 611,
                  "character": 0
                },
                "end": {
                  "line": 662,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "TranslateXTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 666,
              "character": 0
            },
            "end": {
              "line": 674,
              "character": 2
            }
          },
          "preview": "static public class TranslateXTimeline extends BoneTimeline1",
          "documentation": "Changes a bone's local {@link BoneLocal#getX()}.",
          "supertypes": [
            {
              "name": "BoneTimeline1"
            }
          ],
          "children": [
            {
              "name": "TranslateXTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 667,
                  "character": 0
                },
                "end": {
                  "line": 669,
                  "character": 3
                }
              },
              "preview": "public TranslateXTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 671,
                  "character": 0
                },
                "end": {
                  "line": 673,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "TranslateYTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 677,
              "character": 0
            },
            "end": {
              "line": 685,
              "character": 2
            }
          },
          "preview": "static public class TranslateYTimeline extends BoneTimeline1",
          "documentation": "Changes a bone's local {@link BoneLocal#getY()}.",
          "supertypes": [
            {
              "name": "BoneTimeline1"
            }
          ],
          "children": [
            {
              "name": "TranslateYTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 678,
                  "character": 0
                },
                "end": {
                  "line": 680,
                  "character": 3
                }
              },
              "preview": "public TranslateYTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 682,
                  "character": 0
                },
                "end": {
                  "line": 684,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "ScaleTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 688,
              "character": 0
            },
            "end": {
              "line": 784,
              "character": 2
            }
          },
          "preview": "static public class ScaleTimeline extends BoneTimeline2",
          "documentation": "Changes a bone's local {@link BoneLocal#getScaleX()} and {@link BoneLocal#getScaleY()}.",
          "supertypes": [
            {
              "name": "BoneTimeline2"
            }
          ],
          "children": [
            {
              "name": "ScaleTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 689,
                  "character": 0
                },
                "end": {
                  "line": 691,
                  "character": 3
                }
              },
              "preview": "public ScaleTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 693,
                  "character": 0
                },
                "end": {
                  "line": 783,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "ScaleXTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 787,
              "character": 0
            },
            "end": {
              "line": 795,
              "character": 2
            }
          },
          "preview": "static public class ScaleXTimeline extends BoneTimeline1",
          "documentation": "Changes a bone's local {@link BoneLocal#getScaleX()}.",
          "supertypes": [
            {
              "name": "BoneTimeline1"
            }
          ],
          "children": [
            {
              "name": "ScaleXTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 788,
                  "character": 0
                },
                "end": {
                  "line": 790,
                  "character": 3
                }
              },
              "preview": "public ScaleXTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 792,
                  "character": 0
                },
                "end": {
                  "line": 794,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "ScaleYTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 798,
              "character": 0
            },
            "end": {
              "line": 806,
              "character": 2
            }
          },
          "preview": "static public class ScaleYTimeline extends BoneTimeline1",
          "documentation": "Changes a bone's local {@link BoneLocal#getScaleY()}.",
          "supertypes": [
            {
              "name": "BoneTimeline1"
            }
          ],
          "children": [
            {
              "name": "ScaleYTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 799,
                  "character": 0
                },
                "end": {
                  "line": 801,
                  "character": 3
                }
              },
              "preview": "public ScaleYTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 803,
                  "character": 0
                },
                "end": {
                  "line": 805,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "ShearTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 809,
              "character": 0
            },
            "end": {
              "line": 866,
              "character": 2
            }
          },
          "preview": "static public class ShearTimeline extends BoneTimeline2",
          "documentation": "Changes a bone's local {@link BoneLocal#getShearX()} and {@link BoneLocal#getShearY()}.",
          "supertypes": [
            {
              "name": "BoneTimeline2"
            }
          ],
          "children": [
            {
              "name": "ShearTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 810,
                  "character": 0
                },
                "end": {
                  "line": 812,
                  "character": 3
                }
              },
              "preview": "public ShearTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 814,
                  "character": 0
                },
                "end": {
                  "line": 865,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "ShearXTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 869,
              "character": 0
            },
            "end": {
              "line": 877,
              "character": 2
            }
          },
          "preview": "static public class ShearXTimeline extends BoneTimeline1",
          "documentation": "Changes a bone's local {@link BoneLocal#getShearX()}.",
          "supertypes": [
            {
              "name": "BoneTimeline1"
            }
          ],
          "children": [
            {
              "name": "ShearXTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 870,
                  "character": 0
                },
                "end": {
                  "line": 872,
                  "character": 3
                }
              },
              "preview": "public ShearXTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 874,
                  "character": 0
                },
                "end": {
                  "line": 876,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "ShearYTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 880,
              "character": 0
            },
            "end": {
              "line": 888,
              "character": 2
            }
          },
          "preview": "static public class ShearYTimeline extends BoneTimeline1",
          "documentation": "Changes a bone's local {@link BoneLocal#getShearY()}.",
          "supertypes": [
            {
              "name": "BoneTimeline1"
            }
          ],
          "children": [
            {
              "name": "ShearYTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 881,
                  "character": 0
                },
                "end": {
                  "line": 883,
                  "character": 3
                }
              },
              "preview": "public ShearYTimeline (int frameCount, int bezierCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "apply(BoneLocal, BoneLocal, float, float, MixBlend, MixDirection)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 885,
                  "character": 0
                },
                "end": {
                  "line": 887,
                  "character": 3
                }
              },
              "preview": "protected void apply (BoneLocal pose, BoneLocal setup, float time, float alpha, MixBlend blend, MixDirection direction) {",
              "children": []
            }
          ]
        },
        {
          "name": "InheritTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 891,
              "character": 0
            },
            "end": {
              "line": 937,
              "character": 2
            }
          },
          "preview": "static public class InheritTimeline extends Timeline implements BoneTimeline",
          "documentation": "Changes a bone's {@link BoneLocal#getInherit()}.",
          "supertypes": [
            {
              "name": "Timeline"
            },
            {
              "name": "BoneTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 892,
                  "character": 0
                },
                "end": {
                  "line": 892,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 2;",
              "children": []
            },
            {
              "name": "INHERIT",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 893,
                  "character": 0
                },
                "end": {
                  "line": 893,
                  "character": 39
                }
              },
              "preview": "static private final int INHERIT = 1;",
              "children": []
            },
            {
              "name": "boneIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 895,
                  "character": 0
                },
                "end": {
                  "line": 895,
                  "character": 22
                }
              },
              "preview": "final int boneIndex;",
              "children": []
            },
            {
              "name": "InheritTimeline(int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 897,
                  "character": 0
                },
                "end": {
                  "line": 900,
                  "character": 3
                }
              },
              "preview": "public InheritTimeline (int frameCount, int boneIndex) {",
              "children": []
            },
            {
              "name": "getBoneIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 902,
                  "character": 0
                },
                "end": {
                  "line": 904,
                  "character": 3
                }
              },
              "preview": "public int getBoneIndex () {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 906,
                  "character": 0
                },
                "end": {
                  "line": 908,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, Inherit)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 913,
                  "character": 0
                },
                "end": {
                  "line": 917,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, Inherit inherit) {",
              "documentation": "Sets the inherit transform mode for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 919,
                  "character": 0
                },
                "end": {
                  "line": 936,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "SlotCurveTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 939,
              "character": 0
            },
            "end": {
              "line": 959,
              "character": 2
            }
          },
          "preview": "static abstract public class SlotCurveTimeline extends CurveTimeline implements SlotTimeline",
          "supertypes": [
            {
              "name": "CurveTimeline"
            },
            {
              "name": "SlotTimeline"
            }
          ],
          "children": [
            {
              "name": "slotIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 940,
                  "character": 0
                },
                "end": {
                  "line": 940,
                  "character": 22
                }
              },
              "preview": "final int slotIndex;",
              "children": []
            },
            {
              "name": "SlotCurveTimeline(int, int, int, String...)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 942,
                  "character": 0
                },
                "end": {
                  "line": 945,
                  "character": 3
                }
              },
              "preview": "public SlotCurveTimeline (int frameCount, int bezierCount, int slotIndex, String... propertyIds) {",
              "children": []
            },
            {
              "name": "getSlotIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 947,
                  "character": 0
                },
                "end": {
                  "line": 949,
                  "character": 3
                }
              },
              "preview": "public int getSlotIndex () {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 951,
                  "character": 0
                },
                "end": {
                  "line": 956,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            },
            {
              "name": "apply(Slot, SlotPose, float, float, MixBlend)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 958,
                  "character": 0
                },
                "end": {
                  "line": 958,
                  "character": 100
                }
              },
              "preview": "abstract protected void apply (Slot slot, SlotPose pose, float time, float alpha, MixBlend blend);",
              "children": []
            }
          ]
        },
        {
          "name": "RGBATimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 962,
              "character": 0
            },
            "end": {
              "line": 1037,
              "character": 2
            }
          },
          "preview": "static public class RGBATimeline extends SlotCurveTimeline",
          "documentation": "Changes a slot's {@link SlotPose#getColor()}.",
          "supertypes": [
            {
              "name": "SlotCurveTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 963,
                  "character": 0
                },
                "end": {
                  "line": 963,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 5;",
              "children": []
            },
            {
              "name": "R",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 964,
                  "character": 0
                },
                "end": {
                  "line": 964,
                  "character": 54
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4;",
              "children": []
            },
            {
              "name": "G",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 964,
                  "character": 0
                },
                "end": {
                  "line": 964,
                  "character": 54
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4;",
              "children": []
            },
            {
              "name": "B",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 964,
                  "character": 0
                },
                "end": {
                  "line": 964,
                  "character": 54
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4;",
              "children": []
            },
            {
              "name": "A",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 964,
                  "character": 0
                },
                "end": {
                  "line": 964,
                  "character": 54
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4;",
              "children": []
            },
            {
              "name": "RGBATimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 966,
                  "character": 0
                },
                "end": {
                  "line": 970,
                  "character": 3
                }
              },
              "preview": "public RGBATimeline (int frameCount, int bezierCount, int slotIndex) {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 972,
                  "character": 0
                },
                "end": {
                  "line": 974,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 979,
                  "character": 0
                },
                "end": {
                  "line": 986,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float r, float g, float b, float a) {",
              "documentation": "Sets the time and color for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "apply(Slot, SlotPose, float, float, MixBlend)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 988,
                  "character": 0
                },
                "end": {
                  "line": 1036,
                  "character": 3
                }
              },
              "preview": "protected void apply (Slot slot, SlotPose pose, float time, float alpha, MixBlend blend) {",
              "children": []
            }
          ]
        },
        {
          "name": "RGBTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1040,
              "character": 0
            },
            "end": {
              "line": 1124,
              "character": 2
            }
          },
          "preview": "static public class RGBTimeline extends SlotCurveTimeline",
          "documentation": "Changes the RGB for a slot's {@link SlotPose#getColor()}.",
          "supertypes": [
            {
              "name": "SlotCurveTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1041,
                  "character": 0
                },
                "end": {
                  "line": 1041,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 4;",
              "children": []
            },
            {
              "name": "R",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1042,
                  "character": 0
                },
                "end": {
                  "line": 1042,
                  "character": 47
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3;",
              "children": []
            },
            {
              "name": "G",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1042,
                  "character": 0
                },
                "end": {
                  "line": 1042,
                  "character": 47
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3;",
              "children": []
            },
            {
              "name": "B",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1042,
                  "character": 0
                },
                "end": {
                  "line": 1042,
                  "character": 47
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3;",
              "children": []
            },
            {
              "name": "RGBTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1044,
                  "character": 0
                },
                "end": {
                  "line": 1046,
                  "character": 3
                }
              },
              "preview": "public RGBTimeline (int frameCount, int bezierCount, int slotIndex) {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1048,
                  "character": 0
                },
                "end": {
                  "line": 1050,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1055,
                  "character": 0
                },
                "end": {
                  "line": 1061,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float r, float g, float b) {",
              "documentation": "Sets the time and color for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "apply(Slot, SlotPose, float, float, MixBlend)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1063,
                  "character": 0
                },
                "end": {
                  "line": 1123,
                  "character": 3
                }
              },
              "preview": "protected void apply (Slot slot, SlotPose pose, float time, float alpha, MixBlend blend) {",
              "children": []
            }
          ]
        },
        {
          "name": "AlphaTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1127,
              "character": 0
            },
            "end": {
              "line": 1164,
              "character": 2
            }
          },
          "preview": "static public class AlphaTimeline extends CurveTimeline1 implements SlotTimeline",
          "documentation": "Changes the alpha for a slot's {@link SlotPose#getColor()}.",
          "supertypes": [
            {
              "name": "CurveTimeline1"
            },
            {
              "name": "SlotTimeline"
            }
          ],
          "children": [
            {
              "name": "slotIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1128,
                  "character": 0
                },
                "end": {
                  "line": 1128,
                  "character": 22
                }
              },
              "preview": "final int slotIndex;",
              "children": []
            },
            {
              "name": "AlphaTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1130,
                  "character": 0
                },
                "end": {
                  "line": 1133,
                  "character": 3
                }
              },
              "preview": "public AlphaTimeline (int frameCount, int bezierCount, int slotIndex) {",
              "children": []
            },
            {
              "name": "getSlotIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1135,
                  "character": 0
                },
                "end": {
                  "line": 1137,
                  "character": 3
                }
              },
              "preview": "public int getSlotIndex () {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1139,
                  "character": 0
                },
                "end": {
                  "line": 1163,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "RGBA2Timeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1167,
              "character": 0
            },
            "end": {
              "line": 1282,
              "character": 2
            }
          },
          "preview": "static public class RGBA2Timeline extends SlotCurveTimeline",
          "documentation": "Changes a slot's {@link SlotPose#getColor()} and {@link SlotPose#getDarkColor()} for two color tinting.",
          "supertypes": [
            {
              "name": "SlotCurveTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1168,
                  "character": 0
                },
                "end": {
                  "line": 1168,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 8;",
              "children": []
            },
            {
              "name": "R",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1169,
                  "character": 0
                },
                "end": {
                  "line": 1169,
                  "character": 78
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4, R2 = 5, G2 = 6, B2 = 7;",
              "children": []
            },
            {
              "name": "G",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1169,
                  "character": 0
                },
                "end": {
                  "line": 1169,
                  "character": 78
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4, R2 = 5, G2 = 6, B2 = 7;",
              "children": []
            },
            {
              "name": "B",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1169,
                  "character": 0
                },
                "end": {
                  "line": 1169,
                  "character": 78
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4, R2 = 5, G2 = 6, B2 = 7;",
              "children": []
            },
            {
              "name": "A",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1169,
                  "character": 0
                },
                "end": {
                  "line": 1169,
                  "character": 78
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4, R2 = 5, G2 = 6, B2 = 7;",
              "children": []
            },
            {
              "name": "R2",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1169,
                  "character": 0
                },
                "end": {
                  "line": 1169,
                  "character": 78
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4, R2 = 5, G2 = 6, B2 = 7;",
              "children": []
            },
            {
              "name": "G2",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1169,
                  "character": 0
                },
                "end": {
                  "line": 1169,
                  "character": 78
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4, R2 = 5, G2 = 6, B2 = 7;",
              "children": []
            },
            {
              "name": "B2",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1169,
                  "character": 0
                },
                "end": {
                  "line": 1169,
                  "character": 78
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, A = 4, R2 = 5, G2 = 6, B2 = 7;",
              "children": []
            },
            {
              "name": "RGBA2Timeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1171,
                  "character": 0
                },
                "end": {
                  "line": 1176,
                  "character": 3
                }
              },
              "preview": "public RGBA2Timeline (int frameCount, int bezierCount, int slotIndex) {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1178,
                  "character": 0
                },
                "end": {
                  "line": 1180,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float, float, float, float, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1185,
                  "character": 0
                },
                "end": {
                  "line": 1195,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float r, float g, float b, float a, float r2, float g2, float b2) {",
              "documentation": "Sets the time, light color, and dark color for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "apply(Slot, SlotPose, float, float, MixBlend)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1197,
                  "character": 0
                },
                "end": {
                  "line": 1281,
                  "character": 3
                }
              },
              "preview": "protected void apply (Slot slot, SlotPose pose, float time, float alpha, MixBlend blend) {",
              "children": []
            }
          ]
        },
        {
          "name": "RGB2Timeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1285,
              "character": 0
            },
            "end": {
              "line": 1403,
              "character": 2
            }
          },
          "preview": "static public class RGB2Timeline extends SlotCurveTimeline",
          "documentation": "Changes the RGB for a slot's {@link SlotPose#getColor()} and {@link SlotPose#getDarkColor()} for two color tinting.",
          "supertypes": [
            {
              "name": "SlotCurveTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1286,
                  "character": 0
                },
                "end": {
                  "line": 1286,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 7;",
              "children": []
            },
            {
              "name": "R",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1287,
                  "character": 0
                },
                "end": {
                  "line": 1287,
                  "character": 71
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, R2 = 4, G2 = 5, B2 = 6;",
              "children": []
            },
            {
              "name": "G",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1287,
                  "character": 0
                },
                "end": {
                  "line": 1287,
                  "character": 71
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, R2 = 4, G2 = 5, B2 = 6;",
              "children": []
            },
            {
              "name": "B",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1287,
                  "character": 0
                },
                "end": {
                  "line": 1287,
                  "character": 71
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, R2 = 4, G2 = 5, B2 = 6;",
              "children": []
            },
            {
              "name": "R2",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1287,
                  "character": 0
                },
                "end": {
                  "line": 1287,
                  "character": 71
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, R2 = 4, G2 = 5, B2 = 6;",
              "children": []
            },
            {
              "name": "G2",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1287,
                  "character": 0
                },
                "end": {
                  "line": 1287,
                  "character": 71
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, R2 = 4, G2 = 5, B2 = 6;",
              "children": []
            },
            {
              "name": "B2",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1287,
                  "character": 0
                },
                "end": {
                  "line": 1287,
                  "character": 71
                }
              },
              "preview": "static private final int R = 1, G = 2, B = 3, R2 = 4, G2 = 5, B2 = 6;",
              "children": []
            },
            {
              "name": "RGB2Timeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1289,
                  "character": 0
                },
                "end": {
                  "line": 1293,
                  "character": 3
                }
              },
              "preview": "public RGB2Timeline (int frameCount, int bezierCount, int slotIndex) {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1295,
                  "character": 0
                },
                "end": {
                  "line": 1297,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float, float, float, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1302,
                  "character": 0
                },
                "end": {
                  "line": 1311,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float r, float g, float b, float r2, float g2, float b2) {",
              "documentation": "Sets the time, light color, and dark color for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "apply(Slot, SlotPose, float, float, MixBlend)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1313,
                  "character": 0
                },
                "end": {
                  "line": 1402,
                  "character": 3
                }
              },
              "preview": "protected void apply (Slot slot, SlotPose pose, float time, float alpha, MixBlend blend) {",
              "children": []
            }
          ]
        },
        {
          "name": "AttachmentTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1406,
              "character": 0
            },
            "end": {
              "line": 1455,
              "character": 2
            }
          },
          "preview": "static public class AttachmentTimeline extends Timeline implements SlotTimeline",
          "documentation": "Changes a slot's {@link SlotPose#getAttachment()}.",
          "supertypes": [
            {
              "name": "Timeline"
            },
            {
              "name": "SlotTimeline"
            }
          ],
          "children": [
            {
              "name": "slotIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1407,
                  "character": 0
                },
                "end": {
                  "line": 1407,
                  "character": 22
                }
              },
              "preview": "final int slotIndex;",
              "children": []
            },
            {
              "name": "attachmentNames",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1408,
                  "character": 0
                },
                "end": {
                  "line": 1408,
                  "character": 33
                }
              },
              "preview": "final String[] attachmentNames;",
              "children": []
            },
            {
              "name": "AttachmentTimeline(int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1410,
                  "character": 0
                },
                "end": {
                  "line": 1414,
                  "character": 3
                }
              },
              "preview": "public AttachmentTimeline (int frameCount, int slotIndex) {",
              "children": []
            },
            {
              "name": "getFrameCount()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1416,
                  "character": 0
                },
                "end": {
                  "line": 1418,
                  "character": 3
                }
              },
              "preview": "public int getFrameCount () {",
              "children": []
            },
            {
              "name": "getSlotIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1420,
                  "character": 0
                },
                "end": {
                  "line": 1422,
                  "character": 3
                }
              },
              "preview": "public int getSlotIndex () {",
              "children": []
            },
            {
              "name": "getAttachmentNames()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1425,
                  "character": 0
                },
                "end": {
                  "line": 1427,
                  "character": 3
                }
              },
              "preview": "public String[] getAttachmentNames () {",
              "documentation": "The attachment name for each frame. May contain null values to clear the attachment.",
              "children": []
            },
            {
              "name": "setFrame(int, float, String)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1432,
                  "character": 0
                },
                "end": {
                  "line": 1435,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, @Null String attachmentName) {",
              "documentation": "Sets the time and attachment name for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1437,
                  "character": 0
                },
                "end": {
                  "line": 1450,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            },
            {
              "name": "setAttachment(Skeleton, SlotPose, String)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1452,
                  "character": 0
                },
                "end": {
                  "line": 1454,
                  "character": 3
                }
              },
              "preview": "private void setAttachment (Skeleton skeleton, SlotPose pose, @Null String attachmentName) {",
              "children": []
            }
          ]
        },
        {
          "name": "DeformTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1458,
              "character": 0
            },
            "end": {
              "line": 1694,
              "character": 2
            }
          },
          "preview": "static public class DeformTimeline extends SlotCurveTimeline",
          "documentation": "Changes a slot's {@link SlotPose#getDeform()} to deform a {@link VertexAttachment}.",
          "supertypes": [
            {
              "name": "SlotCurveTimeline"
            }
          ],
          "children": [
            {
              "name": "attachment",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1459,
                  "character": 0
                },
                "end": {
                  "line": 1459,
                  "character": 36
                }
              },
              "preview": "final VertexAttachment attachment;",
              "children": []
            },
            {
              "name": "vertices",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1460,
                  "character": 0
                },
                "end": {
                  "line": 1460,
                  "character": 35
                }
              },
              "preview": "private final float[][] vertices;",
              "children": []
            },
            {
              "name": "DeformTimeline(int, int, int, VertexAttachment)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1462,
                  "character": 0
                },
                "end": {
                  "line": 1466,
                  "character": 3
                }
              },
              "preview": "public DeformTimeline (int frameCount, int bezierCount, int slotIndex, VertexAttachment attachment) {",
              "children": []
            },
            {
              "name": "getFrameCount()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1468,
                  "character": 0
                },
                "end": {
                  "line": 1470,
                  "character": 3
                }
              },
              "preview": "public int getFrameCount () {",
              "children": []
            },
            {
              "name": "getAttachment()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1475,
                  "character": 0
                },
                "end": {
                  "line": 1477,
                  "character": 3
                }
              },
              "preview": "public VertexAttachment getAttachment () {",
              "documentation": "The attachment that will be deformed.\n<p>\nSee {@link VertexAttachment#getTimelineAttachment()}.",
              "children": []
            },
            {
              "name": "getVertices()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1480,
                  "character": 0
                },
                "end": {
                  "line": 1482,
                  "character": 3
                }
              },
              "preview": "public float[][] getVertices () {",
              "documentation": "The vertices for each frame.",
              "children": []
            },
            {
              "name": "setFrame(int, float, float[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1488,
                  "character": 0
                },
                "end": {
                  "line": 1491,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float[] vertices) {",
              "documentation": "Sets the time and vertices for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.\n@param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights.",
              "children": []
            },
            {
              "name": "setBezier(int, int, int, float, float, float, float, float, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1495,
                  "character": 0
                },
                "end": {
                  "line": 1515,
                  "character": 3
                }
              },
              "preview": "public void setBezier (int bezier, int frame, int value, float time1, float value1, float cx1, float cy1, float cx2,",
              "documentation": "@param value1 Ignored (0 is used for a deform timeline).\n@param value2 Ignored (1 is used for a deform timeline).",
              "children": []
            },
            {
              "name": "getCurvePercent(float, int)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1519,
                  "character": 0
                },
                "end": {
                  "line": 1543,
                  "character": 3
                }
              },
              "preview": "private float getCurvePercent (float time, int frame) {",
              "documentation": "Returns the interpolated percentage for the specified time.\n@param frame The frame before <code>time</code>.",
              "children": []
            },
            {
              "name": "apply(Slot, SlotPose, float, float, MixBlend)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1545,
                  "character": 0
                },
                "end": {
                  "line": 1693,
                  "character": 3
                }
              },
              "preview": "protected void apply (Slot slot, SlotPose pose, float time, float alpha, MixBlend blend) {",
              "children": []
            }
          ]
        },
        {
          "name": "SequenceTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1697,
              "character": 0
            },
            "end": {
              "line": 1787,
              "character": 2
            }
          },
          "preview": "static public class SequenceTimeline extends Timeline implements SlotTimeline",
          "documentation": "Changes a slot's {@link SlotPose#getSequenceIndex()} for an attachment's {@link Sequence}.",
          "supertypes": [
            {
              "name": "Timeline"
            },
            {
              "name": "SlotTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1698,
                  "character": 0
                },
                "end": {
                  "line": 1698,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 3;",
              "children": []
            },
            {
              "name": "MODE",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1699,
                  "character": 0
                },
                "end": {
                  "line": 1699,
                  "character": 47
                }
              },
              "preview": "static private final int MODE = 1, DELAY = 2;",
              "children": []
            },
            {
              "name": "DELAY",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1699,
                  "character": 0
                },
                "end": {
                  "line": 1699,
                  "character": 47
                }
              },
              "preview": "static private final int MODE = 1, DELAY = 2;",
              "children": []
            },
            {
              "name": "slotIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1701,
                  "character": 0
                },
                "end": {
                  "line": 1701,
                  "character": 22
                }
              },
              "preview": "final int slotIndex;",
              "children": []
            },
            {
              "name": "attachment",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1702,
                  "character": 0
                },
                "end": {
                  "line": 1702,
                  "character": 36
                }
              },
              "preview": "final HasTextureRegion attachment;",
              "children": []
            },
            {
              "name": "SequenceTimeline(int, int, Attachment)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1704,
                  "character": 0
                },
                "end": {
                  "line": 1709,
                  "character": 3
                }
              },
              "preview": "public SequenceTimeline (int frameCount, int slotIndex, Attachment attachment) {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1711,
                  "character": 0
                },
                "end": {
                  "line": 1713,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "getSlotIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1715,
                  "character": 0
                },
                "end": {
                  "line": 1717,
                  "character": 3
                }
              },
              "preview": "public int getSlotIndex () {",
              "children": []
            },
            {
              "name": "getAttachment()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1719,
                  "character": 0
                },
                "end": {
                  "line": 1721,
                  "character": 3
                }
              },
              "preview": "public Attachment getAttachment () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, SequenceMode, int, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1726,
                  "character": 0
                },
                "end": {
                  "line": 1731,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, SequenceMode mode, int index, float delay) {",
              "documentation": "Sets the time, mode, index, and frame time for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param delay Seconds between frames.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1733,
                  "character": 0
                },
                "end": {
                  "line": 1786,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "EventTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1790,
              "character": 0
            },
            "end": {
              "line": 1846,
              "character": 2
            }
          },
          "preview": "static public class EventTimeline extends Timeline",
          "documentation": "Fires an {@link Event} when specific animation times are reached.",
          "supertypes": [
            {
              "name": "Timeline"
            }
          ],
          "children": [
            {
              "name": "propertyIds",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1791,
                  "character": 0
                },
                "end": {
                  "line": 1791,
                  "character": 91
                }
              },
              "preview": "static private final String[] propertyIds = {Integer.toString(Property.event.ordinal())};",
              "children": []
            },
            {
              "name": "events",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1793,
                  "character": 0
                },
                "end": {
                  "line": 1793,
                  "character": 31
                }
              },
              "preview": "private final Event[] events;",
              "children": []
            },
            {
              "name": "EventTimeline(int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1795,
                  "character": 0
                },
                "end": {
                  "line": 1798,
                  "character": 3
                }
              },
              "preview": "public EventTimeline (int frameCount) {",
              "children": []
            },
            {
              "name": "getFrameCount()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1800,
                  "character": 0
                },
                "end": {
                  "line": 1802,
                  "character": 3
                }
              },
              "preview": "public int getFrameCount () {",
              "children": []
            },
            {
              "name": "getEvents()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1805,
                  "character": 0
                },
                "end": {
                  "line": 1807,
                  "character": 3
                }
              },
              "preview": "public Event[] getEvents () {",
              "documentation": "The event for each frame.",
              "children": []
            },
            {
              "name": "setFrame(int, Event)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1811,
                  "character": 0
                },
                "end": {
                  "line": 1814,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, Event event) {",
              "documentation": "Sets the time and event for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1817,
                  "character": 0
                },
                "end": {
                  "line": 1845,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> firedEvents, float alpha,",
              "documentation": "Fires events for frames > <code>lastTime</code> and <= <code>time</code>.",
              "children": []
            }
          ]
        },
        {
          "name": "DrawOrderTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1849,
              "character": 0
            },
            "end": {
              "line": 1902,
              "character": 2
            }
          },
          "preview": "static public class DrawOrderTimeline extends Timeline",
          "documentation": "Changes a skeleton's {@link Skeleton#getDrawOrder()}.",
          "supertypes": [
            {
              "name": "Timeline"
            }
          ],
          "children": [
            {
              "name": "propertyIds",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1850,
                  "character": 0
                },
                "end": {
                  "line": 1850,
                  "character": 95
                }
              },
              "preview": "static private final String[] propertyIds = {Integer.toString(Property.drawOrder.ordinal())};",
              "children": []
            },
            {
              "name": "drawOrders",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1852,
                  "character": 0
                },
                "end": {
                  "line": 1852,
                  "character": 35
                }
              },
              "preview": "private final int[][] drawOrders;",
              "children": []
            },
            {
              "name": "DrawOrderTimeline(int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1854,
                  "character": 0
                },
                "end": {
                  "line": 1857,
                  "character": 3
                }
              },
              "preview": "public DrawOrderTimeline (int frameCount) {",
              "children": []
            },
            {
              "name": "getFrameCount()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1859,
                  "character": 0
                },
                "end": {
                  "line": 1861,
                  "character": 3
                }
              },
              "preview": "public int getFrameCount () {",
              "children": []
            },
            {
              "name": "getDrawOrders()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1864,
                  "character": 0
                },
                "end": {
                  "line": 1866,
                  "character": 3
                }
              },
              "preview": "public int[][] getDrawOrders () {",
              "documentation": "The draw order for each frame. See {@link #setFrame(int, float, int[])}.",
              "children": []
            },
            {
              "name": "setFrame(int, float, int[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1873,
                  "character": 0
                },
                "end": {
                  "line": 1876,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, @Null int[] drawOrder) {",
              "documentation": "Sets the time and draw order for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.\n@param drawOrder For each slot in {@link Skeleton#slots}, the index of the slot in the new draw order. May be null to use\nsetup pose draw order.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1878,
                  "character": 0
                },
                "end": {
                  "line": 1901,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "ConstraintTimeline",
          "kind": "interface",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1904,
              "character": 0
            },
            "end": {
              "line": 1907,
              "character": 2
            }
          },
          "preview": "static public interface ConstraintTimeline",
          "children": [
            {
              "name": "getConstraintIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1906,
                  "character": 0
                },
                "end": {
                  "line": 1906,
                  "character": 35
                }
              },
              "preview": "public int getConstraintIndex ();",
              "documentation": "The index of the constraint in {@link Skeleton#getConstraints()} that will be changed when this timeline is applied.",
              "children": []
            }
          ]
        },
        {
          "name": "IkConstraintTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 1912,
              "character": 0
            },
            "end": {
              "line": 2023,
              "character": 2
            }
          },
          "preview": "static public class IkConstraintTimeline extends CurveTimeline implements ConstraintTimeline",
          "documentation": "Changes an IK constraint's {@link IkConstraintPose#getMix()}, {@link IkConstraintPose#getSoftness()},\n{@link IkConstraintPose#getBendDirection()}, {@link IkConstraintPose#getStretch()}, and\n{@link IkConstraintPose#getCompress()}.",
          "supertypes": [
            {
              "name": "CurveTimeline"
            },
            {
              "name": "ConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1913,
                  "character": 0
                },
                "end": {
                  "line": 1913,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 6;",
              "children": []
            },
            {
              "name": "MIX",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1914,
                  "character": 0
                },
                "end": {
                  "line": 1914,
                  "character": 96
                }
              },
              "preview": "static private final int MIX = 1, SOFTNESS = 2, BEND_DIRECTION = 3, COMPRESS = 4, STRETCH = 5;",
              "children": []
            },
            {
              "name": "SOFTNESS",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1914,
                  "character": 0
                },
                "end": {
                  "line": 1914,
                  "character": 96
                }
              },
              "preview": "static private final int MIX = 1, SOFTNESS = 2, BEND_DIRECTION = 3, COMPRESS = 4, STRETCH = 5;",
              "children": []
            },
            {
              "name": "BEND_DIRECTION",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1914,
                  "character": 0
                },
                "end": {
                  "line": 1914,
                  "character": 96
                }
              },
              "preview": "static private final int MIX = 1, SOFTNESS = 2, BEND_DIRECTION = 3, COMPRESS = 4, STRETCH = 5;",
              "children": []
            },
            {
              "name": "COMPRESS",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1914,
                  "character": 0
                },
                "end": {
                  "line": 1914,
                  "character": 96
                }
              },
              "preview": "static private final int MIX = 1, SOFTNESS = 2, BEND_DIRECTION = 3, COMPRESS = 4, STRETCH = 5;",
              "children": []
            },
            {
              "name": "STRETCH",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1914,
                  "character": 0
                },
                "end": {
                  "line": 1914,
                  "character": 96
                }
              },
              "preview": "static private final int MIX = 1, SOFTNESS = 2, BEND_DIRECTION = 3, COMPRESS = 4, STRETCH = 5;",
              "children": []
            },
            {
              "name": "constraintIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1916,
                  "character": 0
                },
                "end": {
                  "line": 1916,
                  "character": 28
                }
              },
              "preview": "final int constraintIndex;",
              "children": []
            },
            {
              "name": "IkConstraintTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1918,
                  "character": 0
                },
                "end": {
                  "line": 1921,
                  "character": 3
                }
              },
              "preview": "public IkConstraintTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1923,
                  "character": 0
                },
                "end": {
                  "line": 1925,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "getConstraintIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1927,
                  "character": 0
                },
                "end": {
                  "line": 1929,
                  "character": 3
                }
              },
              "preview": "public int getConstraintIndex () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float, float, int, boolean, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1935,
                  "character": 0
                },
                "end": {
                  "line": 1944,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float mix, float softness, int bendDirection, boolean compress,",
              "documentation": "Sets the time, mix, softness, bend direction, compress, and stretch for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.\n@param bendDirection 1 or -1.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 1946,
                  "character": 0
                },
                "end": {
                  "line": 2022,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "TransformConstraintTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2028,
              "character": 0
            },
            "end": {
              "line": 2158,
              "character": 2
            }
          },
          "preview": "static public class TransformConstraintTimeline extends CurveTimeline implements ConstraintTimeline",
          "documentation": "Changes a transform constraint's {@link TransformConstraintPose#getMixRotate()}, {@link TransformConstraintPose#getMixX()},\n{@link TransformConstraintPose#getMixY()}, {@link TransformConstraintPose#getMixScaleX()},\n{@link TransformConstraintPose#getMixScaleY()}, and {@link TransformConstraintPose#getMixShearY()}.",
          "supertypes": [
            {
              "name": "CurveTimeline"
            },
            {
              "name": "ConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2029,
                  "character": 0
                },
                "end": {
                  "line": 2029,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 7;",
              "children": []
            },
            {
              "name": "ROTATE",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2030,
                  "character": 0
                },
                "end": {
                  "line": 2030,
                  "character": 88
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3, SCALEX = 4, SCALEY = 5, SHEARY = 6;",
              "children": []
            },
            {
              "name": "X",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2030,
                  "character": 0
                },
                "end": {
                  "line": 2030,
                  "character": 88
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3, SCALEX = 4, SCALEY = 5, SHEARY = 6;",
              "children": []
            },
            {
              "name": "Y",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2030,
                  "character": 0
                },
                "end": {
                  "line": 2030,
                  "character": 88
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3, SCALEX = 4, SCALEY = 5, SHEARY = 6;",
              "children": []
            },
            {
              "name": "SCALEX",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2030,
                  "character": 0
                },
                "end": {
                  "line": 2030,
                  "character": 88
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3, SCALEX = 4, SCALEY = 5, SHEARY = 6;",
              "children": []
            },
            {
              "name": "SCALEY",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2030,
                  "character": 0
                },
                "end": {
                  "line": 2030,
                  "character": 88
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3, SCALEX = 4, SCALEY = 5, SHEARY = 6;",
              "children": []
            },
            {
              "name": "SHEARY",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2030,
                  "character": 0
                },
                "end": {
                  "line": 2030,
                  "character": 88
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3, SCALEX = 4, SCALEY = 5, SHEARY = 6;",
              "children": []
            },
            {
              "name": "constraintIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2032,
                  "character": 0
                },
                "end": {
                  "line": 2032,
                  "character": 28
                }
              },
              "preview": "final int constraintIndex;",
              "children": []
            },
            {
              "name": "TransformConstraintTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2034,
                  "character": 0
                },
                "end": {
                  "line": 2037,
                  "character": 3
                }
              },
              "preview": "public TransformConstraintTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2039,
                  "character": 0
                },
                "end": {
                  "line": 2041,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "getConstraintIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2043,
                  "character": 0
                },
                "end": {
                  "line": 2045,
                  "character": 3
                }
              },
              "preview": "public int getConstraintIndex () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float, float, float, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2050,
                  "character": 0
                },
                "end": {
                  "line": 2060,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float mixRotate, float mixX, float mixY, float mixScaleX, float mixScaleY,",
              "documentation": "Sets the time, rotate mix, translate mix, scale mix, and shear mix for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2062,
                  "character": 0
                },
                "end": {
                  "line": 2157,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "ConstraintTimeline1",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2160,
              "character": 0
            },
            "end": {
              "line": 2171,
              "character": 2
            }
          },
          "preview": "static abstract public class ConstraintTimeline1 extends CurveTimeline1 implements ConstraintTimeline",
          "supertypes": [
            {
              "name": "CurveTimeline1"
            },
            {
              "name": "ConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "constraintIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2161,
                  "character": 0
                },
                "end": {
                  "line": 2161,
                  "character": 28
                }
              },
              "preview": "final int constraintIndex;",
              "children": []
            },
            {
              "name": "ConstraintTimeline1(int, int, int, Property)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2163,
                  "character": 0
                },
                "end": {
                  "line": 2166,
                  "character": 3
                }
              },
              "preview": "public ConstraintTimeline1 (int frameCount, int bezierCount, int constraintIndex, Property property) {",
              "children": []
            },
            {
              "name": "getConstraintIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2168,
                  "character": 0
                },
                "end": {
                  "line": 2170,
                  "character": 3
                }
              },
              "preview": "public int getConstraintIndex () {",
              "children": []
            }
          ]
        },
        {
          "name": "PathConstraintPositionTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2174,
              "character": 0
            },
            "end": {
              "line": 2188,
              "character": 2
            }
          },
          "preview": "static public class PathConstraintPositionTimeline extends ConstraintTimeline1",
          "documentation": "Changes a path constraint's {@link PathConstraintPose#getPosition()}.",
          "supertypes": [
            {
              "name": "ConstraintTimeline1"
            }
          ],
          "children": [
            {
              "name": "PathConstraintPositionTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2175,
                  "character": 0
                },
                "end": {
                  "line": 2177,
                  "character": 3
                }
              },
              "preview": "public PathConstraintPositionTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2179,
                  "character": 0
                },
                "end": {
                  "line": 2187,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "PathConstraintSpacingTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2191,
              "character": 0
            },
            "end": {
              "line": 2205,
              "character": 2
            }
          },
          "preview": "static public class PathConstraintSpacingTimeline extends ConstraintTimeline1",
          "documentation": "Changes a path constraint's {@link PathConstraintPose#getSpacing()}.",
          "supertypes": [
            {
              "name": "ConstraintTimeline1"
            }
          ],
          "children": [
            {
              "name": "PathConstraintSpacingTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2192,
                  "character": 0
                },
                "end": {
                  "line": 2194,
                  "character": 3
                }
              },
              "preview": "public PathConstraintSpacingTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2196,
                  "character": 0
                },
                "end": {
                  "line": 2204,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "PathConstraintMixTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2209,
              "character": 0
            },
            "end": {
              "line": 2308,
              "character": 2
            }
          },
          "preview": "static public class PathConstraintMixTimeline extends CurveTimeline implements ConstraintTimeline",
          "documentation": "Changes a path constraint's {@link PathConstraintPose#getMixRotate()}, {@link PathConstraintPose#getMixX()}, and\n{@link PathConstraintPose#getMixY()}.",
          "supertypes": [
            {
              "name": "CurveTimeline"
            },
            {
              "name": "ConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "ENTRIES",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2210,
                  "character": 0
                },
                "end": {
                  "line": 2210,
                  "character": 38
                }
              },
              "preview": "static public final int ENTRIES = 4;",
              "children": []
            },
            {
              "name": "ROTATE",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2211,
                  "character": 0
                },
                "end": {
                  "line": 2211,
                  "character": 52
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3;",
              "children": []
            },
            {
              "name": "X",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2211,
                  "character": 0
                },
                "end": {
                  "line": 2211,
                  "character": 52
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3;",
              "children": []
            },
            {
              "name": "Y",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2211,
                  "character": 0
                },
                "end": {
                  "line": 2211,
                  "character": 52
                }
              },
              "preview": "static private final int ROTATE = 1, X = 2, Y = 3;",
              "children": []
            },
            {
              "name": "constraintIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2213,
                  "character": 0
                },
                "end": {
                  "line": 2213,
                  "character": 28
                }
              },
              "preview": "final int constraintIndex;",
              "children": []
            },
            {
              "name": "PathConstraintMixTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2215,
                  "character": 0
                },
                "end": {
                  "line": 2218,
                  "character": 3
                }
              },
              "preview": "public PathConstraintMixTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "getFrameEntries()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2220,
                  "character": 0
                },
                "end": {
                  "line": 2222,
                  "character": 3
                }
              },
              "preview": "public int getFrameEntries () {",
              "children": []
            },
            {
              "name": "getConstraintIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2224,
                  "character": 0
                },
                "end": {
                  "line": 2226,
                  "character": 3
                }
              },
              "preview": "public int getConstraintIndex () {",
              "children": []
            },
            {
              "name": "setFrame(int, float, float, float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2231,
                  "character": 0
                },
                "end": {
                  "line": 2237,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time, float mixRotate, float mixX, float mixY) {",
              "documentation": "Sets the time and color for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.\n@param time The frame time in seconds.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2239,
                  "character": 0
                },
                "end": {
                  "line": 2307,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2311,
              "character": 0
            },
            "end": {
              "line": 2344,
              "character": 2
            }
          },
          "preview": "static abstract public class PhysicsConstraintTimeline extends ConstraintTimeline1",
          "documentation": "The base class for most {@link PhysicsConstraint} timelines.",
          "supertypes": [
            {
              "name": "ConstraintTimeline1"
            }
          ],
          "children": [
            {
              "name": "PhysicsConstraintTimeline(int, int, int, Property)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2313,
                  "character": 0
                },
                "end": {
                  "line": 2315,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintTimeline (int frameCount, int bezierCount, int constraintIndex, Property property) {",
              "documentation": "@param constraintIndex -1 for all physics constraints in the skeleton.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2317,
                  "character": 0
                },
                "end": {
                  "line": 2337,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            },
            {
              "name": "get(PhysicsConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2339,
                  "character": 0
                },
                "end": {
                  "line": 2339,
                  "character": 60
                }
              },
              "preview": "abstract protected float get (PhysicsConstraintPose pose);",
              "children": []
            },
            {
              "name": "set(PhysicsConstraintPose, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2341,
                  "character": 0
                },
                "end": {
                  "line": 2341,
                  "character": 72
                }
              },
              "preview": "abstract protected void set (PhysicsConstraintPose pose, float value);",
              "children": []
            },
            {
              "name": "global(PhysicsConstraintData)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2343,
                  "character": 0
                },
                "end": {
                  "line": 2343,
                  "character": 71
                }
              },
              "preview": "abstract protected boolean global (PhysicsConstraintData constraint);",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintInertiaTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2347,
              "character": 0
            },
            "end": {
              "line": 2363,
              "character": 2
            }
          },
          "preview": "static public class PhysicsConstraintInertiaTimeline extends PhysicsConstraintTimeline",
          "documentation": "Changes a physics constraint's {@link PhysicsConstraintPose#getInertia()}.",
          "supertypes": [
            {
              "name": "PhysicsConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "PhysicsConstraintInertiaTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2348,
                  "character": 0
                },
                "end": {
                  "line": 2350,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintInertiaTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "get(PhysicsConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2352,
                  "character": 0
                },
                "end": {
                  "line": 2354,
                  "character": 3
                }
              },
              "preview": "protected float get (PhysicsConstraintPose pose) {",
              "children": []
            },
            {
              "name": "set(PhysicsConstraintPose, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2356,
                  "character": 0
                },
                "end": {
                  "line": 2358,
                  "character": 3
                }
              },
              "preview": "protected void set (PhysicsConstraintPose pose, float value) {",
              "children": []
            },
            {
              "name": "global(PhysicsConstraintData)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2360,
                  "character": 0
                },
                "end": {
                  "line": 2362,
                  "character": 3
                }
              },
              "preview": "protected boolean global (PhysicsConstraintData constraint) {",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintStrengthTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2366,
              "character": 0
            },
            "end": {
              "line": 2382,
              "character": 2
            }
          },
          "preview": "static public class PhysicsConstraintStrengthTimeline extends PhysicsConstraintTimeline",
          "documentation": "Changes a physics constraint's {@link PhysicsConstraintPose#getStrength()}.",
          "supertypes": [
            {
              "name": "PhysicsConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "PhysicsConstraintStrengthTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2367,
                  "character": 0
                },
                "end": {
                  "line": 2369,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintStrengthTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "get(PhysicsConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2371,
                  "character": 0
                },
                "end": {
                  "line": 2373,
                  "character": 3
                }
              },
              "preview": "protected float get (PhysicsConstraintPose pose) {",
              "children": []
            },
            {
              "name": "set(PhysicsConstraintPose, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2375,
                  "character": 0
                },
                "end": {
                  "line": 2377,
                  "character": 3
                }
              },
              "preview": "protected void set (PhysicsConstraintPose pose, float value) {",
              "children": []
            },
            {
              "name": "global(PhysicsConstraintData)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2379,
                  "character": 0
                },
                "end": {
                  "line": 2381,
                  "character": 3
                }
              },
              "preview": "protected boolean global (PhysicsConstraintData constraint) {",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintDampingTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2385,
              "character": 0
            },
            "end": {
              "line": 2401,
              "character": 2
            }
          },
          "preview": "static public class PhysicsConstraintDampingTimeline extends PhysicsConstraintTimeline",
          "documentation": "Changes a physics constraint's {@link PhysicsConstraintPose#getDamping()}.",
          "supertypes": [
            {
              "name": "PhysicsConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "PhysicsConstraintDampingTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2386,
                  "character": 0
                },
                "end": {
                  "line": 2388,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintDampingTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "get(PhysicsConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2390,
                  "character": 0
                },
                "end": {
                  "line": 2392,
                  "character": 3
                }
              },
              "preview": "protected float get (PhysicsConstraintPose pose) {",
              "children": []
            },
            {
              "name": "set(PhysicsConstraintPose, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2394,
                  "character": 0
                },
                "end": {
                  "line": 2396,
                  "character": 3
                }
              },
              "preview": "protected void set (PhysicsConstraintPose pose, float value) {",
              "children": []
            },
            {
              "name": "global(PhysicsConstraintData)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2398,
                  "character": 0
                },
                "end": {
                  "line": 2400,
                  "character": 3
                }
              },
              "preview": "protected boolean global (PhysicsConstraintData constraint) {",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintMassTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2404,
              "character": 0
            },
            "end": {
              "line": 2420,
              "character": 2
            }
          },
          "preview": "static public class PhysicsConstraintMassTimeline extends PhysicsConstraintTimeline",
          "documentation": "Changes a physics constraint's {@link PhysicsConstraintPose#getMassInverse()}. The timeline values are not inverted.",
          "supertypes": [
            {
              "name": "PhysicsConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "PhysicsConstraintMassTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2405,
                  "character": 0
                },
                "end": {
                  "line": 2407,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintMassTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "get(PhysicsConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2409,
                  "character": 0
                },
                "end": {
                  "line": 2411,
                  "character": 3
                }
              },
              "preview": "protected float get (PhysicsConstraintPose pose) {",
              "children": []
            },
            {
              "name": "set(PhysicsConstraintPose, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2413,
                  "character": 0
                },
                "end": {
                  "line": 2415,
                  "character": 3
                }
              },
              "preview": "protected void set (PhysicsConstraintPose pose, float value) {",
              "children": []
            },
            {
              "name": "global(PhysicsConstraintData)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2417,
                  "character": 0
                },
                "end": {
                  "line": 2419,
                  "character": 3
                }
              },
              "preview": "protected boolean global (PhysicsConstraintData constraint) {",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintWindTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2423,
              "character": 0
            },
            "end": {
              "line": 2439,
              "character": 2
            }
          },
          "preview": "static public class PhysicsConstraintWindTimeline extends PhysicsConstraintTimeline",
          "documentation": "Changes a physics constraint's {@link PhysicsConstraintPose#getWind()}.",
          "supertypes": [
            {
              "name": "PhysicsConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "PhysicsConstraintWindTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2424,
                  "character": 0
                },
                "end": {
                  "line": 2426,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintWindTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "get(PhysicsConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2428,
                  "character": 0
                },
                "end": {
                  "line": 2430,
                  "character": 3
                }
              },
              "preview": "protected float get (PhysicsConstraintPose pose) {",
              "children": []
            },
            {
              "name": "set(PhysicsConstraintPose, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2432,
                  "character": 0
                },
                "end": {
                  "line": 2434,
                  "character": 3
                }
              },
              "preview": "protected void set (PhysicsConstraintPose pose, float value) {",
              "children": []
            },
            {
              "name": "global(PhysicsConstraintData)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2436,
                  "character": 0
                },
                "end": {
                  "line": 2438,
                  "character": 3
                }
              },
              "preview": "protected boolean global (PhysicsConstraintData constraint) {",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintGravityTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2442,
              "character": 0
            },
            "end": {
              "line": 2458,
              "character": 2
            }
          },
          "preview": "static public class PhysicsConstraintGravityTimeline extends PhysicsConstraintTimeline",
          "documentation": "Changes a physics constraint's {@link PhysicsConstraintPose#getGravity()}.",
          "supertypes": [
            {
              "name": "PhysicsConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "PhysicsConstraintGravityTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2443,
                  "character": 0
                },
                "end": {
                  "line": 2445,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintGravityTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "get(PhysicsConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2447,
                  "character": 0
                },
                "end": {
                  "line": 2449,
                  "character": 3
                }
              },
              "preview": "protected float get (PhysicsConstraintPose pose) {",
              "children": []
            },
            {
              "name": "set(PhysicsConstraintPose, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2451,
                  "character": 0
                },
                "end": {
                  "line": 2453,
                  "character": 3
                }
              },
              "preview": "protected void set (PhysicsConstraintPose pose, float value) {",
              "children": []
            },
            {
              "name": "global(PhysicsConstraintData)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2455,
                  "character": 0
                },
                "end": {
                  "line": 2457,
                  "character": 3
                }
              },
              "preview": "protected boolean global (PhysicsConstraintData constraint) {",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintMixTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2461,
              "character": 0
            },
            "end": {
              "line": 2477,
              "character": 2
            }
          },
          "preview": "static public class PhysicsConstraintMixTimeline extends PhysicsConstraintTimeline",
          "documentation": "Changes a physics constraint's {@link PhysicsConstraintPose#getMix()}.",
          "supertypes": [
            {
              "name": "PhysicsConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "PhysicsConstraintMixTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2462,
                  "character": 0
                },
                "end": {
                  "line": 2464,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintMixTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "get(PhysicsConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2466,
                  "character": 0
                },
                "end": {
                  "line": 2468,
                  "character": 3
                }
              },
              "preview": "protected float get (PhysicsConstraintPose pose) {",
              "children": []
            },
            {
              "name": "set(PhysicsConstraintPose, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2470,
                  "character": 0
                },
                "end": {
                  "line": 2472,
                  "character": 3
                }
              },
              "preview": "protected void set (PhysicsConstraintPose pose, float value) {",
              "children": []
            },
            {
              "name": "global(PhysicsConstraintData)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2474,
                  "character": 0
                },
                "end": {
                  "line": 2476,
                  "character": 3
                }
              },
              "preview": "protected boolean global (PhysicsConstraintData constraint) {",
              "children": []
            }
          ]
        },
        {
          "name": "PhysicsConstraintResetTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2480,
              "character": 0
            },
            "end": {
              "line": 2538,
              "character": 2
            }
          },
          "preview": "static public class PhysicsConstraintResetTimeline extends Timeline implements ConstraintTimeline",
          "documentation": "Resets a physics constraint when specific animation times are reached.",
          "supertypes": [
            {
              "name": "Timeline"
            },
            {
              "name": "ConstraintTimeline"
            }
          ],
          "children": [
            {
              "name": "propertyIds",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2481,
                  "character": 0
                },
                "end": {
                  "line": 2481,
                  "character": 108
                }
              },
              "preview": "static private final String[] propertyIds = {Integer.toString(Property.physicsConstraintReset.ordinal())};",
              "children": []
            },
            {
              "name": "constraintIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2483,
                  "character": 0
                },
                "end": {
                  "line": 2483,
                  "character": 28
                }
              },
              "preview": "final int constraintIndex;",
              "children": []
            },
            {
              "name": "PhysicsConstraintResetTimeline(int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2486,
                  "character": 0
                },
                "end": {
                  "line": 2489,
                  "character": 3
                }
              },
              "preview": "public PhysicsConstraintResetTimeline (int frameCount, int constraintIndex) {",
              "documentation": "@param constraintIndex -1 for all physics constraints in the skeleton.",
              "children": []
            },
            {
              "name": "getConstraintIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2493,
                  "character": 0
                },
                "end": {
                  "line": 2495,
                  "character": 3
                }
              },
              "preview": "public int getConstraintIndex () {",
              "documentation": "The index of the physics constraint in {@link Skeleton#getConstraints()} that will be reset when this timeline is\napplied, or -1 if all physics constraints in the skeleton will be reset.",
              "children": []
            },
            {
              "name": "getFrameCount()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2497,
                  "character": 0
                },
                "end": {
                  "line": 2499,
                  "character": 3
                }
              },
              "preview": "public int getFrameCount () {",
              "children": []
            },
            {
              "name": "setFrame(int, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2503,
                  "character": 0
                },
                "end": {
                  "line": 2505,
                  "character": 3
                }
              },
              "preview": "public void setFrame (int frame, float time) {",
              "documentation": "Sets the time for the specified frame.\n@param frame Between 0 and <code>frameCount</code>, inclusive.",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2508,
                  "character": 0
                },
                "end": {
                  "line": 2537,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> firedEvents, float alpha,",
              "documentation": "Resets the physics constraint when frames > <code>lastTime</code> and <= <code>time</code>.",
              "children": []
            }
          ]
        },
        {
          "name": "SliderTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2541,
              "character": 0
            },
            "end": {
              "line": 2555,
              "character": 2
            }
          },
          "preview": "static public class SliderTimeline extends ConstraintTimeline1",
          "documentation": "Changes a slider's {@link SliderPose#getTime()}.",
          "supertypes": [
            {
              "name": "ConstraintTimeline1"
            }
          ],
          "children": [
            {
              "name": "SliderTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2542,
                  "character": 0
                },
                "end": {
                  "line": 2544,
                  "character": 3
                }
              },
              "preview": "public SliderTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2546,
                  "character": 0
                },
                "end": {
                  "line": 2554,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        },
        {
          "name": "SliderMixTimeline",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
          "range": {
            "start": {
              "line": 2558,
              "character": 0
            },
            "end": {
              "line": 2572,
              "character": 2
            }
          },
          "preview": "static public class SliderMixTimeline extends ConstraintTimeline1",
          "documentation": "Changes a slider's {@link SliderPose#getMix()}.",
          "supertypes": [
            {
              "name": "ConstraintTimeline1"
            }
          ],
          "children": [
            {
              "name": "SliderMixTimeline(int, int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2559,
                  "character": 0
                },
                "end": {
                  "line": 2561,
                  "character": 3
                }
              },
              "preview": "public SliderMixTimeline (int frameCount, int bezierCount, int constraintIndex) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, float, float, Array",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Animation.java",
              "range": {
                "start": {
                  "line": 2563,
                  "character": 0
                },
                "end": {
                  "line": 2571,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, float lastTime, float time, @Null Array<Event> events, float alpha, MixBlend blend,",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "AnimationState",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
      "range": {
        "start": {
          "line": 52,
          "character": 0
        },
        "end": {
          "line": 1487,
          "character": 1
        }
      },
      "preview": "public class AnimationState",
      "documentation": "Applies animations over time, queues animations for later playback, mixes (crossfading) between animations, and applies\nmultiple animations on top of each other (layering).\n<p>\nSee <a href='https://esotericsoftware.com/spine-applying-animations/'>Applying Animations</a> in the Spine Runtimes Guide.",
      "children": [
        {
          "name": "emptyAnimation",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 106
            }
          },
          "preview": "static final Animation emptyAnimation = new Animation(\"<empty>\", new Array(true, 0, Timeline[]::new), 0);",
          "children": []
        },
        {
          "name": "SUBSEQUENT",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 41
            }
          },
          "preview": "static private final int SUBSEQUENT = 0;",
          "documentation": "1) A previously applied timeline has set this property.<br>\nResult: Mix from the current pose to the timeline pose.",
          "children": []
        },
        {
          "name": "FIRST",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 36
            }
          },
          "preview": "static private final int FIRST = 1;",
          "documentation": "1) This is the first timeline to set this property.<br>\n2) The next track entry applied after this one does not have a timeline to set this property.<br>\nResult: Mix from the setup pose to the timeline pose.",
          "children": []
        },
        {
          "name": "HOLD_SUBSEQUENT",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 46
            }
          },
          "preview": "static private final int HOLD_SUBSEQUENT = 2;",
          "documentation": "1) A previously applied timeline has set this property.<br>\n2) The next track entry to be applied does have a timeline to set this property.<br>\n3) The next track entry after that one does not have a timeline to set this property.<br>\nResult: Mix from the current pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading\nanimations that key the same property. A subsequent timeline will set this property using a mix.",
          "children": []
        },
        {
          "name": "HOLD_FIRST",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 41
            }
          },
          "preview": "static private final int HOLD_FIRST = 3;",
          "documentation": "1) This is the first timeline to set this property.<br>\n2) The next track entry to be applied does have a timeline to set this property.<br>\n3) The next track entry after that one does not have a timeline to set this property.<br>\nResult: Mix from the setup pose to the timeline pose, but do not mix out. This avoids \"dipping\" when crossfading animations\nthat key the same property. A subsequent timeline will set this property using a mix.",
          "children": []
        },
        {
          "name": "HOLD_MIX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 39
            }
          },
          "preview": "static private final int HOLD_MIX = 4;",
          "documentation": "1) This is the first timeline to set this property.<br>\n2) The next track entry to be applied does have a timeline to set this property.<br>\n3) The next track entry after that one does have a timeline to set this property.<br>\n4) timelineHoldMix stores the first subsequent track entry that does not have a timeline to set this property.<br>\nResult: The same as HOLD except the mix percentage from the timelineHoldMix track entry is used. This handles when more than\n2 track entries in a row have a timeline that sets the same property.<br>\nEg, A -> B -> C -> D where A, B, and C have a timeline setting same property, but D does not. When A is applied, to avoid\n\"dipping\" A is not mixed out, however D (the first entry that doesn't set the property) mixing in is used to mix out A\n(which affects B and C). Without using D to mix out, A would be applied fully until mixing completes, then snap to the mixed\nout position.",
          "children": []
        },
        {
          "name": "SETUP",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 49
            }
          },
          "preview": "static private final int SETUP = 1, CURRENT = 2;",
          "children": []
        },
        {
          "name": "CURRENT",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 49
            }
          },
          "preview": "static private final int SETUP = 1, CURRENT = 2;",
          "children": []
        },
        {
          "name": "data",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 33
            }
          },
          "preview": "private AnimationStateData data;",
          "children": []
        },
        {
          "name": "tracks",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 72
            }
          },
          "preview": "final Array<TrackEntry> tracks = new Array(true, 4, TrackEntry[]::new);",
          "children": []
        },
        {
          "name": "events",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 70
            }
          },
          "preview": "private final Array<Event> events = new Array(true, 4, Event[]::new);",
          "children": []
        },
        {
          "name": "listeners",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 116
            }
          },
          "preview": "final SnapshotArray<AnimationStateListener> listeners = new SnapshotArray(true, 16, AnimationStateListener[]::new);",
          "children": []
        },
        {
          "name": "queue",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 51
            }
          },
          "preview": "private final EventQueue queue = new EventQueue();",
          "children": []
        },
        {
          "name": "propertyIds",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 63
            }
          },
          "preview": "private final ObjectSet<String> propertyIds = new ObjectSet();",
          "children": []
        },
        {
          "name": "animationsChanged",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 27
            }
          },
          "preview": "boolean animationsChanged;",
          "children": []
        },
        {
          "name": "timeScale",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 29
            }
          },
          "preview": "private float timeScale = 1;",
          "children": []
        },
        {
          "name": "unkeyedState",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 26
            }
          },
          "preview": "private int unkeyedState;",
          "children": []
        },
        {
          "name": "trackEntryPool",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 3
            }
          },
          "preview": "final Pool<TrackEntry> trackEntryPool = new Pool() {",
          "children": [
            {
              "name": "new Pool() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 98,
                  "character": 0
                },
                "end": {
                  "line": 102,
                  "character": 2
                }
              },
              "preview": "final Pool<TrackEntry> trackEntryPool = new Pool()",
              "children": [
                {
                  "name": "newObject()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
                  "range": {
                    "start": {
                      "line": 99,
                      "character": 0
                    },
                    "end": {
                      "line": 101,
                      "character": 3
                    }
                  },
                  "preview": "protected Object newObject () {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "AnimationState()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public AnimationState () {",
          "documentation": "Creates an uninitialized AnimationState. The animation state data must be set before use.",
          "children": []
        },
        {
          "name": "AnimationState(AnimationStateData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 2
            }
          },
          "preview": "public AnimationState (AnimationStateData data) {",
          "children": []
        },
        {
          "name": "update(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 170,
              "character": 2
            }
          },
          "preview": "public void update (float delta) {",
          "documentation": "Increments each track entry {@link TrackEntry#getTrackTime()}, setting queued animations as current if needed.",
          "children": []
        },
        {
          "name": "updateMixingFrom(TrackEntry, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 173,
              "character": 0
            },
            "end": {
              "line": 197,
              "character": 2
            }
          },
          "preview": "private boolean updateMixingFrom (TrackEntry to, float delta) {",
          "documentation": "Returns true when all mixing from entries are complete.",
          "children": []
        },
        {
          "name": "apply(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 202,
              "character": 0
            },
            "end": {
              "line": 285,
              "character": 2
            }
          },
          "preview": "public boolean apply (Skeleton skeleton) {",
          "documentation": "Poses the skeleton using the track entry animations. The animation state is not changed, so can be applied to multiple\nskeletons to pose them identically.\n@return True if any animations were applied.",
          "children": []
        },
        {
          "name": "applyMixingFrom(TrackEntry, Skeleton, MixBlend)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 287,
              "character": 0
            },
            "end": {
              "line": 376,
              "character": 2
            }
          },
          "preview": "private float applyMixingFrom (TrackEntry to, Skeleton skeleton, MixBlend blend) {",
          "children": []
        },
        {
          "name": "applyAttachmentTimeline(AttachmentTimeline, Skeleton, float, MixBlend, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 382,
              "character": 0
            },
            "end": {
              "line": 396,
              "character": 2
            }
          },
          "preview": "private void applyAttachmentTimeline (AttachmentTimeline timeline, Skeleton skeleton, float time, MixBlend blend,",
          "documentation": "Applies the attachment timeline and sets {@link Slot#attachmentState}.\n@param attachments False when: 1) the attachment timeline is mixing out, 2) mix < attachmentThreshold, and 3) the timeline\nis not the last timeline to set the slot's attachment. In that case the timeline is applied only so subsequent\ntimelines see any deform.",
          "children": []
        },
        {
          "name": "setAttachment(Skeleton, Slot, String, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 398,
              "character": 0
            },
            "end": {
              "line": 401,
              "character": 2
            }
          },
          "preview": "private void setAttachment (Skeleton skeleton, Slot slot, String attachmentName, boolean attachments) {",
          "children": []
        },
        {
          "name": "applyRotateTimeline(RotateTimeline, Skeleton, float, float, MixBlend, float[], int, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 405,
              "character": 0
            },
            "end": {
              "line": 467,
              "character": 2
            }
          },
          "preview": "private void applyRotateTimeline (RotateTimeline timeline, Skeleton skeleton, float time, float alpha, MixBlend blend,",
          "documentation": "Applies the rotate timeline, mixing with the current pose while keeping the same rotation direction chosen as the shortest\nthe first time the mixing was applied.",
          "children": []
        },
        {
          "name": "queueEvents(TrackEntry, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 469,
              "character": 0
            },
            "end": {
              "line": 503,
              "character": 2
            }
          },
          "preview": "private void queueEvents (TrackEntry entry, float animationTime) {",
          "children": []
        },
        {
          "name": "clearTracks()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 509,
              "character": 0
            },
            "end": {
              "line": 517,
              "character": 2
            }
          },
          "preview": "public void clearTracks () {",
          "documentation": "Removes all animations from all tracks, leaving skeletons in their current pose.\n<p>\nIt may be desired to use {@link AnimationState#setEmptyAnimations(float)} to mix the skeletons back to the setup pose,\nrather than leaving them in their current pose.",
          "children": []
        },
        {
          "name": "clearTrack(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 523,
              "character": 0
            },
            "end": {
              "line": 546,
              "character": 2
            }
          },
          "preview": "public void clearTrack (int trackIndex) {",
          "documentation": "Removes all animations from the track, leaving skeletons in their current pose.\n<p>\nIt may be desired to use {@link AnimationState#setEmptyAnimation(int, float)} to mix the skeletons back to the setup pose,\nrather than leaving them in their current pose.",
          "children": []
        },
        {
          "name": "setCurrent(int, TrackEntry, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 548,
              "character": 0
            },
            "end": {
              "line": 567,
              "character": 2
            }
          },
          "preview": "private void setCurrent (int index, TrackEntry current, boolean interrupt) {",
          "children": []
        },
        {
          "name": "setAnimation(int, String, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 572,
              "character": 0
            },
            "end": {
              "line": 576,
              "character": 2
            }
          },
          "preview": "public TrackEntry setAnimation (int trackIndex, String animationName, boolean loop) {",
          "documentation": "Sets an animation by name.\n<p>\nSee {@link #setAnimation(int, Animation, boolean)}.",
          "children": []
        },
        {
          "name": "setAnimation(int, Animation, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 586,
              "character": 0
            },
            "end": {
              "line": 607,
              "character": 2
            }
          },
          "preview": "public TrackEntry setAnimation (int trackIndex, Animation animation, boolean loop) {",
          "documentation": "Sets the current animation for a track, discarding any queued animations.\n<p>\nIf the formerly current track entry is for the same animation and was never applied to a skeleton, it is replaced (not mixed\nfrom).\n@param loop If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\nduration. In either case {@link TrackEntry#getTrackEnd()} determines when the track is cleared.\n@return A track entry to allow further customization of animation playback. References to the track entry must not be kept\nafter the {@link AnimationStateListener#dispose(TrackEntry)} event occurs.",
          "children": []
        },
        {
          "name": "addAnimation(int, String, boolean, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 612,
              "character": 0
            },
            "end": {
              "line": 616,
              "character": 2
            }
          },
          "preview": "public TrackEntry addAnimation (int trackIndex, String animationName, boolean loop, float delay) {",
          "documentation": "Queues an animation by name.\n<p>\nSee {@link #addAnimation(int, Animation, boolean, float)}.",
          "children": []
        },
        {
          "name": "addAnimation(int, Animation, boolean, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 626,
              "character": 0
            },
            "end": {
              "line": 650,
              "character": 2
            }
          },
          "preview": "public TrackEntry addAnimation (int trackIndex, Animation animation, boolean loop, float delay) {",
          "documentation": "Adds an animation to be played after the current or last queued animation for a track. If the track has no entries, this is\nequivalent to calling {@link #setAnimation(int, Animation, boolean)}.\n@param delay If > 0, sets {@link TrackEntry#getDelay()}. If <= 0, the delay set is the duration of the previous track entry\nminus any mix duration (from the {@link AnimationStateData}) plus the specified <code>delay</code> (ie the mix\nends at (<code>delay</code> = 0) or before (<code>delay</code> < 0) the previous track entry duration). If the\nprevious entry is looping, its next loop completion is used instead of its duration.\n@return A track entry to allow further customization of animation playback. References to the track entry must not be kept\nafter the {@link AnimationStateListener#dispose(TrackEntry)} event occurs.",
          "children": []
        },
        {
          "name": "setEmptyAnimation(int, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 669,
              "character": 0
            },
            "end": {
              "line": 674,
              "character": 2
            }
          },
          "preview": "public TrackEntry setEmptyAnimation (int trackIndex, float mixDuration) {",
          "documentation": "Sets an empty animation for a track, discarding any queued animations, and sets the track entry's\n{@link TrackEntry#getMixDuration()}. An empty animation has no timelines and serves as a placeholder for mixing in or out.\n<p>\nMixing out is done by setting an empty animation with a mix duration using either {@link #setEmptyAnimation(int, float)},\n{@link #setEmptyAnimations(float)}, or {@link #addEmptyAnimation(int, float, float)}. Mixing to an empty animation causes\nthe previous animation to be applied less and less over the mix duration. Properties keyed in the previous animation\ntransition to the value from lower tracks or to the setup pose value if no lower tracks key the property. A mix duration of\n0 still mixes out over one frame.\n<p>\nMixing in is done by first setting an empty animation, then adding an animation using\n{@link #addAnimation(int, Animation, boolean, float)} with the desired delay (an empty animation has a duration of 0) and on\nthe returned track entry, set the {@link TrackEntry#setMixDuration(float)}. Mixing from an empty animation causes the new\nanimation to be applied more and more over the mix duration. Properties keyed in the new animation transition from the value\nfrom lower tracks or from the setup pose value if no lower tracks key the property to the value keyed in the new animation.\n<p>\nSee <a href='https://esotericsoftware.com/spine-applying-animations/#Empty-animations'>Empty animations</a> in the Spine\nRuntimes Guide.",
          "children": []
        },
        {
          "name": "addEmptyAnimation(int, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 689,
              "character": 0
            },
            "end": {
              "line": 695,
              "character": 2
            }
          },
          "preview": "public TrackEntry addEmptyAnimation (int trackIndex, float mixDuration, float delay) {",
          "documentation": "Adds an empty animation to be played after the current or last queued animation for a track, and sets the track entry's\n{@link TrackEntry#getMixDuration()}. If the track has no entries, it is equivalent to calling\n{@link #setEmptyAnimation(int, float)}.\n<p>\nSee {@link #setEmptyAnimation(int, float)} and\n<a href='https://esotericsoftware.com/spine-applying-animations/#Empty-animations'>Empty animations</a> in the Spine\nRuntimes Guide.\n@param delay If > 0, sets {@link TrackEntry#getDelay()}. If <= 0, the delay set is the duration of the previous track entry\nminus any mix duration plus the specified <code>delay</code> (ie the mix ends at (<code>delay</code> = 0) or\nbefore (<code>delay</code> < 0) the previous track entry duration). If the previous entry is looping, its next\nloop completion is used instead of its duration.\n@return A track entry to allow further customization of animation playback. References to the track entry must not be kept\nafter the {@link AnimationStateListener#dispose(TrackEntry)} event occurs.",
          "children": []
        },
        {
          "name": "setEmptyAnimations(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 701,
              "character": 0
            },
            "end": {
              "line": 711,
              "character": 2
            }
          },
          "preview": "public void setEmptyAnimations (float mixDuration) {",
          "documentation": "Sets an empty animation for every track, discarding any queued animations, and mixes to it over the specified mix duration.\n<p>\nSee <a href='https://esotericsoftware.com/spine-applying-animations/#Empty-animations'>Empty animations</a> in the Spine\nRuntimes Guide.",
          "children": []
        },
        {
          "name": "expandToIndex(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 713,
              "character": 0
            },
            "end": {
              "line": 718,
              "character": 2
            }
          },
          "preview": "private TrackEntry expandToIndex (int index) {",
          "children": []
        },
        {
          "name": "trackEntry(int, Animation, boolean, TrackEntry)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 720,
              "character": 0
            },
            "end": {
              "line": 754,
              "character": 2
            }
          },
          "preview": "private TrackEntry trackEntry (int trackIndex, Animation animation, boolean loop, @Null TrackEntry last) {",
          "children": []
        },
        {
          "name": "clearNext(TrackEntry)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 757,
              "character": 0
            },
            "end": {
              "line": 764,
              "character": 2
            }
          },
          "preview": "public void clearNext (TrackEntry entry) {",
          "documentation": "Removes the {@link TrackEntry#getNext() next entry} and all entries after it for the specified entry.",
          "children": []
        },
        {
          "name": "animationsChanged()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 766,
              "character": 0
            },
            "end": {
              "line": 783,
              "character": 2
            }
          },
          "preview": "void animationsChanged () {",
          "children": []
        },
        {
          "name": "computeHold(TrackEntry)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 785,
              "character": 0
            },
            "end": {
              "line": 822,
              "character": 2
            }
          },
          "preview": "private void computeHold (TrackEntry entry) {",
          "children": []
        },
        {
          "name": "getCurrent(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 825,
              "character": 0
            },
            "end": {
              "line": 829,
              "character": 2
            }
          },
          "preview": "public @Null TrackEntry getCurrent (int trackIndex) {",
          "documentation": "Returns the track entry for the animation currently playing on the track, or null if no animation is currently playing.",
          "children": []
        },
        {
          "name": "addListener(AnimationStateListener)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 832,
              "character": 0
            },
            "end": {
              "line": 835,
              "character": 2
            }
          },
          "preview": "public void addListener (AnimationStateListener listener) {",
          "documentation": "Adds a listener to receive events for all track entries.",
          "children": []
        },
        {
          "name": "removeListener(AnimationStateListener)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 838,
              "character": 0
            },
            "end": {
              "line": 840,
              "character": 2
            }
          },
          "preview": "public void removeListener (AnimationStateListener listener) {",
          "documentation": "Removes the listener added with {@link #addListener(AnimationStateListener)}.",
          "children": []
        },
        {
          "name": "clearListeners()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 843,
              "character": 0
            },
            "end": {
              "line": 845,
              "character": 2
            }
          },
          "preview": "public void clearListeners () {",
          "documentation": "Removes all listeners added with {@link #addListener(AnimationStateListener)}.",
          "children": []
        },
        {
          "name": "clearListenerNotifications()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 850,
              "character": 0
            },
            "end": {
              "line": 852,
              "character": 2
            }
          },
          "preview": "public void clearListenerNotifications () {",
          "documentation": "Discards all listener notifications that have not yet been delivered. This can be useful to call from an\n{@link AnimationStateListener} when it is known that further notifications that may have been already queued for delivery\nare not wanted because new animations are being set.",
          "children": []
        },
        {
          "name": "getTimeScale()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 858,
              "character": 0
            },
            "end": {
              "line": 860,
              "character": 2
            }
          },
          "preview": "public float getTimeScale () {",
          "documentation": "Multiplier for the delta time when the animation state is updated, causing time for all animations and mixes to play slower\nor faster. Defaults to 1.\n<p>\nSee TrackEntry {@link TrackEntry#getTimeScale()} for affecting a single animation.",
          "children": []
        },
        {
          "name": "setTimeScale(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 862,
              "character": 0
            },
            "end": {
              "line": 864,
              "character": 2
            }
          },
          "preview": "public void setTimeScale (float timeScale) {",
          "children": []
        },
        {
          "name": "getData()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 867,
              "character": 0
            },
            "end": {
              "line": 869,
              "character": 2
            }
          },
          "preview": "public AnimationStateData getData () {",
          "documentation": "The {@link AnimationStateData} to look up mix durations.",
          "children": []
        },
        {
          "name": "setData(AnimationStateData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 871,
              "character": 0
            },
            "end": {
              "line": 874,
              "character": 2
            }
          },
          "preview": "public void setData (AnimationStateData data) {",
          "children": []
        },
        {
          "name": "getTracks()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 877,
              "character": 0
            },
            "end": {
              "line": 879,
              "character": 2
            }
          },
          "preview": "public Array<TrackEntry> getTracks () {",
          "documentation": "The list of tracks that have had animations, which may contain null entries for tracks that currently have no animation.",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 881,
              "character": 0
            },
            "end": {
              "line": 892,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        },
        {
          "name": "TrackEntry",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 897,
              "character": 0
            },
            "end": {
              "line": 1322,
              "character": 2
            }
          },
          "preview": "static public class TrackEntry implements Poolable",
          "documentation": "Stores settings and other state for the playback of an animation on an {@link AnimationState} track.\n<p>\nReferences to a track entry must not be kept after the {@link AnimationStateListener#dispose(TrackEntry)} event occurs.",
          "supertypes": [
            {
              "name": "Poolable"
            }
          ],
          "children": [
            {
              "name": "animation",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 898,
                  "character": 0
                },
                "end": {
                  "line": 898,
                  "character": 22
                }
              },
              "preview": "Animation animation;",
              "children": []
            },
            {
              "name": "previous",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 899,
                  "character": 0
                },
                "end": {
                  "line": 899,
                  "character": 56
                }
              },
              "preview": "@Null TrackEntry previous, next, mixingFrom, mixingTo;",
              "children": []
            },
            {
              "name": "next",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 899,
                  "character": 0
                },
                "end": {
                  "line": 899,
                  "character": 56
                }
              },
              "preview": "@Null TrackEntry previous, next, mixingFrom, mixingTo;",
              "children": []
            },
            {
              "name": "mixingFrom",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 899,
                  "character": 0
                },
                "end": {
                  "line": 899,
                  "character": 56
                }
              },
              "preview": "@Null TrackEntry previous, next, mixingFrom, mixingTo;",
              "children": []
            },
            {
              "name": "mixingTo",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 899,
                  "character": 0
                },
                "end": {
                  "line": 899,
                  "character": 56
                }
              },
              "preview": "@Null TrackEntry previous, next, mixingFrom, mixingTo;",
              "children": []
            },
            {
              "name": "listener",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 900,
                  "character": 0
                },
                "end": {
                  "line": 900,
                  "character": 40
                }
              },
              "preview": "@Null AnimationStateListener listener;",
              "children": []
            },
            {
              "name": "trackIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 901,
                  "character": 0
                },
                "end": {
                  "line": 901,
                  "character": 17
                }
              },
              "preview": "int trackIndex;",
              "children": []
            },
            {
              "name": "loop",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 902,
                  "character": 0
                },
                "end": {
                  "line": 902,
                  "character": 56
                }
              },
              "preview": "boolean loop, holdPrevious, reverse, shortestRotation;",
              "children": []
            },
            {
              "name": "holdPrevious",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 902,
                  "character": 0
                },
                "end": {
                  "line": 902,
                  "character": 56
                }
              },
              "preview": "boolean loop, holdPrevious, reverse, shortestRotation;",
              "children": []
            },
            {
              "name": "reverse",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 902,
                  "character": 0
                },
                "end": {
                  "line": 902,
                  "character": 56
                }
              },
              "preview": "boolean loop, holdPrevious, reverse, shortestRotation;",
              "children": []
            },
            {
              "name": "shortestRotation",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 902,
                  "character": 0
                },
                "end": {
                  "line": 902,
                  "character": 56
                }
              },
              "preview": "boolean loop, holdPrevious, reverse, shortestRotation;",
              "children": []
            },
            {
              "name": "eventThreshold",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 903,
                  "character": 0
                },
                "end": {
                  "line": 903,
                  "character": 96
                }
              },
              "preview": "float eventThreshold, mixAttachmentThreshold, alphaAttachmentThreshold, mixDrawOrderThreshold;",
              "children": []
            },
            {
              "name": "mixAttachmentThreshold",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 903,
                  "character": 0
                },
                "end": {
                  "line": 903,
                  "character": 96
                }
              },
              "preview": "float eventThreshold, mixAttachmentThreshold, alphaAttachmentThreshold, mixDrawOrderThreshold;",
              "children": []
            },
            {
              "name": "alphaAttachmentThreshold",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 903,
                  "character": 0
                },
                "end": {
                  "line": 903,
                  "character": 96
                }
              },
              "preview": "float eventThreshold, mixAttachmentThreshold, alphaAttachmentThreshold, mixDrawOrderThreshold;",
              "children": []
            },
            {
              "name": "mixDrawOrderThreshold",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 903,
                  "character": 0
                },
                "end": {
                  "line": 903,
                  "character": 96
                }
              },
              "preview": "float eventThreshold, mixAttachmentThreshold, alphaAttachmentThreshold, mixDrawOrderThreshold;",
              "children": []
            },
            {
              "name": "animationStart",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 904,
                  "character": 0
                },
                "end": {
                  "line": 904,
                  "character": 71
                }
              },
              "preview": "float animationStart, animationEnd, animationLast, nextAnimationLast;",
              "children": []
            },
            {
              "name": "animationEnd",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 904,
                  "character": 0
                },
                "end": {
                  "line": 904,
                  "character": 71
                }
              },
              "preview": "float animationStart, animationEnd, animationLast, nextAnimationLast;",
              "children": []
            },
            {
              "name": "animationLast",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 904,
                  "character": 0
                },
                "end": {
                  "line": 904,
                  "character": 71
                }
              },
              "preview": "float animationStart, animationEnd, animationLast, nextAnimationLast;",
              "children": []
            },
            {
              "name": "nextAnimationLast",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 904,
                  "character": 0
                },
                "end": {
                  "line": 904,
                  "character": 71
                }
              },
              "preview": "float animationStart, animationEnd, animationLast, nextAnimationLast;",
              "children": []
            },
            {
              "name": "delay",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 905,
                  "character": 0
                },
                "end": {
                  "line": 905,
                  "character": 72
                }
              },
              "preview": "float delay, trackTime, trackLast, nextTrackLast, trackEnd, timeScale;",
              "children": []
            },
            {
              "name": "trackTime",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 905,
                  "character": 0
                },
                "end": {
                  "line": 905,
                  "character": 72
                }
              },
              "preview": "float delay, trackTime, trackLast, nextTrackLast, trackEnd, timeScale;",
              "children": []
            },
            {
              "name": "trackLast",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 905,
                  "character": 0
                },
                "end": {
                  "line": 905,
                  "character": 72
                }
              },
              "preview": "float delay, trackTime, trackLast, nextTrackLast, trackEnd, timeScale;",
              "children": []
            },
            {
              "name": "nextTrackLast",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 905,
                  "character": 0
                },
                "end": {
                  "line": 905,
                  "character": 72
                }
              },
              "preview": "float delay, trackTime, trackLast, nextTrackLast, trackEnd, timeScale;",
              "children": []
            },
            {
              "name": "trackEnd",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 905,
                  "character": 0
                },
                "end": {
                  "line": 905,
                  "character": 72
                }
              },
              "preview": "float delay, trackTime, trackLast, nextTrackLast, trackEnd, timeScale;",
              "children": []
            },
            {
              "name": "timeScale",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 905,
                  "character": 0
                },
                "end": {
                  "line": 905,
                  "character": 72
                }
              },
              "preview": "float delay, trackTime, trackLast, nextTrackLast, trackEnd, timeScale;",
              "children": []
            },
            {
              "name": "alpha",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 906,
                  "character": 0
                },
                "end": {
                  "line": 906,
                  "character": 64
                }
              },
              "preview": "float alpha, mixTime, mixDuration, interruptAlpha, totalAlpha;",
              "children": []
            },
            {
              "name": "mixTime",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 906,
                  "character": 0
                },
                "end": {
                  "line": 906,
                  "character": 64
                }
              },
              "preview": "float alpha, mixTime, mixDuration, interruptAlpha, totalAlpha;",
              "children": []
            },
            {
              "name": "mixDuration",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 906,
                  "character": 0
                },
                "end": {
                  "line": 906,
                  "character": 64
                }
              },
              "preview": "float alpha, mixTime, mixDuration, interruptAlpha, totalAlpha;",
              "children": []
            },
            {
              "name": "interruptAlpha",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 906,
                  "character": 0
                },
                "end": {
                  "line": 906,
                  "character": 64
                }
              },
              "preview": "float alpha, mixTime, mixDuration, interruptAlpha, totalAlpha;",
              "children": []
            },
            {
              "name": "totalAlpha",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 906,
                  "character": 0
                },
                "end": {
                  "line": 906,
                  "character": 64
                }
              },
              "preview": "float alpha, mixTime, mixDuration, interruptAlpha, totalAlpha;",
              "children": []
            },
            {
              "name": "mixBlend",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 907,
                  "character": 0
                },
                "end": {
                  "line": 907,
                  "character": 39
                }
              },
              "preview": "MixBlend mixBlend = MixBlend.replace;",
              "children": []
            },
            {
              "name": "timelineMode",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 909,
                  "character": 0
                },
                "end": {
                  "line": 909,
                  "character": 47
                }
              },
              "preview": "final IntArray timelineMode = new IntArray();",
              "children": []
            },
            {
              "name": "timelineHoldMix",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 910,
                  "character": 0
                },
                "end": {
                  "line": 910,
                  "character": 82
                }
              },
              "preview": "final Array<TrackEntry> timelineHoldMix = new Array(true, 8, TrackEntry[]::new);",
              "children": []
            },
            {
              "name": "timelinesRotation",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 911,
                  "character": 0
                },
                "end": {
                  "line": 911,
                  "character": 56
                }
              },
              "preview": "final FloatArray timelinesRotation = new FloatArray();",
              "children": []
            },
            {
              "name": "reset()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 913,
                  "character": 0
                },
                "end": {
                  "line": 923,
                  "character": 3
                }
              },
              "preview": "public void reset () {",
              "children": []
            },
            {
              "name": "getTrackIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 928,
                  "character": 0
                },
                "end": {
                  "line": 930,
                  "character": 3
                }
              },
              "preview": "public int getTrackIndex () {",
              "documentation": "The index of the track where this track entry is either current or queued.\n<p>\nSee {@link AnimationState#getCurrent(int)}.",
              "children": []
            },
            {
              "name": "getAnimation()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 933,
                  "character": 0
                },
                "end": {
                  "line": 935,
                  "character": 3
                }
              },
              "preview": "public Animation getAnimation () {",
              "documentation": "The animation to apply for this track entry.",
              "children": []
            },
            {
              "name": "setAnimation(Animation)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 937,
                  "character": 0
                },
                "end": {
                  "line": 940,
                  "character": 3
                }
              },
              "preview": "public void setAnimation (Animation animation) {",
              "children": []
            },
            {
              "name": "getLoop()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 944,
                  "character": 0
                },
                "end": {
                  "line": 946,
                  "character": 3
                }
              },
              "preview": "public boolean getLoop () {",
              "documentation": "If true, the animation will repeat. If false it will not, instead its last frame is applied if played beyond its\nduration.",
              "children": []
            },
            {
              "name": "setLoop(boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 948,
                  "character": 0
                },
                "end": {
                  "line": 950,
                  "character": 3
                }
              },
              "preview": "public void setLoop (boolean loop) {",
              "children": []
            },
            {
              "name": "getDelay()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 963,
                  "character": 0
                },
                "end": {
                  "line": 965,
                  "character": 3
                }
              },
              "preview": "public float getDelay () {",
              "documentation": "Seconds to postpone playing the animation. Must be >= 0. When this track entry is the current track entry,\n<code>delay</code> postpones incrementing the {@link #getTrackTime()}. When this track entry is queued,\n<code>delay</code> is the time from the start of the previous animation to when this track entry will become the current\ntrack entry (ie when the previous track entry {@link TrackEntry#getTrackTime()} >= this track entry's\n<code>delay</code>).\n<p>\n{@link #getTimeScale()} affects the delay.\n<p>\nWhen passing <code>delay</code> <= 0 to {@link AnimationState#addAnimation(int, Animation, boolean, float)} this\n<code>delay</code> is set using a mix duration from {@link AnimationStateData}. To change the {@link #getMixDuration()}\nafterward, use {@link #setMixDuration(float, float)} so this <code>delay</code> is adjusted.",
              "children": []
            },
            {
              "name": "setDelay(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 967,
                  "character": 0
                },
                "end": {
                  "line": 970,
                  "character": 3
                }
              },
              "preview": "public void setDelay (float delay) {",
              "children": []
            },
            {
              "name": "getTrackTime()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 975,
                  "character": 0
                },
                "end": {
                  "line": 977,
                  "character": 3
                }
              },
              "preview": "public float getTrackTime () {",
              "documentation": "Current time in seconds this track entry has been the current track entry. The track time determines\n{@link #getAnimationTime()}. The track time can be set to start the animation at a time other than 0, without affecting\nlooping.",
              "children": []
            },
            {
              "name": "setTrackTime(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 979,
                  "character": 0
                },
                "end": {
                  "line": 981,
                  "character": 3
                }
              },
              "preview": "public void setTrackTime (float trackTime) {",
              "children": []
            },
            {
              "name": "getTrackEnd()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 990,
                  "character": 0
                },
                "end": {
                  "line": 992,
                  "character": 3
                }
              },
              "preview": "public float getTrackEnd () {",
              "documentation": "The track time in seconds when this animation will be removed from the track. Defaults to the highest possible float\nvalue, meaning the animation will be applied until a new animation is set or the track is cleared. If the track end time\nis reached, no other animations are queued for playback, and mixing from any previous animations is complete, then the\nproperties keyed by the animation are set to the setup pose and the track is cleared.\n<p>\nIt may be desired to use {@link AnimationState#addEmptyAnimation(int, float, float)} rather than have the animation\nabruptly cease being applied.",
              "children": []
            },
            {
              "name": "setTrackEnd(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 994,
                  "character": 0
                },
                "end": {
                  "line": 996,
                  "character": 3
                }
              },
              "preview": "public void setTrackEnd (float trackEnd) {",
              "children": []
            },
            {
              "name": "getTrackComplete()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1001,
                  "character": 0
                },
                "end": {
                  "line": 1008,
                  "character": 3
                }
              },
              "preview": "public float getTrackComplete () {",
              "documentation": "If this track entry is non-looping, the track time in seconds when {@link #getAnimationEnd()} is reached, or the current\n{@link #getTrackTime()} if it has already been reached. If this track entry is looping, the track time when this\nanimation will reach its next {@link #getAnimationEnd()} (the next loop completion).",
              "children": []
            },
            {
              "name": "getAnimationStart()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1014,
                  "character": 0
                },
                "end": {
                  "line": 1016,
                  "character": 3
                }
              },
              "preview": "public float getAnimationStart () {",
              "documentation": "Seconds when this animation starts, both initially and after looping. Defaults to 0.\n<p>\nWhen changing the <code>animationStart</code> time, it often makes sense to set {@link #getAnimationLast()} to the same\nvalue to prevent timeline keys before the start time from triggering.",
              "children": []
            },
            {
              "name": "setAnimationStart(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1018,
                  "character": 0
                },
                "end": {
                  "line": 1020,
                  "character": 3
                }
              },
              "preview": "public void setAnimationStart (float animationStart) {",
              "children": []
            },
            {
              "name": "getAnimationEnd()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1024,
                  "character": 0
                },
                "end": {
                  "line": 1026,
                  "character": 3
                }
              },
              "preview": "public float getAnimationEnd () {",
              "documentation": "Seconds for the last frame of this animation. Non-looping animations won't play past this time. Looping animations will\nloop back to {@link #getAnimationStart()} at this time. Defaults to the animation {@link Animation#duration}.",
              "children": []
            },
            {
              "name": "setAnimationEnd(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1028,
                  "character": 0
                },
                "end": {
                  "line": 1030,
                  "character": 3
                }
              },
              "preview": "public void setAnimationEnd (float animationEnd) {",
              "children": []
            },
            {
              "name": "getAnimationLast()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1036,
                  "character": 0
                },
                "end": {
                  "line": 1038,
                  "character": 3
                }
              },
              "preview": "public float getAnimationLast () {",
              "documentation": "The time in seconds this animation was last applied. Some timelines use this for one-time triggers. Eg, when this\nanimation is applied, event timelines will fire all events between the <code>animationLast</code> time (exclusive) and\n<code>animationTime</code> (inclusive). Defaults to -1 to ensure triggers on frame 0 happen the first time this animation\nis applied.",
              "children": []
            },
            {
              "name": "setAnimationLast(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1040,
                  "character": 0
                },
                "end": {
                  "line": 1043,
                  "character": 3
                }
              },
              "preview": "public void setAnimationLast (float animationLast) {",
              "children": []
            },
            {
              "name": "getAnimationTime()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1051,
                  "character": 0
                },
                "end": {
                  "line": 1059,
                  "character": 3
                }
              },
              "preview": "public float getAnimationTime () {",
              "documentation": "Uses {@link #getTrackTime()} to compute the <code>animationTime</code>. When the <code>trackTime</code> is 0, the\n<code>animationTime</code> is equal to the <code>animationStart</code> time.\n<p>\nThe <code>animationTime</code> is between {@link #getAnimationStart()} and {@link #getAnimationEnd()}, except if this\ntrack entry is non-looping and {@link #getAnimationEnd()} is >= to the animation {@link Animation#duration}, then\n<code>animationTime</code> continues to increase past {@link #getAnimationEnd()}.",
              "children": []
            },
            {
              "name": "getTimeScale()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1074,
                  "character": 0
                },
                "end": {
                  "line": 1076,
                  "character": 3
                }
              },
              "preview": "public float getTimeScale () {",
              "documentation": "Multiplier for the delta time when this track entry is updated, causing time for this animation to pass slower or\nfaster. Defaults to 1.\n<p>\nValues < 0 are not supported. To play an animation in reverse, use {@link #getReverse()}.\n<p>\n{@link #getMixTime()} is not affected by track entry time scale, so {@link #getMixDuration()} may need to be adjusted to\nmatch the animation speed.\n<p>\nWhen using {@link AnimationState#addAnimation(int, Animation, boolean, float)} with a <code>delay</code> <= 0, the\n{@link #getDelay()} is set using the mix duration from the {@link AnimationStateData}, assuming time scale to be 1. If\nthe time scale is not 1, the delay may need to be adjusted.\n<p>\nSee AnimationState {@link AnimationState#getTimeScale()} for affecting all animations.",
              "children": []
            },
            {
              "name": "setTimeScale(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1078,
                  "character": 0
                },
                "end": {
                  "line": 1080,
                  "character": 3
                }
              },
              "preview": "public void setTimeScale (float timeScale) {",
              "children": []
            },
            {
              "name": "getListener()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1086,
                  "character": 0
                },
                "end": {
                  "line": 1088,
                  "character": 3
                }
              },
              "preview": "public @Null AnimationStateListener getListener () {",
              "documentation": "The listener for events generated by this track entry, or null.\n<p>\nA track entry returned from {@link AnimationState#setAnimation(int, Animation, boolean)} is already the current animation\nfor the track, so the track entry listener {@link AnimationStateListener#start(TrackEntry)} will not be called.",
              "children": []
            },
            {
              "name": "setListener(AnimationStateListener)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1090,
                  "character": 0
                },
                "end": {
                  "line": 1092,
                  "character": 3
                }
              },
              "preview": "public void setListener (@Null AnimationStateListener listener) {",
              "children": []
            },
            {
              "name": "getAlpha()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1099,
                  "character": 0
                },
                "end": {
                  "line": 1101,
                  "character": 3
                }
              },
              "preview": "public float getAlpha () {",
              "documentation": "Values < 1 mix this animation with the skeleton's current pose (usually the pose resulting from lower tracks). Defaults\nto 1, which overwrites the skeleton's current pose with this animation.\n<p>\nTypically track 0 is used to completely pose the skeleton, then alpha is used on higher tracks. It doesn't make sense to\nuse alpha on track 0 if the skeleton pose is from the last frame render.",
              "children": []
            },
            {
              "name": "setAlpha(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1103,
                  "character": 0
                },
                "end": {
                  "line": 1105,
                  "character": 3
                }
              },
              "preview": "public void setAlpha (float alpha) {",
              "children": []
            },
            {
              "name": "getEventThreshold()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1110,
                  "character": 0
                },
                "end": {
                  "line": 1112,
                  "character": 3
                }
              },
              "preview": "public float getEventThreshold () {",
              "documentation": "When the mix percentage ({@link #getMixTime()} / {@link #getMixDuration()}) is less than the\n<code>eventThreshold</code>, event timelines are applied while this animation is being mixed out. Defaults to 0, so event\ntimelines are not applied while this animation is being mixed out.",
              "children": []
            },
            {
              "name": "setEventThreshold(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1114,
                  "character": 0
                },
                "end": {
                  "line": 1116,
                  "character": 3
                }
              },
              "preview": "public void setEventThreshold (float eventThreshold) {",
              "children": []
            },
            {
              "name": "getAlphaAttachmentThreshold()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1120,
                  "character": 0
                },
                "end": {
                  "line": 1122,
                  "character": 3
                }
              },
              "preview": "public float getAlphaAttachmentThreshold () {",
              "documentation": "When {@link #getAlpha()} is greater than <code>alphaAttachmentThreshold</code>, attachment timelines are applied.\nDefaults to 0, so attachment timelines are always applied.",
              "children": []
            },
            {
              "name": "setAlphaAttachmentThreshold(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1124,
                  "character": 0
                },
                "end": {
                  "line": 1126,
                  "character": 3
                }
              },
              "preview": "public void setAlphaAttachmentThreshold (float alphaAttachmentThreshold) {",
              "children": []
            },
            {
              "name": "getMixAttachmentThreshold()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1131,
                  "character": 0
                },
                "end": {
                  "line": 1133,
                  "character": 3
                }
              },
              "preview": "public float getMixAttachmentThreshold () {",
              "documentation": "When the mix percentage ({@link #getMixTime()} / {@link #getMixDuration()}) is less than the\n<code>mixAttachmentThreshold</code>, attachment timelines are applied while this animation is being mixed out. Defaults\nto 0, so attachment timelines are not applied while this animation is being mixed out.",
              "children": []
            },
            {
              "name": "setMixAttachmentThreshold(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1135,
                  "character": 0
                },
                "end": {
                  "line": 1137,
                  "character": 3
                }
              },
              "preview": "public void setMixAttachmentThreshold (float mixAttachmentThreshold) {",
              "children": []
            },
            {
              "name": "getMixDrawOrderThreshold()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1142,
                  "character": 0
                },
                "end": {
                  "line": 1144,
                  "character": 3
                }
              },
              "preview": "public float getMixDrawOrderThreshold () {",
              "documentation": "When the mix percentage ({@link #getMixTime()} / {@link #getMixDuration()}) is less than the\n<code>mixDrawOrderThreshold</code>, draw order timelines are applied while this animation is being mixed out. Defaults to\n0, so draw order timelines are not applied while this animation is being mixed out.",
              "children": []
            },
            {
              "name": "setMixDrawOrderThreshold(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1146,
                  "character": 0
                },
                "end": {
                  "line": 1148,
                  "character": 3
                }
              },
              "preview": "public void setMixDrawOrderThreshold (float mixDrawOrderThreshold) {",
              "children": []
            },
            {
              "name": "getNext()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1154,
                  "character": 0
                },
                "end": {
                  "line": 1156,
                  "character": 3
                }
              },
              "preview": "public @Null TrackEntry getNext () {",
              "documentation": "The animation queued to start after this animation, or null if there is none. <code>next</code> makes up a doubly linked\nlist.\n<p>\nSee {@link AnimationState#clearNext(TrackEntry)} to truncate the list.",
              "children": []
            },
            {
              "name": "getPrevious()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1159,
                  "character": 0
                },
                "end": {
                  "line": 1161,
                  "character": 3
                }
              },
              "preview": "public @Null TrackEntry getPrevious () {",
              "documentation": "The animation queued to play before this animation, or null. <code>previous</code> makes up a doubly linked list.",
              "children": []
            },
            {
              "name": "wasApplied()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1166,
                  "character": 0
                },
                "end": {
                  "line": 1168,
                  "character": 3
                }
              },
              "preview": "public boolean wasApplied () {",
              "documentation": "Returns true if this track entry has been applied at least once.\n<p>\nSee {@link AnimationState#apply(Skeleton)}.",
              "children": []
            },
            {
              "name": "isNextReady()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1172,
                  "character": 0
                },
                "end": {
                  "line": 1174,
                  "character": 3
                }
              },
              "preview": "public boolean isNextReady () {",
              "documentation": "Returns true if there is a {@link #getNext()} track entry and it will become the current track entry during the next\n{@link AnimationState#update(float)}.",
              "children": []
            },
            {
              "name": "isComplete()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1179,
                  "character": 0
                },
                "end": {
                  "line": 1181,
                  "character": 3
                }
              },
              "preview": "public boolean isComplete () {",
              "documentation": "Returns true if at least one loop has been completed.\n<p>\nSee {@link AnimationStateListener#complete(TrackEntry)}.",
              "children": []
            },
            {
              "name": "getMixTime()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1185,
                  "character": 0
                },
                "end": {
                  "line": 1187,
                  "character": 3
                }
              },
              "preview": "public float getMixTime () {",
              "documentation": "Seconds from 0 to the {@link #getMixDuration()} when mixing from the previous animation to this animation. May be\nslightly more than <code>mixDuration</code> when the mix is complete.",
              "children": []
            },
            {
              "name": "setMixTime(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1189,
                  "character": 0
                },
                "end": {
                  "line": 1191,
                  "character": 3
                }
              },
              "preview": "public void setMixTime (float mixTime) {",
              "children": []
            },
            {
              "name": "getMixDuration()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1210,
                  "character": 0
                },
                "end": {
                  "line": 1212,
                  "character": 3
                }
              },
              "preview": "public float getMixDuration () {",
              "documentation": "Seconds for mixing from the previous animation to this animation. Defaults to the value provided by AnimationStateData\n{@link AnimationStateData#getMix(Animation, Animation)} based on the animation before this animation (if any).\n<p>\nA mix duration of 0 still mixes out over one frame to provide the track entry being mixed out a chance to revert the\nproperties it was animating. A mix duration of 0 can be set at any time to end the mix on the next\n{@link AnimationState#update(float) update}.\n<p>\nThe <code>mixDuration</code> can be set manually rather than use the value from\n{@link AnimationStateData#getMix(Animation, Animation)}. In that case, the <code>mixDuration</code> can be set for a new\ntrack entry only before {@link AnimationState#update(float)} is next called.\n<p>\nWhen using {@link AnimationState#addAnimation(int, Animation, boolean, float)} with a <code>delay</code> <= 0, the\n{@link #getDelay()} is set using the mix duration from the {@link AnimationStateData}. If <code>mixDuration</code> is set\nafterward, the delay may need to be adjusted. For example:<br>\n<code>entry.delay = entry.previous.getTrackComplete() - entry.mixDuration;</code><br>\nAlternatively, {@link #setMixDuration(float, float)} can be used to recompute the delay:<br>\n<code>entry.setMixDuration(0.25f, 0);</code>",
              "children": []
            },
            {
              "name": "setMixDuration(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1214,
                  "character": 0
                },
                "end": {
                  "line": 1216,
                  "character": 3
                }
              },
              "preview": "public void setMixDuration (float mixDuration) {",
              "children": []
            },
            {
              "name": "setMixDuration(float, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1223,
                  "character": 0
                },
                "end": {
                  "line": 1232,
                  "character": 3
                }
              },
              "preview": "public void setMixDuration (float mixDuration, float delay) {",
              "documentation": "Sets both {@link #getMixDuration()} and {@link #getDelay()}.\n@param delay If > 0, sets {@link TrackEntry#getDelay()}. If <= 0, the delay set is the duration of the previous track\nentry minus the specified mix duration plus the specified <code>delay</code> (ie the mix ends at\n(<code>delay</code> = 0) or before (<code>delay</code> < 0) the previous track entry duration). If the previous\nentry is looping, its next loop completion is used instead of its duration.",
              "children": []
            },
            {
              "name": "getMixBlend()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1240,
                  "character": 0
                },
                "end": {
                  "line": 1242,
                  "character": 3
                }
              },
              "preview": "public MixBlend getMixBlend () {",
              "documentation": "Controls how properties keyed in the animation are mixed with lower tracks. Defaults to {@link MixBlend#replace}.\n<p>\nTrack entries on track 0 ignore this setting and always use {@link MixBlend#first}.\n<p>\nThe <code>mixBlend</code> can be set for a new track entry only before {@link AnimationState#apply(Skeleton)} is next\ncalled.",
              "children": []
            },
            {
              "name": "setMixBlend(MixBlend)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1244,
                  "character": 0
                },
                "end": {
                  "line": 1247,
                  "character": 3
                }
              },
              "preview": "public void setMixBlend (MixBlend mixBlend) {",
              "children": []
            },
            {
              "name": "getMixingFrom()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1251,
                  "character": 0
                },
                "end": {
                  "line": 1253,
                  "character": 3
                }
              },
              "preview": "public @Null TrackEntry getMixingFrom () {",
              "documentation": "The track entry for the previous animation when mixing from the previous animation to this animation, or null if no\nmixing is currently occurring. When mixing from multiple animations, <code>mixingFrom</code> makes up a linked list.",
              "children": []
            },
            {
              "name": "getMixingTo()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1257,
                  "character": 0
                },
                "end": {
                  "line": 1259,
                  "character": 3
                }
              },
              "preview": "public @Null TrackEntry getMixingTo () {",
              "documentation": "The track entry for the next animation when mixing from this animation to the next animation, or null if no mixing is\ncurrently occurring. When mixing to multiple animations, <code>mixingTo</code> makes up a linked list.",
              "children": []
            },
            {
              "name": "setHoldPrevious(boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1261,
                  "character": 0
                },
                "end": {
                  "line": 1263,
                  "character": 3
                }
              },
              "preview": "public void setHoldPrevious (boolean holdPrevious) {",
              "children": []
            },
            {
              "name": "getHoldPrevious()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1276,
                  "character": 0
                },
                "end": {
                  "line": 1278,
                  "character": 3
                }
              },
              "preview": "public boolean getHoldPrevious () {",
              "documentation": "If true, when mixing from the previous animation to this animation, the previous animation is applied as normal instead\nof being mixed out.\n<p>\nWhen mixing between animations that key the same property, if a lower track also keys that property then the value will\nbriefly dip toward the lower track value during the mix. This happens because the first animation mixes from 100% to 0%\nwhile the second animation mixes from 0% to 100%. Setting <code>holdPrevious</code> to true applies the first animation\nat 100% during the mix so the lower track value is overwritten. Such dipping does not occur on the lowest track which\nkeys the property, only when a higher track also keys the property.\n<p>\nSnapping will occur if <code>holdPrevious</code> is true and this animation does not key all the same properties as the\nprevious animation.",
              "children": []
            },
            {
              "name": "setShortestRotation(boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1280,
                  "character": 0
                },
                "end": {
                  "line": 1282,
                  "character": 3
                }
              },
              "preview": "public void setShortestRotation (boolean shortestRotation) {",
              "children": []
            },
            {
              "name": "getShortestRotation()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1289,
                  "character": 0
                },
                "end": {
                  "line": 1291,
                  "character": 3
                }
              },
              "preview": "public boolean getShortestRotation () {",
              "documentation": "If true, mixing rotation between tracks always uses the shortest rotation direction. If the rotation is animated, the\nshortest rotation direction may change during the mix.\n<p>\nIf false, the shortest rotation direction is remembered when the mix starts and the same direction is used for the rest\nof the mix. Defaults to false.",
              "children": []
            },
            {
              "name": "resetRotationDirections()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1300,
                  "character": 0
                },
                "end": {
                  "line": 1302,
                  "character": 3
                }
              },
              "preview": "public void resetRotationDirections () {",
              "documentation": "Resets the rotation directions for mixing this entry's rotate timelines. This can be useful to avoid bones rotating the\nlong way around when using {@link #getAlpha()} and starting animations on other tracks.\n<p>\nMixing with {@link MixBlend#replace} involves finding a rotation between two others, which has two possible solutions:\nthe short way or the long way around. The two rotations likely change over time, so which direction is the short or long\nway also changes. If the short way was always chosen, bones would flip to the other side when that direction became the\nlong way. TrackEntry chooses the short way the first time it is applied and remembers that direction.",
              "children": []
            },
            {
              "name": "setReverse(boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1304,
                  "character": 0
                },
                "end": {
                  "line": 1306,
                  "character": 3
                }
              },
              "preview": "public void setReverse (boolean reverse) {",
              "children": []
            },
            {
              "name": "getReverse()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1309,
                  "character": 0
                },
                "end": {
                  "line": 1311,
                  "character": 3
                }
              },
              "preview": "public boolean getReverse () {",
              "documentation": "If true, the animation will be applied in reverse. Events are not fired when an animation is applied in reverse.",
              "children": []
            },
            {
              "name": "isEmptyAnimation()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1315,
                  "character": 0
                },
                "end": {
                  "line": 1317,
                  "character": 3
                }
              },
              "preview": "public boolean isEmptyAnimation () {",
              "documentation": "Returns true if this entry is for the empty animation. See {@link AnimationState#setEmptyAnimation(int, float)},\n{@link AnimationState#addEmptyAnimation(int, float, float)}, and {@link AnimationState#setEmptyAnimations(float)}.",
              "children": []
            },
            {
              "name": "toString()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1319,
                  "character": 0
                },
                "end": {
                  "line": 1321,
                  "character": 3
                }
              },
              "preview": "public String toString () {",
              "children": []
            }
          ]
        },
        {
          "name": "EventQueue",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 1324,
              "character": 0
            },
            "end": {
              "line": 1416,
              "character": 2
            }
          },
          "preview": "class EventQueue",
          "children": [
            {
              "name": "objects",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1325,
                  "character": 0
                },
                "end": {
                  "line": 1325,
                  "character": 44
                }
              },
              "preview": "private final Array objects = new Array();",
              "children": []
            },
            {
              "name": "drainDisabled",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1326,
                  "character": 0
                },
                "end": {
                  "line": 1326,
                  "character": 24
                }
              },
              "preview": "boolean drainDisabled;",
              "children": []
            },
            {
              "name": "start(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1328,
                  "character": 0
                },
                "end": {
                  "line": 1332,
                  "character": 3
                }
              },
              "preview": "void start (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "interrupt(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1334,
                  "character": 0
                },
                "end": {
                  "line": 1337,
                  "character": 3
                }
              },
              "preview": "void interrupt (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "end(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1339,
                  "character": 0
                },
                "end": {
                  "line": 1343,
                  "character": 3
                }
              },
              "preview": "void end (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "dispose(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1345,
                  "character": 0
                },
                "end": {
                  "line": 1348,
                  "character": 3
                }
              },
              "preview": "void dispose (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "complete(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1350,
                  "character": 0
                },
                "end": {
                  "line": 1353,
                  "character": 3
                }
              },
              "preview": "void complete (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "event(TrackEntry, Event)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1355,
                  "character": 0
                },
                "end": {
                  "line": 1359,
                  "character": 3
                }
              },
              "preview": "void event (TrackEntry entry, Event event) {",
              "children": []
            },
            {
              "name": "drain()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1361,
                  "character": 0
                },
                "end": {
                  "line": 1411,
                  "character": 3
                }
              },
              "preview": "void drain () {",
              "children": []
            },
            {
              "name": "clear()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1413,
                  "character": 0
                },
                "end": {
                  "line": 1415,
                  "character": 3
                }
              },
              "preview": "void clear () {",
              "children": []
            }
          ]
        },
        {
          "name": "EventType",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 1418,
              "character": 0
            },
            "end": {
              "line": 1420,
              "character": 2
            }
          },
          "preview": "static private enum EventType",
          "children": [
            {
              "name": "start",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1419,
                  "character": 0
                },
                "end": {
                  "line": 1419,
                  "character": 7
                }
              },
              "preview": "start, interrupt, end, dispose, complete, event",
              "children": []
            },
            {
              "name": "interrupt",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1419,
                  "character": 0
                },
                "end": {
                  "line": 1419,
                  "character": 18
                }
              },
              "preview": "start, interrupt, end, dispose, complete, event",
              "children": []
            },
            {
              "name": "end",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1419,
                  "character": 0
                },
                "end": {
                  "line": 1419,
                  "character": 23
                }
              },
              "preview": "start, interrupt, end, dispose, complete, event",
              "children": []
            },
            {
              "name": "dispose",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1419,
                  "character": 0
                },
                "end": {
                  "line": 1419,
                  "character": 32
                }
              },
              "preview": "start, interrupt, end, dispose, complete, event",
              "children": []
            },
            {
              "name": "complete",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1419,
                  "character": 0
                },
                "end": {
                  "line": 1419,
                  "character": 42
                }
              },
              "preview": "start, interrupt, end, dispose, complete, event",
              "children": []
            },
            {
              "name": "event",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1419,
                  "character": 0
                },
                "end": {
                  "line": 1419,
                  "character": 49
                }
              },
              "preview": "start, interrupt, end, dispose, complete, event",
              "children": []
            }
          ]
        },
        {
          "name": "AnimationStateListener",
          "kind": "interface",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 1430,
              "character": 0
            },
            "end": {
              "line": 1466,
              "character": 2
            }
          },
          "preview": "static public interface AnimationStateListener",
          "documentation": "The interface to implement for receiving TrackEntry events. It is always safe to call AnimationState methods when receiving\nevents.\n<p>\nTrackEntry events are collected during {@link AnimationState#update(float)} and {@link AnimationState#apply(Skeleton)} and\nfired only after those methods are finished.\n<p>\nSee TrackEntry {@link TrackEntry#setListener(AnimationStateListener)} and AnimationState\n{@link AnimationState#addListener(AnimationStateListener)}.",
          "children": [
            {
              "name": "start(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1436,
                  "character": 0
                },
                "end": {
                  "line": 1436,
                  "character": 39
                }
              },
              "preview": "public void start (TrackEntry entry);",
              "documentation": "Invoked when this entry has been set as the current entry. {@link #end(TrackEntry)} will occur when this entry will no\nlonger be applied.\n<p>\nWhen this event is triggered by calling {@link AnimationState#setAnimation(int, Animation, boolean)}, take care not to\ncall {@link AnimationState#update(float)} until after the TrackEntry has been configured.",
              "children": []
            },
            {
              "name": "interrupt(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1440,
                  "character": 0
                },
                "end": {
                  "line": 1440,
                  "character": 43
                }
              },
              "preview": "public void interrupt (TrackEntry entry);",
              "documentation": "Invoked when another entry has replaced this entry as the current entry. This entry may continue being applied for\nmixing.",
              "children": []
            },
            {
              "name": "end(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1444,
                  "character": 0
                },
                "end": {
                  "line": 1444,
                  "character": 37
                }
              },
              "preview": "public void end (TrackEntry entry);",
              "documentation": "Invoked when this entry will never be applied again. This only occurs if this entry has previously been set as the\ncurrent entry ({@link #start(TrackEntry)} was invoked).",
              "children": []
            },
            {
              "name": "dispose(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1449,
                  "character": 0
                },
                "end": {
                  "line": 1449,
                  "character": 41
                }
              },
              "preview": "public void dispose (TrackEntry entry);",
              "documentation": "Invoked when this entry will be disposed. This may occur without the entry ever being set as the current entry.\n<p>\nReferences to the entry should not be kept after <code>dispose</code> is called, as it may be destroyed or reused.",
              "children": []
            },
            {
              "name": "complete(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1458,
                  "character": 0
                },
                "end": {
                  "line": 1458,
                  "character": 42
                }
              },
              "preview": "public void complete (TrackEntry entry);",
              "documentation": "Invoked every time this entry's animation completes a loop. This may occur during mixing (after\n{@link #interrupt(TrackEntry)}).\n<p>\nIf this entry's {@link TrackEntry#getMixingTo()} is not null, this entry is mixing out (it is not the current entry).\n<p>\nBecause this event is triggered at the end of {@link AnimationState#apply(Skeleton)}, any animations set in response to\nthe event won't be applied until the next time the AnimationState is applied.",
              "children": []
            },
            {
              "name": "event(TrackEntry, Event)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1465,
                  "character": 0
                },
                "end": {
                  "line": 1465,
                  "character": 52
                }
              },
              "preview": "public void event (TrackEntry entry, Event event);",
              "documentation": "Invoked when this entry's animation triggers an event. This may occur during mixing (after\n{@link #interrupt(TrackEntry)}), see {@link TrackEntry#eventThreshold}.\n<p>\nBecause this event is triggered at the end of {@link AnimationState#apply(Skeleton)}, any animations set in response to\nthe event won't be applied until the next time the AnimationState is applied.",
              "children": []
            }
          ]
        },
        {
          "name": "AnimationStateAdapter",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
          "range": {
            "start": {
              "line": 1468,
              "character": 0
            },
            "end": {
              "line": 1486,
              "character": 2
            }
          },
          "preview": "static abstract public class AnimationStateAdapter implements AnimationStateListener",
          "supertypes": [
            {
              "name": "AnimationStateListener"
            }
          ],
          "children": [
            {
              "name": "start(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1469,
                  "character": 0
                },
                "end": {
                  "line": 1470,
                  "character": 3
                }
              },
              "preview": "public void start (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "interrupt(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1472,
                  "character": 0
                },
                "end": {
                  "line": 1473,
                  "character": 3
                }
              },
              "preview": "public void interrupt (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "end(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1475,
                  "character": 0
                },
                "end": {
                  "line": 1476,
                  "character": 3
                }
              },
              "preview": "public void end (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "dispose(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1478,
                  "character": 0
                },
                "end": {
                  "line": 1479,
                  "character": 3
                }
              },
              "preview": "public void dispose (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "complete(TrackEntry)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1481,
                  "character": 0
                },
                "end": {
                  "line": 1482,
                  "character": 3
                }
              },
              "preview": "public void complete (TrackEntry entry) {",
              "children": []
            },
            {
              "name": "event(TrackEntry, Event)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationState.java",
              "range": {
                "start": {
                  "line": 1484,
                  "character": 0
                },
                "end": {
                  "line": 1485,
                  "character": 3
                }
              },
              "preview": "public void event (TrackEntry entry, Event event) {",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "AnimationStateData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 118,
          "character": 1
        }
      },
      "preview": "public class AnimationStateData",
      "documentation": "Stores mix (crossfade) durations to be applied when {@link AnimationState} animations are changed.",
      "children": [
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 33
            }
          },
          "preview": "final SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "animationToMixTime",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 77
            }
          },
          "preview": "final ObjectFloatMap<Key> animationToMixTime = new ObjectFloatMap(51, 0.8f);",
          "children": []
        },
        {
          "name": "tempKey",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 31
            }
          },
          "preview": "final Key tempKey = new Key();",
          "children": []
        },
        {
          "name": "defaultMix",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 18
            }
          },
          "preview": "float defaultMix;",
          "children": []
        },
        {
          "name": "AnimationStateData(SkeletonData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 2
            }
          },
          "preview": "public AnimationStateData (SkeletonData skeletonData) {",
          "children": []
        },
        {
          "name": "getSkeletonData()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public SkeletonData getSkeletonData () {",
          "documentation": "The SkeletonData to look up animations when they are specified by name.",
          "children": []
        },
        {
          "name": "setMix(String, String, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 2
            }
          },
          "preview": "public void setMix (String fromName, String toName, float duration) {",
          "documentation": "Sets a mix duration by animation name.\n<p>\nSee {@link #setMix(Animation, Animation, float)}.",
          "children": []
        },
        {
          "name": "setMix(Animation, Animation, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public void setMix (Animation from, Animation to, float duration) {",
          "documentation": "Sets the mix duration when changing from the specified animation to the other.\n<p>\nSee {@link TrackEntry#mixDuration}.",
          "children": []
        },
        {
          "name": "getMix(Animation, Animation)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 2
            }
          },
          "preview": "public float getMix (Animation from, Animation to) {",
          "documentation": "Returns the mix duration to use when changing from the specified animation to the other, or the {@link #getDefaultMix()} if\nno mix duration has been set.",
          "children": []
        },
        {
          "name": "getDefaultMix()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 2
            }
          },
          "preview": "public float getDefaultMix () {",
          "documentation": "The mix duration to use when no mix duration has been defined between two animations.",
          "children": []
        },
        {
          "name": "setDefaultMix(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 2
            }
          },
          "preview": "public void setDefaultMix (float defaultMix) {",
          "children": []
        },
        {
          "name": "Key",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 2
            }
          },
          "preview": "static class Key",
          "children": [
            {
              "name": "a1",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
              "range": {
                "start": {
                  "line": 95,
                  "character": 0
                },
                "end": {
                  "line": 95,
                  "character": 19
                }
              },
              "preview": "Animation a1, a2;",
              "children": []
            },
            {
              "name": "a2",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
              "range": {
                "start": {
                  "line": 95,
                  "character": 0
                },
                "end": {
                  "line": 95,
                  "character": 19
                }
              },
              "preview": "Animation a1, a2;",
              "children": []
            },
            {
              "name": "hashCode()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
              "range": {
                "start": {
                  "line": 97,
                  "character": 0
                },
                "end": {
                  "line": 99,
                  "character": 3
                }
              },
              "preview": "public int hashCode () {",
              "children": []
            },
            {
              "name": "equals(Object)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
              "range": {
                "start": {
                  "line": 101,
                  "character": 0
                },
                "end": {
                  "line": 112,
                  "character": 3
                }
              },
              "preview": "public boolean equals (Object obj) {",
              "children": []
            },
            {
              "name": "toString()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/AnimationStateData.java",
              "range": {
                "start": {
                  "line": 114,
                  "character": 0
                },
                "end": {
                  "line": 116,
                  "character": 3
                }
              },
              "preview": "public String toString () {",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "BlendMode",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 56,
          "character": 1
        }
      },
      "preview": "public enum BlendMode",
      "documentation": "Determines how images are blended with existing pixels when drawn.",
      "children": [
        {
          "name": "normal",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 61
            }
          },
          "preview": "normal(GL_SRC_ALPHA, GL_ONE, GL_ONE_MINUS_SRC_ALPHA, GL_ONE), //",
          "children": []
        },
        {
          "name": "additive",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 47
            }
          },
          "preview": "additive(GL_SRC_ALPHA, GL_ONE, GL_ONE, GL_ONE), //",
          "children": []
        },
        {
          "name": "multiply",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 85
            }
          },
          "preview": "multiply(GL_DST_COLOR, GL_DST_COLOR, GL_ONE_MINUS_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA), //",
          "children": []
        },
        {
          "name": "screen",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 71
            }
          },
          "preview": "screen(GL_ONE, GL_ONE, GL_ONE_MINUS_SRC_COLOR, GL_ONE_MINUS_SRC_COLOR);",
          "children": []
        },
        {
          "name": "source",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 60
            }
          },
          "preview": "public final int source, sourcePMA, destColor, sourceAlpha;",
          "children": []
        },
        {
          "name": "sourcePMA",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 60
            }
          },
          "preview": "public final int source, sourcePMA, destColor, sourceAlpha;",
          "children": []
        },
        {
          "name": "destColor",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 60
            }
          },
          "preview": "public final int source, sourcePMA, destColor, sourceAlpha;",
          "children": []
        },
        {
          "name": "sourceAlpha",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 60
            }
          },
          "preview": "public final int source, sourcePMA, destColor, sourceAlpha;",
          "children": []
        },
        {
          "name": "BlendMode(int, int, int, int)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 2
            }
          },
          "preview": "BlendMode (int source, int sourcePMA, int destColor, int sourceAlpha) {",
          "children": []
        },
        {
          "name": "apply(Batch, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 2
            }
          },
          "preview": "public void apply (Batch batch, boolean premultipliedAlpha) {",
          "children": []
        },
        {
          "name": "values",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BlendMode.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 51
            }
          },
          "preview": "static public final BlendMode[] values = values();",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Bone",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 67,
          "character": 1
        }
      },
      "preview": "public class Bone extends PosedActive<BoneData, BoneLocal, BonePose>",
      "documentation": "The current pose for a bone, before constraints are applied.\n<p>\nA bone has a local transform which is used to compute its world transform. A bone also has an applied transform, which is a\nlocal transform that can be applied to compute the world transform. The local transform and applied transform may differ if a\nconstraint or application code modifies the world transform after it was computed from the local transform.",
      "supertypes": [
        {
          "name": "PosedActive",
          "typeArguments": [
            "BoneData",
            "BoneLocal",
            "BonePose"
          ]
        }
      ],
      "children": [
        {
          "name": "parent",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 25
            }
          },
          "preview": "@Null final Bone parent;",
          "children": []
        },
        {
          "name": "children",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 62
            }
          },
          "preview": "final Array<Bone> children = new Array(true, 4, Bone[]::new);",
          "children": []
        },
        {
          "name": "sorted",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 16
            }
          },
          "preview": "boolean sorted;",
          "children": []
        },
        {
          "name": "Bone(BoneData, Bone)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public Bone (BoneData data, @Null Bone parent) {",
          "children": []
        },
        {
          "name": "Bone(Bone, Bone)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 2
            }
          },
          "preview": "public Bone (Bone bone, @Null Bone parent) {",
          "documentation": "Copy constructor. Does not copy the {@link #getChildren()} bones.",
          "children": []
        },
        {
          "name": "getParent()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 2
            }
          },
          "preview": "public @Null Bone getParent () {",
          "documentation": "The parent bone, or null if this is the root bone.",
          "children": []
        },
        {
          "name": "getChildren()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Bone.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 2
            }
          },
          "preview": "public Array<Bone> getChildren () {",
          "documentation": "The immediate children of this bone.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "BoneData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 108,
          "character": 1
        }
      },
      "preview": "public class BoneData extends PosedData<BoneLocal>",
      "documentation": "The setup pose for a bone.",
      "supertypes": [
        {
          "name": "PosedData",
          "typeArguments": [
            "BoneLocal"
          ]
        }
      ],
      "children": [
        {
          "name": "index",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 17
            }
          },
          "preview": "final int index;",
          "children": []
        },
        {
          "name": "parent",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 29
            }
          },
          "preview": "@Null final BoneData parent;",
          "children": []
        },
        {
          "name": "length",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 14
            }
          },
          "preview": "float length;",
          "children": []
        },
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 67
            }
          },
          "preview": "final Color color = new Color(0.61f, 0.61f, 0.61f, 1); // 9b9b9bff",
          "children": []
        },
        {
          "name": "icon",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 19
            }
          },
          "preview": "@Null String icon;",
          "children": []
        },
        {
          "name": "visible",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 17
            }
          },
          "preview": "boolean visible;",
          "children": []
        },
        {
          "name": "BoneData(int, String, BoneData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "public BoneData (int index, String name, @Null BoneData parent) {",
          "children": []
        },
        {
          "name": "BoneData(BoneData, BoneData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public BoneData (BoneData data, @Null BoneData parent) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "getIndex()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 2
            }
          },
          "preview": "public int getIndex () {",
          "documentation": "The index of the bone in {@link Skeleton#getBones()}.",
          "children": []
        },
        {
          "name": "getParent()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 2
            }
          },
          "preview": "public @Null BoneData getParent () {",
          "children": []
        },
        {
          "name": "getLength()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public float getLength () {",
          "documentation": "The bone's length.",
          "children": []
        },
        {
          "name": "setLength(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 2
            }
          },
          "preview": "public void setLength (float length) {",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "documentation": "The color of the bone as it was in Spine, or a default color if nonessential data was not exported. Bones are not usually\nrendered at runtime.",
          "children": []
        },
        {
          "name": "getIcon()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 2
            }
          },
          "preview": "public @Null String getIcon () {",
          "documentation": "The bone icon as it was in Spine, or null if nonessential data was not exported.",
          "children": []
        },
        {
          "name": "setIcon(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 2
            }
          },
          "preview": "public void setIcon (@Null String icon) {",
          "children": []
        },
        {
          "name": "getVisible()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 2
            }
          },
          "preview": "public boolean getVisible () {",
          "documentation": "False if the bone was hidden in Spine and nonessential data was exported. Does not affect runtime rendering.",
          "children": []
        },
        {
          "name": "setVisible(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 2
            }
          },
          "preview": "public void setVisible (boolean visible) {",
          "children": []
        },
        {
          "name": "Inherit",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 2
            }
          },
          "preview": "static public enum Inherit",
          "documentation": "Determines how a bone inherits world transforms from parent bones.",
          "children": [
            {
              "name": "normal",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
              "range": {
                "start": {
                  "line": 104,
                  "character": 0
                },
                "end": {
                  "line": 104,
                  "character": 8
                }
              },
              "preview": "normal, onlyTranslation, noRotationOrReflection, noScale, noScaleOrReflection;",
              "children": []
            },
            {
              "name": "onlyTranslation",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
              "range": {
                "start": {
                  "line": 104,
                  "character": 0
                },
                "end": {
                  "line": 104,
                  "character": 25
                }
              },
              "preview": "normal, onlyTranslation, noRotationOrReflection, noScale, noScaleOrReflection;",
              "children": []
            },
            {
              "name": "noRotationOrReflection",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
              "range": {
                "start": {
                  "line": 104,
                  "character": 0
                },
                "end": {
                  "line": 104,
                  "character": 49
                }
              },
              "preview": "normal, onlyTranslation, noRotationOrReflection, noScale, noScaleOrReflection;",
              "children": []
            },
            {
              "name": "noScale",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
              "range": {
                "start": {
                  "line": 104,
                  "character": 0
                },
                "end": {
                  "line": 104,
                  "character": 58
                }
              },
              "preview": "normal, onlyTranslation, noRotationOrReflection, noScale, noScaleOrReflection;",
              "children": []
            },
            {
              "name": "noScaleOrReflection",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
              "range": {
                "start": {
                  "line": 104,
                  "character": 0
                },
                "end": {
                  "line": 104,
                  "character": 79
                }
              },
              "preview": "normal, onlyTranslation, noRotationOrReflection, noScale, noScaleOrReflection;",
              "children": []
            },
            {
              "name": "values",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneData.java",
              "range": {
                "start": {
                  "line": 106,
                  "character": 0
                },
                "end": {
                  "line": 106,
                  "character": 58
                }
              },
              "preview": "static public final Inherit[] values = Inherit.values();",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "BoneLocal",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 137,
          "character": 1
        }
      },
      "preview": "public class BoneLocal implements Pose<BoneLocal>",
      "documentation": "Stores a bone's local pose.",
      "supertypes": [
        {
          "name": "Pose",
          "typeArguments": [
            "BoneLocal"
          ]
        }
      ],
      "children": [
        {
          "name": "x",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 54
            }
          },
          "preview": "float x, y, rotation, scaleX, scaleY, shearX, shearY;",
          "children": []
        },
        {
          "name": "y",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 54
            }
          },
          "preview": "float x, y, rotation, scaleX, scaleY, shearX, shearY;",
          "children": []
        },
        {
          "name": "rotation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 54
            }
          },
          "preview": "float x, y, rotation, scaleX, scaleY, shearX, shearY;",
          "children": []
        },
        {
          "name": "scaleX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 54
            }
          },
          "preview": "float x, y, rotation, scaleX, scaleY, shearX, shearY;",
          "children": []
        },
        {
          "name": "scaleY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 54
            }
          },
          "preview": "float x, y, rotation, scaleX, scaleY, shearX, shearY;",
          "children": []
        },
        {
          "name": "shearX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 54
            }
          },
          "preview": "float x, y, rotation, scaleX, scaleY, shearX, shearY;",
          "children": []
        },
        {
          "name": "shearY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 54
            }
          },
          "preview": "float x, y, rotation, scaleX, scaleY, shearX, shearY;",
          "children": []
        },
        {
          "name": "inherit",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 17
            }
          },
          "preview": "Inherit inherit;",
          "children": []
        },
        {
          "name": "set(BoneLocal)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 2
            }
          },
          "preview": "public void set (BoneLocal pose) {",
          "children": []
        },
        {
          "name": "getX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 2
            }
          },
          "preview": "public float getX () {",
          "documentation": "The local x translation.",
          "children": []
        },
        {
          "name": "setX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 2
            }
          },
          "preview": "public void setX (float x) {",
          "children": []
        },
        {
          "name": "getY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 2
            }
          },
          "preview": "public float getY () {",
          "documentation": "The local y translation.",
          "children": []
        },
        {
          "name": "setY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 2
            }
          },
          "preview": "public void setY (float y) {",
          "children": []
        },
        {
          "name": "setPosition(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 2
            }
          },
          "preview": "public void setPosition (float x, float y) {",
          "children": []
        },
        {
          "name": "getRotation()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 2
            }
          },
          "preview": "public float getRotation () {",
          "documentation": "The local rotation in degrees, counter clockwise.",
          "children": []
        },
        {
          "name": "setRotation(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 2
            }
          },
          "preview": "public void setRotation (float rotation) {",
          "children": []
        },
        {
          "name": "getScaleX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 2
            }
          },
          "preview": "public float getScaleX () {",
          "documentation": "The local scaleX.",
          "children": []
        },
        {
          "name": "setScaleX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 2
            }
          },
          "preview": "public void setScaleX (float scaleX) {",
          "children": []
        },
        {
          "name": "getScaleY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public float getScaleY () {",
          "documentation": "The local scaleY.",
          "children": []
        },
        {
          "name": "setScaleY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public void setScaleY (float scaleY) {",
          "children": []
        },
        {
          "name": "setScale(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public void setScale (float scaleX, float scaleY) {",
          "children": []
        },
        {
          "name": "setScale(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 2
            }
          },
          "preview": "public void setScale (float scale) {",
          "children": []
        },
        {
          "name": "getShearX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 2
            }
          },
          "preview": "public float getShearX () {",
          "documentation": "The local shearX.",
          "children": []
        },
        {
          "name": "setShearX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 2
            }
          },
          "preview": "public void setShearX (float shearX) {",
          "children": []
        },
        {
          "name": "getShearY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 2
            }
          },
          "preview": "public float getShearY () {",
          "documentation": "The local shearY.",
          "children": []
        },
        {
          "name": "setShearY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 126,
              "character": 2
            }
          },
          "preview": "public void setShearY (float shearY) {",
          "children": []
        },
        {
          "name": "getInherit()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 2
            }
          },
          "preview": "public Inherit getInherit () {",
          "documentation": "Determines how parent world transforms affect this bone.",
          "children": []
        },
        {
          "name": "setInherit(Inherit)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BoneLocal.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 2
            }
          },
          "preview": "public void setInherit (Inherit inherit) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
      "range": {
        "start": {
          "line": 1,
          "character": 0
        },
        "end": {
          "line": 1,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;"
    },
    {
      "name": "BonePose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
      "range": {
        "start": {
          "line": 13,
          "character": 0
        },
        "end": {
          "line": 402,
          "character": 1
        }
      },
      "preview": "public class BonePose extends BoneLocal implements Update",
      "documentation": "The applied pose for a bone. This is the {@link Bone} pose with constraints applied and the world transform computed by\n{@link Skeleton#updateWorldTransform(Physics)}.",
      "supertypes": [
        {
          "name": "BoneLocal"
        },
        {
          "name": "Update"
        }
      ],
      "children": [
        {
          "name": "bone",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 14,
              "character": 0
            },
            "end": {
              "line": 14,
              "character": 11
            }
          },
          "preview": "Bone bone;",
          "children": []
        },
        {
          "name": "a",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 15,
              "character": 0
            },
            "end": {
              "line": 15,
              "character": 20
            }
          },
          "preview": "float a, b, worldX;",
          "children": []
        },
        {
          "name": "b",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 15,
              "character": 0
            },
            "end": {
              "line": 15,
              "character": 20
            }
          },
          "preview": "float a, b, worldX;",
          "children": []
        },
        {
          "name": "worldX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 15,
              "character": 0
            },
            "end": {
              "line": 15,
              "character": 20
            }
          },
          "preview": "float a, b, worldX;",
          "children": []
        },
        {
          "name": "c",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 16,
              "character": 0
            },
            "end": {
              "line": 16,
              "character": 20
            }
          },
          "preview": "float c, d, worldY;",
          "children": []
        },
        {
          "name": "d",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 16,
              "character": 0
            },
            "end": {
              "line": 16,
              "character": 20
            }
          },
          "preview": "float c, d, worldY;",
          "children": []
        },
        {
          "name": "worldY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 16,
              "character": 0
            },
            "end": {
              "line": 16,
              "character": 20
            }
          },
          "preview": "float c, d, worldY;",
          "children": []
        },
        {
          "name": "world",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 17,
              "character": 0
            },
            "end": {
              "line": 17,
              "character": 18
            }
          },
          "preview": "int world, local;",
          "children": []
        },
        {
          "name": "local",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 17,
              "character": 0
            },
            "end": {
              "line": 17,
              "character": 18
            }
          },
          "preview": "int world, local;",
          "children": []
        },
        {
          "name": "update(Skeleton, Physics)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 20,
              "character": 0
            },
            "end": {
              "line": 22,
              "character": 2
            }
          },
          "preview": "public void update (Skeleton skeleton, Physics physics) {",
          "documentation": "Called by {@link Skeleton#updateCache()} to compute the world transform, if needed.",
          "children": []
        },
        {
          "name": "updateWorldTransform(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 28,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 2
            }
          },
          "preview": "public void updateWorldTransform (Skeleton skeleton) {",
          "documentation": "Computes the world transform using the parent bone's applied pose and this pose. Child bones are not updated.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.",
          "children": []
        },
        {
          "name": "updateLocalTransform(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 140,
              "character": 0
            },
            "end": {
              "line": 219,
              "character": 2
            }
          },
          "preview": "public void updateLocalTransform (Skeleton skeleton) {",
          "documentation": "Computes the local transform values from the world transform.\n<p>\nIf the world transform is modified (by a constraint, {@link #rotateWorld(float)}, etc) then this method should be called so\nthe local transform matches the world transform. The local transform may be needed by other code (eg to apply another\nconstraint).\n<p>\nSome information is ambiguous in the world transform, such as -1,-1 scale versus 180 rotation. The local transform after\ncalling this method is equivalent to the local transform used to compute the world transform, but may not be identical.",
          "children": []
        },
        {
          "name": "validateLocalTransform(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 223,
              "character": 0
            },
            "end": {
              "line": 225,
              "character": 2
            }
          },
          "preview": "public void validateLocalTransform (Skeleton skeleton) {",
          "documentation": "If the world transform has been modified and the local transform no longer matches, {@link #updateLocalTransform(Skeleton)}\nis called.",
          "children": []
        },
        {
          "name": "modifyLocal(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 227,
              "character": 0
            },
            "end": {
              "line": 231,
              "character": 2
            }
          },
          "preview": "void modifyLocal (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "modifyWorld(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 233,
              "character": 0
            },
            "end": {
              "line": 237,
              "character": 2
            }
          },
          "preview": "void modifyWorld (int update) {",
          "children": []
        },
        {
          "name": "resetWorld(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 239,
              "character": 0
            },
            "end": {
              "line": 249,
              "character": 2
            }
          },
          "preview": "void resetWorld (int update) {",
          "children": []
        },
        {
          "name": "getA()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 252,
              "character": 0
            },
            "end": {
              "line": 254,
              "character": 2
            }
          },
          "preview": "public float getA () {",
          "documentation": "Part of the world transform matrix for the X axis. If changed, {@link #updateLocalTransform(Skeleton)} should be called.",
          "children": []
        },
        {
          "name": "setA(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 256,
              "character": 0
            },
            "end": {
              "line": 258,
              "character": 2
            }
          },
          "preview": "public void setA (float a) {",
          "children": []
        },
        {
          "name": "getB()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 261,
              "character": 0
            },
            "end": {
              "line": 263,
              "character": 2
            }
          },
          "preview": "public float getB () {",
          "documentation": "Part of the world transform matrix for the Y axis. If changed, {@link #updateLocalTransform(Skeleton)} should be called.",
          "children": []
        },
        {
          "name": "setB(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 265,
              "character": 0
            },
            "end": {
              "line": 267,
              "character": 2
            }
          },
          "preview": "public void setB (float b) {",
          "children": []
        },
        {
          "name": "getC()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 270,
              "character": 0
            },
            "end": {
              "line": 272,
              "character": 2
            }
          },
          "preview": "public float getC () {",
          "documentation": "Part of the world transform matrix for the X axis. If changed, {@link #updateLocalTransform(Skeleton)} should be called.",
          "children": []
        },
        {
          "name": "setC(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 274,
              "character": 0
            },
            "end": {
              "line": 276,
              "character": 2
            }
          },
          "preview": "public void setC (float c) {",
          "children": []
        },
        {
          "name": "getD()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 279,
              "character": 0
            },
            "end": {
              "line": 281,
              "character": 2
            }
          },
          "preview": "public float getD () {",
          "documentation": "Part of the world transform matrix for the Y axis. If changed, {@link #updateLocalTransform(Skeleton)} should be called.",
          "children": []
        },
        {
          "name": "setD(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 283,
              "character": 0
            },
            "end": {
              "line": 285,
              "character": 2
            }
          },
          "preview": "public void setD (float d) {",
          "children": []
        },
        {
          "name": "getWorldX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 288,
              "character": 0
            },
            "end": {
              "line": 290,
              "character": 2
            }
          },
          "preview": "public float getWorldX () {",
          "documentation": "The world X position. If changed, {@link #updateLocalTransform(Skeleton)} should be called.",
          "children": []
        },
        {
          "name": "setWorldX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 292,
              "character": 0
            },
            "end": {
              "line": 294,
              "character": 2
            }
          },
          "preview": "public void setWorldX (float worldX) {",
          "children": []
        },
        {
          "name": "getWorldY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 297,
              "character": 0
            },
            "end": {
              "line": 299,
              "character": 2
            }
          },
          "preview": "public float getWorldY () {",
          "documentation": "The world Y position. If changed, {@link #updateLocalTransform(Skeleton)} should be called.",
          "children": []
        },
        {
          "name": "setWorldY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 301,
              "character": 0
            },
            "end": {
              "line": 303,
              "character": 2
            }
          },
          "preview": "public void setWorldY (float worldY) {",
          "children": []
        },
        {
          "name": "getWorldRotationX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 306,
              "character": 0
            },
            "end": {
              "line": 308,
              "character": 2
            }
          },
          "preview": "public float getWorldRotationX () {",
          "documentation": "The world rotation for the X axis, calculated using {@link #a} and {@link #c}.",
          "children": []
        },
        {
          "name": "getWorldRotationY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 311,
              "character": 0
            },
            "end": {
              "line": 313,
              "character": 2
            }
          },
          "preview": "public float getWorldRotationY () {",
          "documentation": "The world rotation for the Y axis, calculated using {@link #b} and {@link #d}.",
          "children": []
        },
        {
          "name": "getWorldScaleX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 316,
              "character": 0
            },
            "end": {
              "line": 318,
              "character": 2
            }
          },
          "preview": "public float getWorldScaleX () {",
          "documentation": "The magnitude (always positive) of the world scale X, calculated using {@link #a} and {@link #c}.",
          "children": []
        },
        {
          "name": "getWorldScaleY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 321,
              "character": 0
            },
            "end": {
              "line": 323,
              "character": 2
            }
          },
          "preview": "public float getWorldScaleY () {",
          "documentation": "The magnitude (always positive) of the world scale Y, calculated using {@link #b} and {@link #d}.",
          "children": []
        },
        {
          "name": "getWorldTransform(Matrix3)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 325,
              "character": 0
            },
            "end": {
              "line": 338,
              "character": 2
            }
          },
          "preview": "public Matrix3 getWorldTransform (Matrix3 worldTransform) {",
          "children": []
        },
        {
          "name": "worldToLocal(Vector2)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 341,
              "character": 0
            },
            "end": {
              "line": 348,
              "character": 2
            }
          },
          "preview": "public Vector2 worldToLocal (Vector2 world) {",
          "documentation": "Transforms a point from world coordinates to the bone's local coordinates.",
          "children": []
        },
        {
          "name": "localToWorld(Vector2)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 351,
              "character": 0
            },
            "end": {
              "line": 357,
              "character": 2
            }
          },
          "preview": "public Vector2 localToWorld (Vector2 local) {",
          "documentation": "Transforms a point from the bone's local coordinates to world coordinates.",
          "children": []
        },
        {
          "name": "worldToParent(Vector2)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 360,
              "character": 0
            },
            "end": {
              "line": 363,
              "character": 2
            }
          },
          "preview": "public Vector2 worldToParent (Vector2 world) {",
          "documentation": "Transforms a point from world coordinates to the parent bone's local coordinates.",
          "children": []
        },
        {
          "name": "parentToWorld(Vector2)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 366,
              "character": 0
            },
            "end": {
              "line": 369,
              "character": 2
            }
          },
          "preview": "public Vector2 parentToWorld (Vector2 world) {",
          "documentation": "Transforms a point from the parent bone's coordinates to world coordinates.",
          "children": []
        },
        {
          "name": "worldToLocalRotation(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 372,
              "character": 0
            },
            "end": {
              "line": 376,
              "character": 2
            }
          },
          "preview": "public float worldToLocalRotation (float worldRotation) {",
          "documentation": "Transforms a world rotation to a local rotation.",
          "children": []
        },
        {
          "name": "localToWorldRotation(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 379,
              "character": 0
            },
            "end": {
              "line": 383,
              "character": 2
            }
          },
          "preview": "public float localToWorldRotation (float localRotation) {",
          "documentation": "Transforms a local rotation to a world rotation.",
          "children": []
        },
        {
          "name": "rotateWorld(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 389,
              "character": 0
            },
            "end": {
              "line": 397,
              "character": 2
            }
          },
          "preview": "public void rotateWorld (float degrees) {",
          "documentation": "Rotates the world transform the specified amount.\n<p>\nAfter changes are made to the world transform, {@link #updateLocalTransform(Skeleton)} should be called on this bone and any\nchild bones, recursively.",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/BonePose.java",
          "range": {
            "start": {
              "line": 399,
              "character": 0
            },
            "end": {
              "line": 401,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Constraint.java",
      "range": {
        "start": {
          "line": 1,
          "character": 0
        },
        "end": {
          "line": 1,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;"
    },
    {
      "name": "Constraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Constraint.java",
      "range": {
        "start": {
          "line": 3,
          "character": 0
        },
        "end": {
          "line": 20,
          "character": 1
        }
      },
      "preview": "abstract public class Constraint< T extends Constraint<T, D, P>, D extends ConstraintData<T, P>, P extends Pose> extends PosedActive<D, P, P> implements Update",
      "typeParameters": [
        "T",
        "D",
        "P"
      ],
      "supertypes": [
        {
          "name": "PosedActive",
          "typeArguments": [
            "D",
            "P",
            "P"
          ]
        },
        {
          "name": "Update"
        }
      ],
      "children": [
        {
          "name": "Constraint(D, P, P)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Constraint.java",
          "range": {
            "start": {
              "line": 9,
              "character": 0
            },
            "end": {
              "line": 11,
              "character": 2
            }
          },
          "preview": "public Constraint (D data, P pose, P constrained) {",
          "children": []
        },
        {
          "name": "copy(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Constraint.java",
          "range": {
            "start": {
              "line": 13,
              "character": 0
            },
            "end": {
              "line": 13,
              "character": 44
            }
          },
          "preview": "abstract public T copy (Skeleton skeleton);",
          "children": []
        },
        {
          "name": "sort(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Constraint.java",
          "range": {
            "start": {
              "line": 15,
              "character": 0
            },
            "end": {
              "line": 15,
              "character": 40
            }
          },
          "preview": "abstract void sort (Skeleton skeleton);",
          "children": []
        },
        {
          "name": "isSourceActive()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Constraint.java",
          "range": {
            "start": {
              "line": 17,
              "character": 0
            },
            "end": {
              "line": 19,
              "character": 2
            }
          },
          "preview": "boolean isSourceActive () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/ConstraintData.java",
      "range": {
        "start": {
          "line": 1,
          "character": 0
        },
        "end": {
          "line": 1,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;"
    },
    {
      "name": "ConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/ConstraintData.java",
      "range": {
        "start": {
          "line": 3,
          "character": 0
        },
        "end": {
          "line": 13,
          "character": 1
        }
      },
      "preview": "abstract public class ConstraintData< T extends Constraint, P extends Pose> extends PosedData<P>",
      "typeParameters": [
        "T",
        "P"
      ],
      "supertypes": [
        {
          "name": "PosedData",
          "typeArguments": [
            "P"
          ]
        }
      ],
      "children": [
        {
          "name": "ConstraintData(String, P)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/ConstraintData.java",
          "range": {
            "start": {
              "line": 8,
              "character": 0
            },
            "end": {
              "line": 10,
              "character": 2
            }
          },
          "preview": "public ConstraintData (String name, P setup) {",
          "children": []
        },
        {
          "name": "create(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/ConstraintData.java",
          "range": {
            "start": {
              "line": 12,
              "character": 0
            },
            "end": {
              "line": 12,
              "character": 46
            }
          },
          "preview": "abstract public T create (Skeleton skeleton);",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Event",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 108,
          "character": 1
        }
      },
      "preview": "public class Event",
      "documentation": "Stores the current pose values for an {@link Event}.\n<p>\nSee Timeline\n{@link Timeline#apply(Skeleton, float, float, com.badlogic.gdx.utils.Array, float, com.esotericsoftware.spine.Animation.MixBlend, com.esotericsoftware.spine.Animation.MixDirection, boolean)},\nAnimationStateListener {@link AnimationStateListener#event(com.esotericsoftware.spine.AnimationState.TrackEntry, Event)}, and\n<a href=\"https://esotericsoftware.com/spine-events\">Events</a> in the Spine User Guide.",
      "children": [
        {
          "name": "data",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 22
            }
          },
          "preview": "final EventData data;",
          "children": []
        },
        {
          "name": "intValue",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 14
            }
          },
          "preview": "int intValue;",
          "children": []
        },
        {
          "name": "floatValue",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 18
            }
          },
          "preview": "float floatValue;",
          "children": []
        },
        {
          "name": "stringValue",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 20
            }
          },
          "preview": "String stringValue;",
          "children": []
        },
        {
          "name": "volume",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 23
            }
          },
          "preview": "float volume, balance;",
          "children": []
        },
        {
          "name": "balance",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 23
            }
          },
          "preview": "float volume, balance;",
          "children": []
        },
        {
          "name": "time",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 18
            }
          },
          "preview": "final float time;",
          "children": []
        },
        {
          "name": "Event(float, EventData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 2
            }
          },
          "preview": "public Event (float time, EventData data) {",
          "children": []
        },
        {
          "name": "getInt()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 2
            }
          },
          "preview": "public int getInt () {",
          "children": []
        },
        {
          "name": "setInt(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public void setInt (int intValue) {",
          "children": []
        },
        {
          "name": "getFloat()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 2
            }
          },
          "preview": "public float getFloat () {",
          "children": []
        },
        {
          "name": "setFloat(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 2
            }
          },
          "preview": "public void setFloat (float floatValue) {",
          "children": []
        },
        {
          "name": "getString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public String getString () {",
          "children": []
        },
        {
          "name": "setString(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 2
            }
          },
          "preview": "public void setString (String stringValue) {",
          "children": []
        },
        {
          "name": "getVolume()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 2
            }
          },
          "preview": "public float getVolume () {",
          "children": []
        },
        {
          "name": "setVolume(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 2
            }
          },
          "preview": "public void setVolume (float volume) {",
          "children": []
        },
        {
          "name": "getBalance()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 2
            }
          },
          "preview": "public float getBalance () {",
          "children": []
        },
        {
          "name": "setBalance(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 2
            }
          },
          "preview": "public void setBalance (float balance) {",
          "children": []
        },
        {
          "name": "getTime()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public float getTime () {",
          "documentation": "The animation time this event was keyed.",
          "children": []
        },
        {
          "name": "getData()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public EventData getData () {",
          "documentation": "The event's setup pose data.",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Event.java",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "EventData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 104,
          "character": 1
        }
      },
      "preview": "public class EventData",
      "documentation": "Stores the setup pose values for an {@link Event}.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-events\">Events</a> in the Spine User Guide.",
      "children": [
        {
          "name": "name",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 19
            }
          },
          "preview": "final String name;",
          "children": []
        },
        {
          "name": "intValue",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 14
            }
          },
          "preview": "int intValue;",
          "children": []
        },
        {
          "name": "floatValue",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 18
            }
          },
          "preview": "float floatValue;",
          "children": []
        },
        {
          "name": "stringValue",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 31
            }
          },
          "preview": "String stringValue, audioPath;",
          "children": []
        },
        {
          "name": "audioPath",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 31
            }
          },
          "preview": "String stringValue, audioPath;",
          "children": []
        },
        {
          "name": "volume",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 23
            }
          },
          "preview": "float volume, balance;",
          "children": []
        },
        {
          "name": "balance",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 23
            }
          },
          "preview": "float volume, balance;",
          "children": []
        },
        {
          "name": "EventData(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 2
            }
          },
          "preview": "public EventData (String name) {",
          "children": []
        },
        {
          "name": "getInt()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 2
            }
          },
          "preview": "public int getInt () {",
          "children": []
        },
        {
          "name": "setInt(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 2
            }
          },
          "preview": "public void setInt (int intValue) {",
          "children": []
        },
        {
          "name": "getFloat()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 2
            }
          },
          "preview": "public float getFloat () {",
          "children": []
        },
        {
          "name": "setFloat(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public void setFloat (float floatValue) {",
          "children": []
        },
        {
          "name": "getString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 2
            }
          },
          "preview": "public String getString () {",
          "children": []
        },
        {
          "name": "setString(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 2
            }
          },
          "preview": "public void setString (String stringValue) {",
          "children": []
        },
        {
          "name": "getAudioPath()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public String getAudioPath () {",
          "children": []
        },
        {
          "name": "setAudioPath(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public void setAudioPath (String audioPath) {",
          "children": []
        },
        {
          "name": "getVolume()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public float getVolume () {",
          "children": []
        },
        {
          "name": "setVolume(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public void setVolume (float volume) {",
          "children": []
        },
        {
          "name": "getBalance()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public float getBalance () {",
          "children": []
        },
        {
          "name": "setBalance(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public void setBalance (float balance) {",
          "children": []
        },
        {
          "name": "getName()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 2
            }
          },
          "preview": "public String getName () {",
          "documentation": "The name of the event, which is unique across all events in the skeleton.",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/EventData.java",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "IkConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 314,
          "character": 1
        }
      },
      "preview": "public class IkConstraint extends Constraint<IkConstraint, IkConstraintData, IkConstraintPose>",
      "documentation": "Stores the current pose for an IK constraint. An IK constraint adjusts the rotation of 1 or 2 constrained bones so the tip of\nthe last bone is as close to the target bone as possible.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-ik-constraints\">IK constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "Constraint",
          "typeArguments": [
            "IkConstraint",
            "IkConstraintData",
            "IkConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 29
            }
          },
          "preview": "final Array<BonePose> bones;",
          "children": []
        },
        {
          "name": "target",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 13
            }
          },
          "preview": "Bone target;",
          "children": []
        },
        {
          "name": "IkConstraint(IkConstraintData, Skeleton)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 2
            }
          },
          "preview": "public IkConstraint (IkConstraintData data, Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "copy(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public IkConstraint copy (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "update(Skeleton, Physics)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public void update (Skeleton skeleton, Physics physics) {",
          "documentation": "Applies the constraint to the constrained bones.",
          "children": []
        },
        {
          "name": "sort(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 2
            }
          },
          "preview": "void sort (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "isSourceActive()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 2
            }
          },
          "preview": "boolean isSourceActive () {",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 2
            }
          },
          "preview": "public Array<BonePose> getBones () {",
          "documentation": "The 1 or 2 bones that will be modified by this IK constraint.",
          "children": []
        },
        {
          "name": "getTarget()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public Bone getTarget () {",
          "documentation": "The bone that is the IK target.",
          "children": []
        },
        {
          "name": "setTarget(Bone)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public void setTarget (Bone target) {",
          "children": []
        },
        {
          "name": "apply(Skeleton, BonePose, float, float, boolean, boolean, boolean, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 161,
              "character": 2
            }
          },
          "preview": "static public void apply (Skeleton skeleton, BonePose bone, float targetX, float targetY, boolean compress, boolean stretch,",
          "documentation": "Applies 1 bone IK. The target is specified in the world coordinate system.",
          "children": []
        },
        {
          "name": "apply(Skeleton, BonePose, BonePose, float, float, int, boolean, boolean, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraint.java",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 313,
              "character": 2
            }
          },
          "preview": "static public void apply (Skeleton skeleton, BonePose parent, BonePose child, float targetX, float targetY, int bendDir,",
          "documentation": "Applies 2 bone IK. The target is specified in the world coordinate system.\n@param child A direct descendant of the parent bone.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "IkConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 73,
          "character": 1
        }
      },
      "preview": "public class IkConstraintData extends ConstraintData<IkConstraint, IkConstraintPose>",
      "documentation": "Stores the setup pose for an {@link IkConstraint}.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-ik-constraints\">IK constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "ConstraintData",
          "typeArguments": [
            "IkConstraint",
            "IkConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 67
            }
          },
          "preview": "final Array<BoneData> bones = new Array(true, 2, BoneData[]::new);",
          "children": []
        },
        {
          "name": "target",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 17
            }
          },
          "preview": "BoneData target;",
          "children": []
        },
        {
          "name": "uniform",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 17
            }
          },
          "preview": "boolean uniform;",
          "children": []
        },
        {
          "name": "IkConstraintData(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 2
            }
          },
          "preview": "public IkConstraintData (String name) {",
          "children": []
        },
        {
          "name": "create(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 2
            }
          },
          "preview": "public IkConstraint create (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 2
            }
          },
          "preview": "public Array<BoneData> getBones () {",
          "documentation": "The bones that are constrained by this IK constraint.",
          "children": []
        },
        {
          "name": "getTarget()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 2
            }
          },
          "preview": "public BoneData getTarget () {",
          "documentation": "The bone that is the IK target.",
          "children": []
        },
        {
          "name": "setTarget(BoneData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 2
            }
          },
          "preview": "public void setTarget (BoneData target) {",
          "children": []
        },
        {
          "name": "getUniform()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 2
            }
          },
          "preview": "public boolean getUniform () {",
          "documentation": "When true and {@link IkConstraintPose#getCompress()} or {@link IkConstraintPose#getStretch()} is used, the bone is scaled\non both the X and Y axes.",
          "children": []
        },
        {
          "name": "setUniform(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintData.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public void setUniform (boolean uniform) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "IkConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
      "range": {
        "start": {
          "line": 32,
          "character": 0
        },
        "end": {
          "line": 95,
          "character": 1
        }
      },
      "preview": "public class IkConstraintPose implements Pose<IkConstraintPose>",
      "documentation": "Stores the current pose for an IK constraint.",
      "supertypes": [
        {
          "name": "Pose",
          "typeArguments": [
            "IkConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "bendDirection",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 19
            }
          },
          "preview": "int bendDirection;",
          "children": []
        },
        {
          "name": "compress",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 34,
              "character": 0
            },
            "end": {
              "line": 34,
              "character": 27
            }
          },
          "preview": "boolean compress, stretch;",
          "children": []
        },
        {
          "name": "stretch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 34,
              "character": 0
            },
            "end": {
              "line": 34,
              "character": 27
            }
          },
          "preview": "boolean compress, stretch;",
          "children": []
        },
        {
          "name": "mix",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 21
            }
          },
          "preview": "float mix, softness;",
          "children": []
        },
        {
          "name": "softness",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 21
            }
          },
          "preview": "float mix, softness;",
          "children": []
        },
        {
          "name": "set(IkConstraintPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 2
            }
          },
          "preview": "public void set (IkConstraintPose pose) {",
          "children": []
        },
        {
          "name": "getMix()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public float getMix () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained rotation.\n<p>\nFor two bone IK: if the parent bone has local nonuniform scale, the child bone's local Y translation is set to 0.",
          "children": []
        },
        {
          "name": "setMix(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 2
            }
          },
          "preview": "public void setMix (float mix) {",
          "children": []
        },
        {
          "name": "getSoftness()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public float getSoftness () {",
          "documentation": "For two bone IK, the target bone's distance from the maximum reach of the bones where rotation begins to slow. The bones\nwill not straighten completely until the target is this far out of range.",
          "children": []
        },
        {
          "name": "setSoftness(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 2
            }
          },
          "preview": "public void setSoftness (float softness) {",
          "children": []
        },
        {
          "name": "getBendDirection()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 2
            }
          },
          "preview": "public int getBendDirection () {",
          "documentation": "For two bone IK, controls the bend direction of the IK bones, either 1 or -1.",
          "children": []
        },
        {
          "name": "setBendDirection(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public void setBendDirection (int bendDirection) {",
          "children": []
        },
        {
          "name": "getCompress()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public boolean getCompress () {",
          "documentation": "For one bone IK, when true and the target is too close, the bone is scaled to reach it.",
          "children": []
        },
        {
          "name": "setCompress(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public void setCompress (boolean compress) {",
          "children": []
        },
        {
          "name": "getStretch()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public boolean getStretch () {",
          "documentation": "When true and the target is out of range, the parent bone is scaled to reach it.\n<p>\nFor two bone IK: 1) the child bone's local Y translation is set to 0, 2) stretch is not applied if {@link #getSoftness()} is\n> 0, and 3) if the parent bone has local nonuniform scale, stretch is not applied.",
          "children": []
        },
        {
          "name": "setStretch(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/IkConstraintPose.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public void setStretch (boolean stretch) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PathConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 524,
          "character": 1
        }
      },
      "preview": "public class PathConstraint extends Constraint<PathConstraint, PathConstraintData, PathConstraintPose>",
      "documentation": "Stores the current pose for a path constraint. A path constraint adjusts the rotation, translation, and scale of the\nconstrained bones so they follow a {@link PathAttachment}.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-path-constraints\">Path constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "Constraint",
          "typeArguments": [
            "PathConstraint",
            "PathConstraintData",
            "PathConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "NONE",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 53
            }
          },
          "preview": "static final int NONE = -1, BEFORE = -2, AFTER = -3;",
          "children": []
        },
        {
          "name": "BEFORE",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 53
            }
          },
          "preview": "static final int NONE = -1, BEFORE = -2, AFTER = -3;",
          "children": []
        },
        {
          "name": "AFTER",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 53
            }
          },
          "preview": "static final int NONE = -1, BEFORE = -2, AFTER = -3;",
          "children": []
        },
        {
          "name": "epsilon",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 39
            }
          },
          "preview": "static final float epsilon = 0.00001f;",
          "children": []
        },
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 29
            }
          },
          "preview": "final Array<BonePose> bones;",
          "children": []
        },
        {
          "name": "slot",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 11
            }
          },
          "preview": "Slot slot;",
          "children": []
        },
        {
          "name": "spaces",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 82
            }
          },
          "preview": "private final FloatArray spaces = new FloatArray(), positions = new FloatArray();",
          "children": []
        },
        {
          "name": "positions",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 82
            }
          },
          "preview": "private final FloatArray spaces = new FloatArray(), positions = new FloatArray();",
          "children": []
        },
        {
          "name": "world",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 106
            }
          },
          "preview": "private final FloatArray world = new FloatArray(), curves = new FloatArray(), lengths = new FloatArray();",
          "children": []
        },
        {
          "name": "curves",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 106
            }
          },
          "preview": "private final FloatArray world = new FloatArray(), curves = new FloatArray(), lengths = new FloatArray();",
          "children": []
        },
        {
          "name": "lengths",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 106
            }
          },
          "preview": "private final FloatArray world = new FloatArray(), curves = new FloatArray(), lengths = new FloatArray();",
          "children": []
        },
        {
          "name": "segments",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 48
            }
          },
          "preview": "private final float[] segments = new float[10];",
          "children": []
        },
        {
          "name": "PathConstraint(PathConstraintData, Skeleton)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 2
            }
          },
          "preview": "public PathConstraint (PathConstraintData data, Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "copy(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 2
            }
          },
          "preview": "public PathConstraint copy (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "update(Skeleton, Physics)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 200,
              "character": 2
            }
          },
          "preview": "public void update (Skeleton skeleton, Physics physics) {",
          "documentation": "Applies the constraint to the constrained bones.",
          "children": []
        },
        {
          "name": "computeWorldPositions(Skeleton, PathAttachment, int, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 202,
              "character": 0
            },
            "end": {
              "line": 424,
              "character": 2
            }
          },
          "preview": "float[] computeWorldPositions (Skeleton skeleton, PathAttachment path, int spacesCount, boolean tangents) {",
          "children": []
        },
        {
          "name": "addBeforePosition(float, float[], int, float[], int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 426,
              "character": 0
            },
            "end": {
              "line": 431,
              "character": 2
            }
          },
          "preview": "private void addBeforePosition (float p, float[] temp, int i, float[] out, int o) {",
          "children": []
        },
        {
          "name": "addAfterPosition(float, float[], int, float[], int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 433,
              "character": 0
            },
            "end": {
              "line": 438,
              "character": 2
            }
          },
          "preview": "private void addAfterPosition (float p, float[] temp, int i, float[] out, int o) {",
          "children": []
        },
        {
          "name": "addCurvePosition(float, float, float, float, float, float, float, float, float, float[], int, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 440,
              "character": 0
            },
            "end": {
              "line": 459,
              "character": 2
            }
          },
          "preview": "private void addCurvePosition (float p, float x1, float y1, float cx1, float cy1, float cx2, float cy2, float x2, float y2,",
          "children": []
        },
        {
          "name": "sort(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 461,
              "character": 0
            },
            "end": {
              "line": 480,
              "character": 2
            }
          },
          "preview": "void sort (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "sortPathSlot(Skeleton, Skin, int, Bone)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 482,
              "character": 0
            },
            "end": {
              "line": 488,
              "character": 2
            }
          },
          "preview": "private void sortPathSlot (Skeleton skeleton, Skin skin, int slotIndex, Bone slotBone) {",
          "children": []
        },
        {
          "name": "sortPath(Skeleton, Attachment, Bone)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 490,
              "character": 0
            },
            "end": {
              "line": 504,
              "character": 2
            }
          },
          "preview": "private void sortPath (Skeleton skeleton, Attachment attachment, Bone slotBone) {",
          "children": []
        },
        {
          "name": "isSourceActive()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 506,
              "character": 0
            },
            "end": {
              "line": 508,
              "character": 2
            }
          },
          "preview": "boolean isSourceActive () {",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 511,
              "character": 0
            },
            "end": {
              "line": 513,
              "character": 2
            }
          },
          "preview": "public Array<BonePose> getBones () {",
          "documentation": "The bones that will be modified by this path constraint.",
          "children": []
        },
        {
          "name": "getSlot()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 516,
              "character": 0
            },
            "end": {
              "line": 518,
              "character": 2
            }
          },
          "preview": "public Slot getSlot () {",
          "documentation": "The slot whose path attachment will be used to constrained the bones.",
          "children": []
        },
        {
          "name": "setSlot(Slot)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraint.java",
          "range": {
            "start": {
              "line": 520,
              "character": 0
            },
            "end": {
              "line": 523,
              "character": 2
            }
          },
          "preview": "public void setSlot (Slot slot) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PathConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 136,
          "character": 1
        }
      },
      "preview": "public class PathConstraintData extends ConstraintData<PathConstraint, PathConstraintPose>",
      "documentation": "Stores the setup pose for a {@link PathConstraint}.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-path-constraints\">Path constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "ConstraintData",
          "typeArguments": [
            "PathConstraint",
            "PathConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 67
            }
          },
          "preview": "final Array<BoneData> bones = new Array(true, 0, BoneData[]::new);",
          "children": []
        },
        {
          "name": "slot",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 15
            }
          },
          "preview": "SlotData slot;",
          "children": []
        },
        {
          "name": "positionMode",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 27
            }
          },
          "preview": "PositionMode positionMode;",
          "children": []
        },
        {
          "name": "spacingMode",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 25
            }
          },
          "preview": "SpacingMode spacingMode;",
          "children": []
        },
        {
          "name": "rotateMode",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 23
            }
          },
          "preview": "RotateMode rotateMode;",
          "children": []
        },
        {
          "name": "offsetRotation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 22
            }
          },
          "preview": "float offsetRotation;",
          "children": []
        },
        {
          "name": "PathConstraintData(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "public PathConstraintData (String name) {",
          "children": []
        },
        {
          "name": "create(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public PathConstraint create (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "public Array<BoneData> getBones () {",
          "documentation": "The bones that will be modified by this path constraint.",
          "children": []
        },
        {
          "name": "getSlot()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public SlotData getSlot () {",
          "documentation": "The slot whose path attachment will be used to constrained the bones.",
          "children": []
        },
        {
          "name": "setSlot(SlotData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 2
            }
          },
          "preview": "public void setSlot (SlotData slot) {",
          "children": []
        },
        {
          "name": "getPositionMode()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 2
            }
          },
          "preview": "public PositionMode getPositionMode () {",
          "documentation": "The mode for positioning the first bone on the path.",
          "children": []
        },
        {
          "name": "setPositionMode(PositionMode)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 2
            }
          },
          "preview": "public void setPositionMode (PositionMode positionMode) {",
          "children": []
        },
        {
          "name": "getSpacingMode()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 2
            }
          },
          "preview": "public SpacingMode getSpacingMode () {",
          "documentation": "The mode for positioning the bones after the first bone on the path.",
          "children": []
        },
        {
          "name": "setSpacingMode(SpacingMode)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 2
            }
          },
          "preview": "public void setSpacingMode (SpacingMode spacingMode) {",
          "children": []
        },
        {
          "name": "getRotateMode()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public RotateMode getRotateMode () {",
          "documentation": "The mode for adjusting the rotation of the bones.",
          "children": []
        },
        {
          "name": "setRotateMode(RotateMode)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 2
            }
          },
          "preview": "public void setRotateMode (RotateMode rotateMode) {",
          "children": []
        },
        {
          "name": "getOffsetRotation()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 2
            }
          },
          "preview": "public float getOffsetRotation () {",
          "documentation": "An offset added to the constrained bone rotation.",
          "children": []
        },
        {
          "name": "setOffsetRotation(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 2
            }
          },
          "preview": "public void setOffsetRotation (float offsetRotation) {",
          "children": []
        },
        {
          "name": "PositionMode",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 2
            }
          },
          "preview": "static public enum PositionMode",
          "documentation": "Controls how the first bone is positioned along the path.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-path-constraints#Position-mode\">Position mode</a> in the Spine User\nGuide.",
          "children": [
            {
              "name": "fixed",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 111,
                  "character": 0
                },
                "end": {
                  "line": 111,
                  "character": 7
                }
              },
              "preview": "fixed, percent;",
              "children": []
            },
            {
              "name": "percent",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 111,
                  "character": 0
                },
                "end": {
                  "line": 111,
                  "character": 16
                }
              },
              "preview": "fixed, percent;",
              "children": []
            },
            {
              "name": "values",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 113,
                  "character": 0
                },
                "end": {
                  "line": 113,
                  "character": 68
                }
              },
              "preview": "static public final PositionMode[] values = PositionMode.values();",
              "children": []
            }
          ]
        },
        {
          "name": "SpacingMode",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 119,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 2
            }
          },
          "preview": "static public enum SpacingMode",
          "documentation": "Controls how bones after the first bone are positioned along the path.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-path-constraints#Spacing-mode\">Spacing mode</a> in the Spine User Guide.",
          "children": [
            {
              "name": "length",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 120,
                  "character": 0
                },
                "end": {
                  "line": 120,
                  "character": 8
                }
              },
              "preview": "length, fixed, percent, proportional;",
              "children": []
            },
            {
              "name": "fixed",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 120,
                  "character": 0
                },
                "end": {
                  "line": 120,
                  "character": 15
                }
              },
              "preview": "length, fixed, percent, proportional;",
              "children": []
            },
            {
              "name": "percent",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 120,
                  "character": 0
                },
                "end": {
                  "line": 120,
                  "character": 24
                }
              },
              "preview": "length, fixed, percent, proportional;",
              "children": []
            },
            {
              "name": "proportional",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 120,
                  "character": 0
                },
                "end": {
                  "line": 120,
                  "character": 38
                }
              },
              "preview": "length, fixed, percent, proportional;",
              "children": []
            },
            {
              "name": "values",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 122,
                  "character": 0
                },
                "end": {
                  "line": 122,
                  "character": 66
                }
              },
              "preview": "static public final SpacingMode[] values = SpacingMode.values();",
              "children": []
            }
          ]
        },
        {
          "name": "RotateMode",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 135,
              "character": 2
            }
          },
          "preview": "static public enum RotateMode",
          "documentation": "Controls how bones are rotated, translated, and scaled to match the path.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-path-constraints#Rotate-Mix\">Rotate mode</a> in the Spine User Guide.",
          "children": [
            {
              "name": "tangent",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 129,
                  "character": 0
                },
                "end": {
                  "line": 129,
                  "character": 9
                }
              },
              "preview": "tangent, chain,",
              "children": []
            },
            {
              "name": "chain",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 129,
                  "character": 0
                },
                "end": {
                  "line": 129,
                  "character": 16
                }
              },
              "preview": "tangent, chain,",
              "children": []
            },
            {
              "name": "chainScale",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 132,
                  "character": 0
                },
                "end": {
                  "line": 132,
                  "character": 12
                }
              },
              "preview": "chainScale;",
              "documentation": "When chain scale, constrained bones should all have the same parent. That way when the path constraint scales a bone, it\ndoesn't affect other constrained bones.",
              "children": []
            },
            {
              "name": "values",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintData.java",
              "range": {
                "start": {
                  "line": 134,
                  "character": 0
                },
                "end": {
                  "line": 134,
                  "character": 64
                }
              },
              "preview": "static public final RotateMode[] values = RotateMode.values();",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PathConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
      "range": {
        "start": {
          "line": 32,
          "character": 0
        },
        "end": {
          "line": 87,
          "character": 1
        }
      },
      "preview": "public class PathConstraintPose implements Pose<PathConstraintPose>",
      "documentation": "Stores a pose for a path constraint.",
      "supertypes": [
        {
          "name": "Pose",
          "typeArguments": [
            "PathConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "position",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 48
            }
          },
          "preview": "float position, spacing, mixRotate, mixX, mixY;",
          "children": []
        },
        {
          "name": "spacing",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 48
            }
          },
          "preview": "float position, spacing, mixRotate, mixX, mixY;",
          "children": []
        },
        {
          "name": "mixRotate",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 48
            }
          },
          "preview": "float position, spacing, mixRotate, mixX, mixY;",
          "children": []
        },
        {
          "name": "mixX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 48
            }
          },
          "preview": "float position, spacing, mixRotate, mixX, mixY;",
          "children": []
        },
        {
          "name": "mixY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 48
            }
          },
          "preview": "float position, spacing, mixRotate, mixX, mixY;",
          "children": []
        },
        {
          "name": "set(PathConstraintPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 2
            }
          },
          "preview": "public void set (PathConstraintPose pose) {",
          "children": []
        },
        {
          "name": "getPosition()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "public float getPosition () {",
          "documentation": "The position along the path.",
          "children": []
        },
        {
          "name": "setPosition(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public void setPosition (float position) {",
          "children": []
        },
        {
          "name": "getSpacing()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "public float getSpacing () {",
          "documentation": "The spacing between bones.",
          "children": []
        },
        {
          "name": "setSpacing(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 2
            }
          },
          "preview": "public void setSpacing (float spacing) {",
          "children": []
        },
        {
          "name": "getMixRotate()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 2
            }
          },
          "preview": "public float getMixRotate () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained rotation.",
          "children": []
        },
        {
          "name": "setMixRotate(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 2
            }
          },
          "preview": "public void setMixRotate (float mixRotate) {",
          "children": []
        },
        {
          "name": "getMixX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public float getMixX () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained translation X.",
          "children": []
        },
        {
          "name": "setMixX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 2
            }
          },
          "preview": "public void setMixX (float mixX) {",
          "children": []
        },
        {
          "name": "getMixY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public float getMixY () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained translation Y.",
          "children": []
        },
        {
          "name": "setMixY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PathConstraintPose.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public void setMixY (float mixY) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Physics.java",
      "range": {
        "start": {
          "line": 1,
          "character": 0
        },
        "end": {
          "line": 1,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;"
    },
    {
      "name": "Physics",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Physics.java",
      "range": {
        "start": {
          "line": 4,
          "character": 0
        },
        "end": {
          "line": 16,
          "character": 1
        }
      },
      "preview": "public enum Physics",
      "documentation": "Determines how physics and other non-deterministic updates are applied.",
      "children": [
        {
          "name": "none",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Physics.java",
          "range": {
            "start": {
              "line": 6,
              "character": 0
            },
            "end": {
              "line": 6,
              "character": 5
            }
          },
          "preview": "none,",
          "documentation": "Physics are not updated or applied.",
          "children": []
        },
        {
          "name": "reset",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Physics.java",
          "range": {
            "start": {
              "line": 9,
              "character": 0
            },
            "end": {
              "line": 9,
              "character": 6
            }
          },
          "preview": "reset,",
          "documentation": "Physics are reset to the current pose.",
          "children": []
        },
        {
          "name": "update",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Physics.java",
          "range": {
            "start": {
              "line": 12,
              "character": 0
            },
            "end": {
              "line": 12,
              "character": 7
            }
          },
          "preview": "update,",
          "documentation": "Physics are updated and the pose from physics is applied.",
          "children": []
        },
        {
          "name": "pose",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Physics.java",
          "range": {
            "start": {
              "line": 15,
              "character": 0
            },
            "end": {
              "line": 15,
              "character": 5
            }
          },
          "preview": "pose",
          "documentation": "Physics are not updated but the pose from physics is applied.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PhysicsConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 299,
          "character": 1
        }
      },
      "preview": "public class PhysicsConstraint extends Constraint<PhysicsConstraint, PhysicsConstraintData, PhysicsConstraintPose>",
      "documentation": "Stores the current pose for a physics constraint. A physics constraint applies physics to bones.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-physics-constraints\">Physics constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "Constraint",
          "typeArguments": [
            "PhysicsConstraint",
            "PhysicsConstraintData",
            "PhysicsConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "bone",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 15
            }
          },
          "preview": "BonePose bone;",
          "children": []
        },
        {
          "name": "reset",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 22
            }
          },
          "preview": "boolean reset = true;",
          "children": []
        },
        {
          "name": "ux",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 30
            }
          },
          "preview": "float ux, uy, cx, cy, tx, ty;",
          "children": []
        },
        {
          "name": "uy",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 30
            }
          },
          "preview": "float ux, uy, cx, cy, tx, ty;",
          "children": []
        },
        {
          "name": "cx",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 30
            }
          },
          "preview": "float ux, uy, cx, cy, tx, ty;",
          "children": []
        },
        {
          "name": "cy",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 30
            }
          },
          "preview": "float ux, uy, cx, cy, tx, ty;",
          "children": []
        },
        {
          "name": "tx",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 30
            }
          },
          "preview": "float ux, uy, cx, cy, tx, ty;",
          "children": []
        },
        {
          "name": "ty",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 30
            }
          },
          "preview": "float ux, uy, cx, cy, tx, ty;",
          "children": []
        },
        {
          "name": "xOffset",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 32
            }
          },
          "preview": "float xOffset, xLag, xVelocity;",
          "children": []
        },
        {
          "name": "xLag",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 32
            }
          },
          "preview": "float xOffset, xLag, xVelocity;",
          "children": []
        },
        {
          "name": "xVelocity",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 32
            }
          },
          "preview": "float xOffset, xLag, xVelocity;",
          "children": []
        },
        {
          "name": "yOffset",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 32
            }
          },
          "preview": "float yOffset, yLag, yVelocity;",
          "children": []
        },
        {
          "name": "yLag",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 32
            }
          },
          "preview": "float yOffset, yLag, yVelocity;",
          "children": []
        },
        {
          "name": "yVelocity",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 32
            }
          },
          "preview": "float yOffset, yLag, yVelocity;",
          "children": []
        },
        {
          "name": "rotateOffset",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 47
            }
          },
          "preview": "float rotateOffset, rotateLag, rotateVelocity;",
          "children": []
        },
        {
          "name": "rotateLag",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 47
            }
          },
          "preview": "float rotateOffset, rotateLag, rotateVelocity;",
          "children": []
        },
        {
          "name": "rotateVelocity",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 47
            }
          },
          "preview": "float rotateOffset, rotateLag, rotateVelocity;",
          "children": []
        },
        {
          "name": "scaleOffset",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 44
            }
          },
          "preview": "float scaleOffset, scaleLag, scaleVelocity;",
          "children": []
        },
        {
          "name": "scaleLag",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 44
            }
          },
          "preview": "float scaleOffset, scaleLag, scaleVelocity;",
          "children": []
        },
        {
          "name": "scaleVelocity",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 44
            }
          },
          "preview": "float scaleOffset, scaleLag, scaleVelocity;",
          "children": []
        },
        {
          "name": "remaining",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "float remaining, lastTime;",
          "children": []
        },
        {
          "name": "lastTime",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "float remaining, lastTime;",
          "children": []
        },
        {
          "name": "PhysicsConstraint(PhysicsConstraintData, Skeleton)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 2
            }
          },
          "preview": "public PhysicsConstraint (PhysicsConstraintData data, Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "copy(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public PhysicsConstraint copy (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "reset(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 2
            }
          },
          "preview": "public void reset (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "translate(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 2
            }
          },
          "preview": "public void translate (float x, float y) {",
          "documentation": "Translates the physics constraint so next {@link #update(Skeleton, Physics)} forces are applied as if the bone moved an\nadditional amount in world space.",
          "children": []
        },
        {
          "name": "rotate(float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 2
            }
          },
          "preview": "public void rotate (float x, float y, float degrees) {",
          "documentation": "Rotates the physics constraint so next {@link #update(Skeleton, Physics)} forces are applied as if the bone rotated around\nthe specified point in world space.",
          "children": []
        },
        {
          "name": "update(Skeleton, Physics)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 277,
              "character": 2
            }
          },
          "preview": "public void update (Skeleton skeleton, Physics physics) {",
          "documentation": "Applies the constraint to the constrained bones.",
          "children": []
        },
        {
          "name": "sort(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 279,
              "character": 0
            },
            "end": {
              "line": 285,
              "character": 2
            }
          },
          "preview": "void sort (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "isSourceActive()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 287,
              "character": 0
            },
            "end": {
              "line": 289,
              "character": 2
            }
          },
          "preview": "boolean isSourceActive () {",
          "children": []
        },
        {
          "name": "getBone()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 292,
              "character": 0
            },
            "end": {
              "line": 294,
              "character": 2
            }
          },
          "preview": "public BonePose getBone () {",
          "documentation": "The bone constrained by this physics constraint.",
          "children": []
        },
        {
          "name": "setBone(BonePose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraint.java",
          "range": {
            "start": {
              "line": 296,
              "character": 0
            },
            "end": {
              "line": 298,
              "character": 2
            }
          },
          "preview": "public void setBone (BonePose bone) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PhysicsConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 167,
          "character": 1
        }
      },
      "preview": "public class PhysicsConstraintData extends ConstraintData<PhysicsConstraint, PhysicsConstraintPose>",
      "documentation": "Stores the setup pose for a {@link PhysicsConstraint}.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-physics-constraints\">Physics constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "ConstraintData",
          "typeArguments": [
            "PhysicsConstraint",
            "PhysicsConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "bone",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 15
            }
          },
          "preview": "BoneData bone;",
          "children": []
        },
        {
          "name": "x",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 49
            }
          },
          "preview": "float x, y, rotate, scaleX, shearX, limit, step;",
          "children": []
        },
        {
          "name": "y",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 49
            }
          },
          "preview": "float x, y, rotate, scaleX, shearX, limit, step;",
          "children": []
        },
        {
          "name": "rotate",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 49
            }
          },
          "preview": "float x, y, rotate, scaleX, shearX, limit, step;",
          "children": []
        },
        {
          "name": "scaleX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 49
            }
          },
          "preview": "float x, y, rotate, scaleX, shearX, limit, step;",
          "children": []
        },
        {
          "name": "shearX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 49
            }
          },
          "preview": "float x, y, rotate, scaleX, shearX, limit, step;",
          "children": []
        },
        {
          "name": "limit",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 49
            }
          },
          "preview": "float x, y, rotate, scaleX, shearX, limit, step;",
          "children": []
        },
        {
          "name": "step",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 49
            }
          },
          "preview": "float x, y, rotate, scaleX, shearX, limit, step;",
          "children": []
        },
        {
          "name": "inertiaGlobal",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 104
            }
          },
          "preview": "boolean inertiaGlobal, strengthGlobal, dampingGlobal, massGlobal, windGlobal, gravityGlobal, mixGlobal;",
          "children": []
        },
        {
          "name": "strengthGlobal",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 104
            }
          },
          "preview": "boolean inertiaGlobal, strengthGlobal, dampingGlobal, massGlobal, windGlobal, gravityGlobal, mixGlobal;",
          "children": []
        },
        {
          "name": "dampingGlobal",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 104
            }
          },
          "preview": "boolean inertiaGlobal, strengthGlobal, dampingGlobal, massGlobal, windGlobal, gravityGlobal, mixGlobal;",
          "children": []
        },
        {
          "name": "massGlobal",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 104
            }
          },
          "preview": "boolean inertiaGlobal, strengthGlobal, dampingGlobal, massGlobal, windGlobal, gravityGlobal, mixGlobal;",
          "children": []
        },
        {
          "name": "windGlobal",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 104
            }
          },
          "preview": "boolean inertiaGlobal, strengthGlobal, dampingGlobal, massGlobal, windGlobal, gravityGlobal, mixGlobal;",
          "children": []
        },
        {
          "name": "gravityGlobal",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 104
            }
          },
          "preview": "boolean inertiaGlobal, strengthGlobal, dampingGlobal, massGlobal, windGlobal, gravityGlobal, mixGlobal;",
          "children": []
        },
        {
          "name": "mixGlobal",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 104
            }
          },
          "preview": "boolean inertiaGlobal, strengthGlobal, dampingGlobal, massGlobal, windGlobal, gravityGlobal, mixGlobal;",
          "children": []
        },
        {
          "name": "PhysicsConstraintData(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 2
            }
          },
          "preview": "public PhysicsConstraintData (String name) {",
          "children": []
        },
        {
          "name": "create(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 2
            }
          },
          "preview": "public PhysicsConstraint create (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getBone()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public BoneData getBone () {",
          "documentation": "The bone constrained by this physics constraint.",
          "children": []
        },
        {
          "name": "setBone(BoneData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 2
            }
          },
          "preview": "public void setBone (BoneData bone) {",
          "children": []
        },
        {
          "name": "getStep()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public float getStep () {",
          "children": []
        },
        {
          "name": "setStep(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 2
            }
          },
          "preview": "public void setStep (float step) {",
          "children": []
        },
        {
          "name": "getX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 2
            }
          },
          "preview": "public float getX () {",
          "children": []
        },
        {
          "name": "setX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 2
            }
          },
          "preview": "public void setX (float x) {",
          "children": []
        },
        {
          "name": "getY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 2
            }
          },
          "preview": "public float getY () {",
          "children": []
        },
        {
          "name": "setY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public void setY (float y) {",
          "children": []
        },
        {
          "name": "getRotate()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public float getRotate () {",
          "children": []
        },
        {
          "name": "setRotate(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public void setRotate (float rotate) {",
          "children": []
        },
        {
          "name": "getScaleX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public float getScaleX () {",
          "children": []
        },
        {
          "name": "setScaleX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public void setScaleX (float scaleX) {",
          "children": []
        },
        {
          "name": "getShearX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public float getShearX () {",
          "children": []
        },
        {
          "name": "setShearX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public void setShearX (float shearX) {",
          "children": []
        },
        {
          "name": "getLimit()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public float getLimit () {",
          "children": []
        },
        {
          "name": "setLimit(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 2
            }
          },
          "preview": "public void setLimit (float limit) {",
          "children": []
        },
        {
          "name": "getInertiaGlobal()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 2
            }
          },
          "preview": "public boolean getInertiaGlobal () {",
          "children": []
        },
        {
          "name": "setInertiaGlobal(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 116,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 2
            }
          },
          "preview": "public void setInertiaGlobal (boolean inertiaGlobal) {",
          "children": []
        },
        {
          "name": "getStrengthGlobal()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 2
            }
          },
          "preview": "public boolean getStrengthGlobal () {",
          "children": []
        },
        {
          "name": "setStrengthGlobal(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 126,
              "character": 2
            }
          },
          "preview": "public void setStrengthGlobal (boolean strengthGlobal) {",
          "children": []
        },
        {
          "name": "getDampingGlobal()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 2
            }
          },
          "preview": "public boolean getDampingGlobal () {",
          "children": []
        },
        {
          "name": "setDampingGlobal(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 2
            }
          },
          "preview": "public void setDampingGlobal (boolean dampingGlobal) {",
          "children": []
        },
        {
          "name": "getMassGlobal()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 138,
              "character": 2
            }
          },
          "preview": "public boolean getMassGlobal () {",
          "children": []
        },
        {
          "name": "setMassGlobal(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 140,
              "character": 0
            },
            "end": {
              "line": 142,
              "character": 2
            }
          },
          "preview": "public void setMassGlobal (boolean massGlobal) {",
          "children": []
        },
        {
          "name": "getWindGlobal()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 144,
              "character": 0
            },
            "end": {
              "line": 146,
              "character": 2
            }
          },
          "preview": "public boolean getWindGlobal () {",
          "children": []
        },
        {
          "name": "setWindGlobal(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 148,
              "character": 0
            },
            "end": {
              "line": 150,
              "character": 2
            }
          },
          "preview": "public void setWindGlobal (boolean windGlobal) {",
          "children": []
        },
        {
          "name": "getGravityGlobal()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 152,
              "character": 0
            },
            "end": {
              "line": 154,
              "character": 2
            }
          },
          "preview": "public boolean getGravityGlobal () {",
          "children": []
        },
        {
          "name": "setGravityGlobal(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 156,
              "character": 0
            },
            "end": {
              "line": 158,
              "character": 2
            }
          },
          "preview": "public void setGravityGlobal (boolean gravityGlobal) {",
          "children": []
        },
        {
          "name": "getMixGlobal()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 160,
              "character": 0
            },
            "end": {
              "line": 162,
              "character": 2
            }
          },
          "preview": "public boolean getMixGlobal () {",
          "children": []
        },
        {
          "name": "setMixGlobal(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintData.java",
          "range": {
            "start": {
              "line": 164,
              "character": 0
            },
            "end": {
              "line": 166,
              "character": 2
            }
          },
          "preview": "public void setMixGlobal (boolean mixGlobal) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PhysicsConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
      "range": {
        "start": {
          "line": 32,
          "character": 0
        },
        "end": {
          "line": 101,
          "character": 1
        }
      },
      "preview": "public class PhysicsConstraintPose implements Pose<PhysicsConstraintPose>",
      "documentation": "Stores a pose for a physics constraint.",
      "supertypes": [
        {
          "name": "Pose",
          "typeArguments": [
            "PhysicsConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "inertia",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 67
            }
          },
          "preview": "float inertia, strength, damping, massInverse, wind, gravity, mix;",
          "children": []
        },
        {
          "name": "strength",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 67
            }
          },
          "preview": "float inertia, strength, damping, massInverse, wind, gravity, mix;",
          "children": []
        },
        {
          "name": "damping",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 67
            }
          },
          "preview": "float inertia, strength, damping, massInverse, wind, gravity, mix;",
          "children": []
        },
        {
          "name": "massInverse",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 67
            }
          },
          "preview": "float inertia, strength, damping, massInverse, wind, gravity, mix;",
          "children": []
        },
        {
          "name": "wind",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 67
            }
          },
          "preview": "float inertia, strength, damping, massInverse, wind, gravity, mix;",
          "children": []
        },
        {
          "name": "gravity",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 67
            }
          },
          "preview": "float inertia, strength, damping, massInverse, wind, gravity, mix;",
          "children": []
        },
        {
          "name": "mix",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 67
            }
          },
          "preview": "float inertia, strength, damping, massInverse, wind, gravity, mix;",
          "children": []
        },
        {
          "name": "set(PhysicsConstraintPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 2
            }
          },
          "preview": "public void set (PhysicsConstraintPose pose) {",
          "children": []
        },
        {
          "name": "getInertia()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 2
            }
          },
          "preview": "public float getInertia () {",
          "children": []
        },
        {
          "name": "setInertia(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "public void setInertia (float inertia) {",
          "children": []
        },
        {
          "name": "getStrength()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "public float getStrength () {",
          "children": []
        },
        {
          "name": "setStrength(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 2
            }
          },
          "preview": "public void setStrength (float strength) {",
          "children": []
        },
        {
          "name": "getDamping()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 2
            }
          },
          "preview": "public float getDamping () {",
          "children": []
        },
        {
          "name": "setDamping(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 2
            }
          },
          "preview": "public void setDamping (float damping) {",
          "children": []
        },
        {
          "name": "getMassInverse()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 2
            }
          },
          "preview": "public float getMassInverse () {",
          "children": []
        },
        {
          "name": "setMassInverse(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 2
            }
          },
          "preview": "public void setMassInverse (float massInverse) {",
          "children": []
        },
        {
          "name": "getWind()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 2
            }
          },
          "preview": "public float getWind () {",
          "children": []
        },
        {
          "name": "setWind(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 2
            }
          },
          "preview": "public void setWind (float wind) {",
          "children": []
        },
        {
          "name": "getGravity()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 2
            }
          },
          "preview": "public float getGravity () {",
          "children": []
        },
        {
          "name": "setGravity(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 2
            }
          },
          "preview": "public void setGravity (float gravity) {",
          "children": []
        },
        {
          "name": "getMix()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 2
            }
          },
          "preview": "public float getMix () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained poses.",
          "children": []
        },
        {
          "name": "setMix(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PhysicsConstraintPose.java",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 2
            }
          },
          "preview": "public void setMix (float mix) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Pose.java",
      "range": {
        "start": {
          "line": 1,
          "character": 0
        },
        "end": {
          "line": 1,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;"
    },
    {
      "name": "Pose",
      "kind": "interface",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Pose.java",
      "range": {
        "start": {
          "line": 3,
          "character": 0
        },
        "end": {
          "line": 5,
          "character": 1
        }
      },
      "preview": "public interface Pose<P>",
      "typeParameters": [
        "P"
      ],
      "children": [
        {
          "name": "set(P)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Pose.java",
          "range": {
            "start": {
              "line": 4,
              "character": 0
            },
            "end": {
              "line": 4,
              "character": 26
            }
          },
          "preview": "public void set (P pose);",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
      "range": {
        "start": {
          "line": 1,
          "character": 0
        },
        "end": {
          "line": 1,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;"
    },
    {
      "name": "Posed",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
      "range": {
        "start": {
          "line": 3,
          "character": 0
        },
        "end": {
          "line": 53,
          "character": 1
        }
      },
      "preview": "abstract public class Posed< D extends PosedData<P>, P extends Pose, A extends P>",
      "typeParameters": [
        "D",
        "P",
        "A"
      ],
      "children": [
        {
          "name": "data",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 8,
              "character": 0
            },
            "end": {
              "line": 8,
              "character": 14
            }
          },
          "preview": "final D data;",
          "children": []
        },
        {
          "name": "pose",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 9,
              "character": 0
            },
            "end": {
              "line": 9,
              "character": 14
            }
          },
          "preview": "final A pose;",
          "children": []
        },
        {
          "name": "constrained",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 10,
              "character": 0
            },
            "end": {
              "line": 10,
              "character": 21
            }
          },
          "preview": "final A constrained;",
          "children": []
        },
        {
          "name": "applied",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 11,
              "character": 0
            },
            "end": {
              "line": 11,
              "character": 11
            }
          },
          "preview": "A applied;",
          "children": []
        },
        {
          "name": "Posed(D, A, A)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 13,
              "character": 0
            },
            "end": {
              "line": 19,
              "character": 2
            }
          },
          "preview": "public Posed (D data, A pose, A constrained) {",
          "children": []
        },
        {
          "name": "setupPose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 21,
              "character": 0
            },
            "end": {
              "line": 23,
              "character": 2
            }
          },
          "preview": "public void setupPose () {",
          "children": []
        },
        {
          "name": "getData()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 26,
              "character": 0
            },
            "end": {
              "line": 28,
              "character": 2
            }
          },
          "preview": "public D getData () {",
          "documentation": "The constraint's setup pose data.",
          "children": []
        },
        {
          "name": "getPose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 30,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 2
            }
          },
          "preview": "public P getPose () {",
          "children": []
        },
        {
          "name": "getAppliedPose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 34,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 2
            }
          },
          "preview": "public A getAppliedPose () {",
          "children": []
        },
        {
          "name": "pose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 2
            }
          },
          "preview": "void pose () { // Port: usePose",
          "children": []
        },
        {
          "name": "constrained()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 2
            }
          },
          "preview": "void constrained () { // Port: useConstrained",
          "children": []
        },
        {
          "name": "reset()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 2
            }
          },
          "preview": "void reset () { // Port: resetConstrained",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Posed.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedActive.java",
      "range": {
        "start": {
          "line": 1,
          "character": 0
        },
        "end": {
          "line": 1,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;"
    },
    {
      "name": "PosedActive",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedActive.java",
      "range": {
        "start": {
          "line": 3,
          "character": 0
        },
        "end": {
          "line": 26,
          "character": 1
        }
      },
      "preview": "abstract public class PosedActive< D extends PosedData<P>, P extends Pose, A extends P> extends Posed<D, P, A>",
      "typeParameters": [
        "D",
        "P",
        "A"
      ],
      "supertypes": [
        {
          "name": "Posed",
          "typeArguments": [
            "D",
            "P",
            "A"
          ]
        }
      ],
      "children": [
        {
          "name": "active",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedActive.java",
          "range": {
            "start": {
              "line": 9,
              "character": 0
            },
            "end": {
              "line": 9,
              "character": 16
            }
          },
          "preview": "boolean active;",
          "children": []
        },
        {
          "name": "PosedActive(D, A, A)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedActive.java",
          "range": {
            "start": {
              "line": 11,
              "character": 0
            },
            "end": {
              "line": 14,
              "character": 2
            }
          },
          "preview": "public PosedActive (D data, A pose, A constrained) {",
          "children": []
        },
        {
          "name": "isActive()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedActive.java",
          "range": {
            "start": {
              "line": 23,
              "character": 0
            },
            "end": {
              "line": 25,
              "character": 2
            }
          },
          "preview": "public boolean isActive () {",
          "documentation": "Returns false when this constraint won't be updated by\n{@link Skeleton#updateWorldTransform(com.esotericsoftware.spine.Physics)} because a skin is required and the\n{@link Skeleton#getSkin() active skin} does not contain this item.\n@see Skin#getBones()\n@see Skin#getConstraints()\n@see PosedData#getSkinRequired()\n@see Skeleton#updateCache()",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PosedData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
      "range": {
        "start": {
          "line": 32,
          "character": 0
        },
        "end": {
          "line": 67,
          "character": 1
        }
      },
      "preview": "abstract public class PosedData<P extends Pose>",
      "documentation": "The base class for all constrained datas.",
      "typeParameters": [
        "P"
      ],
      "children": [
        {
          "name": "name",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 19
            }
          },
          "preview": "final String name;",
          "children": []
        },
        {
          "name": "setup",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 34,
              "character": 0
            },
            "end": {
              "line": 34,
              "character": 15
            }
          },
          "preview": "final P setup;",
          "children": []
        },
        {
          "name": "skinRequired",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 22
            }
          },
          "preview": "boolean skinRequired;",
          "children": []
        },
        {
          "name": "PosedData(String, P)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 2
            }
          },
          "preview": "public PosedData (String name, P setup) {",
          "children": []
        },
        {
          "name": "getName()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "public String getName () {",
          "documentation": "The constraint's name, which is unique across all constraints in the skeleton of the same type.",
          "children": []
        },
        {
          "name": "getSetupPose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public P getSetupPose () {",
          "children": []
        },
        {
          "name": "getSkinRequired()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public boolean getSkinRequired () {",
          "documentation": "When true, {@link Skeleton#updateWorldTransform(Physics)} only updates this constraint if the {@link Skeleton#getSkin()}\ncontains this constraint.\n<p>\nSee {@link Skin#getConstraints()}.",
          "children": []
        },
        {
          "name": "setSkinRequired(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 2
            }
          },
          "preview": "public void setSkinRequired (boolean skinRequired) {",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/PosedData.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Skeleton",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 671,
          "character": 1
        }
      },
      "preview": "public class Skeleton",
      "documentation": "Stores the current pose for a skeleton.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-runtime-architecture#Instance-objects\">Instance objects</a> in the Spine\nRuntimes Guide.",
      "children": [
        {
          "name": "quadTriangles",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 65
            }
          },
          "preview": "static private final short[] quadTriangles = {0, 1, 2, 2, 3, 0};",
          "children": []
        },
        {
          "name": "data",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 25
            }
          },
          "preview": "final SkeletonData data;",
          "children": []
        },
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 25
            }
          },
          "preview": "final Array<Bone> bones;",
          "children": []
        },
        {
          "name": "slots",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 25
            }
          },
          "preview": "final Array<Slot> slots;",
          "children": []
        },
        {
          "name": "drawOrder",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 23
            }
          },
          "preview": "Array<Slot> drawOrder;",
          "children": []
        },
        {
          "name": "constraints",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 37
            }
          },
          "preview": "final Array<Constraint> constraints;",
          "children": []
        },
        {
          "name": "physics",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 40
            }
          },
          "preview": "final Array<PhysicsConstraint> physics;",
          "children": []
        },
        {
          "name": "updateCache",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 39
            }
          },
          "preview": "final Array updateCache = new Array();",
          "children": []
        },
        {
          "name": "resetCache",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 67
            }
          },
          "preview": "final Array<Posed> resetCache = new Array(true, 16, Posed[]::new);",
          "children": []
        },
        {
          "name": "skin",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 17
            }
          },
          "preview": "@Null Skin skin;",
          "children": []
        },
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 19
            }
          },
          "preview": "final Color color;",
          "children": []
        },
        {
          "name": "x",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "y",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "scaleX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "scaleY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "time",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "windX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "windY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "gravityX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "gravityY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 92
            }
          },
          "preview": "float x, y, scaleX = 1, scaleY = 1, time, windX = 1, windY = 0, gravityX = 0, gravityY = 1;",
          "children": []
        },
        {
          "name": "update",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 12
            }
          },
          "preview": "int update;",
          "children": []
        },
        {
          "name": "Skeleton(SkeletonData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public Skeleton (SkeletonData data) {",
          "children": []
        },
        {
          "name": "Skeleton(Skeleton)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 148,
              "character": 2
            }
          },
          "preview": "public Skeleton (Skeleton skeleton) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "updateCache()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 152,
              "character": 0
            },
            "end": {
              "line": 198,
              "character": 2
            }
          },
          "preview": "public void updateCache () {",
          "documentation": "Caches information about bones and constraints. Must be called if the {@link #getSkin()} is modified or if bones,\nconstraints, or weighted path attachments are added or removed.",
          "children": []
        },
        {
          "name": "constrained(Posed)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 200,
              "character": 0
            },
            "end": {
              "line": 205,
              "character": 2
            }
          },
          "preview": "void constrained (Posed object) {",
          "children": []
        },
        {
          "name": "sortBone(Bone)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 207,
              "character": 0
            },
            "end": {
              "line": 213,
              "character": 2
            }
          },
          "preview": "void sortBone (Bone bone) {",
          "children": []
        },
        {
          "name": "sortReset(Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 215,
              "character": 0
            },
            "end": {
              "line": 224,
              "character": 2
            }
          },
          "preview": "void sortReset (Array<Bone> bones) {",
          "children": []
        },
        {
          "name": "updateWorldTransform(Physics)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 230,
              "character": 0
            },
            "end": {
              "line": 240,
              "character": 2
            }
          },
          "preview": "public void updateWorldTransform (Physics physics) {",
          "documentation": "Updates the world transform for each bone and applies all constraints.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.",
          "children": []
        },
        {
          "name": "updateWorldTransform(Physics, BonePose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 247,
              "character": 0
            },
            "end": {
              "line": 279,
              "character": 2
            }
          },
          "preview": "public void updateWorldTransform (Physics physics, BonePose parent) { // Do not port.",
          "documentation": "Temporarily sets the root bone as a child of the specified bone, then updates the world transform for each bone and applies\nall constraints.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.",
          "children": []
        },
        {
          "name": "setupPose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 282,
              "character": 0
            },
            "end": {
              "line": 285,
              "character": 2
            }
          },
          "preview": "public void setupPose () {",
          "documentation": "Sets the bones, constraints, slots, and draw order to their setup pose values.",
          "children": []
        },
        {
          "name": "setupPoseBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 288,
              "character": 0
            },
            "end": {
              "line": 296,
              "character": 2
            }
          },
          "preview": "public void setupPoseBones () {",
          "documentation": "Sets the bones and constraints to their setup pose values.",
          "children": []
        },
        {
          "name": "setupPoseSlots()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 299,
              "character": 0
            },
            "end": {
              "line": 305,
              "character": 2
            }
          },
          "preview": "public void setupPoseSlots () {",
          "documentation": "Sets the slots and draw order to their setup pose values.",
          "children": []
        },
        {
          "name": "getData()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 308,
              "character": 0
            },
            "end": {
              "line": 310,
              "character": 2
            }
          },
          "preview": "public SkeletonData getData () {",
          "documentation": "The skeleton's setup pose data.",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 313,
              "character": 0
            },
            "end": {
              "line": 315,
              "character": 2
            }
          },
          "preview": "public Array<Bone> getBones () {",
          "documentation": "The skeleton's bones, sorted parent first. The root bone is always the first bone.",
          "children": []
        },
        {
          "name": "getUpdateCache()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 318,
              "character": 0
            },
            "end": {
              "line": 320,
              "character": 2
            }
          },
          "preview": "public Array<Update> getUpdateCache () {",
          "documentation": "The list of bones and constraints, sorted in the order they should be updated, as computed by {@link #updateCache()}.",
          "children": []
        },
        {
          "name": "getRootBone()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 323,
              "character": 0
            },
            "end": {
              "line": 325,
              "character": 2
            }
          },
          "preview": "public Bone getRootBone () {",
          "documentation": "Returns the root bone, or null if the skeleton has no bones.",
          "children": []
        },
        {
          "name": "findBone(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 329,
              "character": 0
            },
            "end": {
              "line": 335,
              "character": 2
            }
          },
          "preview": "public @Null Bone findBone (String boneName) {",
          "documentation": "Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\nrepeatedly.",
          "children": []
        },
        {
          "name": "getSlots()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 338,
              "character": 0
            },
            "end": {
              "line": 340,
              "character": 2
            }
          },
          "preview": "public Array<Slot> getSlots () {",
          "documentation": "The skeleton's slots.",
          "children": []
        },
        {
          "name": "findSlot(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 344,
              "character": 0
            },
            "end": {
              "line": 350,
              "character": 2
            }
          },
          "preview": "public @Null Slot findSlot (String slotName) {",
          "documentation": "Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\nrepeatedly.",
          "children": []
        },
        {
          "name": "getDrawOrder()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 353,
              "character": 0
            },
            "end": {
              "line": 355,
              "character": 2
            }
          },
          "preview": "public Array<Slot> getDrawOrder () {",
          "documentation": "The skeleton's slots in the order they should be drawn. The returned array may be modified to change the draw order.",
          "children": []
        },
        {
          "name": "setDrawOrder(Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 357,
              "character": 0
            },
            "end": {
              "line": 360,
              "character": 2
            }
          },
          "preview": "public void setDrawOrder (Array<Slot> drawOrder) {",
          "children": []
        },
        {
          "name": "getSkin()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 363,
              "character": 0
            },
            "end": {
              "line": 365,
              "character": 2
            }
          },
          "preview": "public @Null Skin getSkin () {",
          "documentation": "The skeleton's current skin.",
          "children": []
        },
        {
          "name": "setSkin(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 370,
              "character": 0
            },
            "end": {
              "line": 374,
              "character": 2
            }
          },
          "preview": "public void setSkin (String skinName) {",
          "documentation": "Sets a skin by name.\n<p>\nSee {@link #setSkin(Skin)}.",
          "children": []
        },
        {
          "name": "setSkin(Skin)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 385,
              "character": 0
            },
            "end": {
              "line": 404,
              "character": 2
            }
          },
          "preview": "public void setSkin (@Null Skin newSkin) {",
          "documentation": "Sets the skin used to look up attachments before looking in the {@link SkeletonData#getDefaultSkin() default skin}. If the\nskin is changed, {@link #updateCache()} is called.\n<p>\nAttachments from the new skin are attached if the corresponding attachment from the old skin was attached. If there was no\nold skin, each slot's setup mode attachment is attached from the new skin.\n<p>\nAfter changing the skin, the visible attachments can be reset to those attached in the setup pose by calling\n{@link #setupPoseSlots()}. Also, often {@link AnimationState#apply(Skeleton)} is called before the next time the skeleton is\nrendered to allow any attachment keys in the current animation(s) to hide or show attachments from the new skin.",
          "children": []
        },
        {
          "name": "getAttachment(String, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 410,
              "character": 0
            },
            "end": {
              "line": 414,
              "character": 2
            }
          },
          "preview": "public @Null Attachment getAttachment (String slotName, String attachmentName) {",
          "documentation": "Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot name and attachment\nname.\n<p>\nSee {@link #getAttachment(int, String)}.",
          "children": []
        },
        {
          "name": "getAttachment(int, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 420,
              "character": 0
            },
            "end": {
              "line": 428,
              "character": 2
            }
          },
          "preview": "public @Null Attachment getAttachment (int slotIndex, String attachmentName) {",
          "documentation": "Finds an attachment by looking in the {@link #skin} and {@link SkeletonData#defaultSkin} using the slot index and\nattachment name. First the skin is checked and if the attachment was not found, the default skin is checked.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-runtime-skins\">Runtime skins</a> in the Spine Runtimes Guide.",
          "children": []
        },
        {
          "name": "setAttachment(String, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 433,
              "character": 0
            },
            "end": {
              "line": 444,
              "character": 2
            }
          },
          "preview": "public void setAttachment (String slotName, @Null String attachmentName) {",
          "documentation": "A convenience method to set an attachment by finding the slot with {@link #findSlot(String)}, finding the attachment with\n{@link #getAttachment(int, String)}, then setting the slot's {@link SlotPose#attachment}.\n@param attachmentName May be null to clear the slot's attachment.",
          "children": []
        },
        {
          "name": "getConstraints()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 447,
              "character": 0
            },
            "end": {
              "line": 449,
              "character": 2
            }
          },
          "preview": "public Array<Constraint> getConstraints () {",
          "documentation": "The skeleton's constraints.",
          "children": []
        },
        {
          "name": "getPhysicsConstraints()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 451,
              "character": 0
            },
            "end": {
              "line": 453,
              "character": 2
            }
          },
          "preview": "public Array<PhysicsConstraint> getPhysicsConstraints () {",
          "children": []
        },
        {
          "name": "findConstraint(String, Class",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 455,
              "character": 0
            },
            "end": {
              "line": 464,
              "character": 2
            }
          },
          "preview": "public @Null <T extends Constraint> T findConstraint (String constraintName, Class<T> type) {",
          "children": []
        },
        {
          "name": "getBounds(Vector2, Vector2, FloatArray)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 470,
              "character": 0
            },
            "end": {
              "line": 472,
              "character": 2
            }
          },
          "preview": "public void getBounds (Vector2 offset, Vector2 size, FloatArray temp) {",
          "documentation": "Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose.\n@param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n@param size An output value, the width and height of the AABB.\n@param temp Working memory to temporarily store attachments' computed world vertices.",
          "children": []
        },
        {
          "name": "getBounds(Vector2, Vector2, FloatArray, SkeletonClipping)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 480,
              "character": 0
            },
            "end": {
              "line": 528,
              "character": 2
            }
          },
          "preview": "public void getBounds (Vector2 offset, Vector2 size, FloatArray temp, SkeletonClipping clipper) {",
          "documentation": "Returns the axis aligned bounding box (AABB) of the region and mesh attachments for the current pose. Optionally applies\nclipping.\n@param offset An output value, the distance from the skeleton origin to the bottom left corner of the AABB.\n@param size An output value, the width and height of the AABB.\n@param temp Working memory to temporarily store attachments' computed world vertices.\n@param clipper {@link SkeletonClipping} to use. If <code>null</code>, no clipping is applied.",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 531,
              "character": 0
            },
            "end": {
              "line": 533,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "documentation": "The color to tint all the skeleton's attachments.",
          "children": []
        },
        {
          "name": "setColor(Color)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 536,
              "character": 0
            },
            "end": {
              "line": 539,
              "character": 2
            }
          },
          "preview": "public void setColor (Color color) {",
          "documentation": "A convenience method for setting the skeleton color. The color can also be set by modifying {@link #getColor()}.",
          "children": []
        },
        {
          "name": "setColor(float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 542,
              "character": 0
            },
            "end": {
              "line": 544,
              "character": 2
            }
          },
          "preview": "public void setColor (float r, float g, float b, float a) {",
          "documentation": "A convenience method for setting the skeleton color. The color can also be set by modifying {@link #getColor()}.",
          "children": []
        },
        {
          "name": "getScaleX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 549,
              "character": 0
            },
            "end": {
              "line": 551,
              "character": 2
            }
          },
          "preview": "public float getScaleX () {",
          "documentation": "Scales the entire skeleton on the X axis.\n<p>\nBones that do not inherit scale are still affected by this property.",
          "children": []
        },
        {
          "name": "setScaleX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 553,
              "character": 0
            },
            "end": {
              "line": 555,
              "character": 2
            }
          },
          "preview": "public void setScaleX (float scaleX) {",
          "children": []
        },
        {
          "name": "getScaleY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 560,
              "character": 0
            },
            "end": {
              "line": 562,
              "character": 2
            }
          },
          "preview": "public float getScaleY () {",
          "documentation": "Scales the entire skeleton on the Y axis.\n<p>\nBones that do not inherit scale are still affected by this property.",
          "children": []
        },
        {
          "name": "setScaleY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 564,
              "character": 0
            },
            "end": {
              "line": 566,
              "character": 2
            }
          },
          "preview": "public void setScaleY (float scaleY) {",
          "children": []
        },
        {
          "name": "setScale(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 571,
              "character": 0
            },
            "end": {
              "line": 574,
              "character": 2
            }
          },
          "preview": "public void setScale (float scaleX, float scaleY) {",
          "documentation": "Scales the entire skeleton on the X and Y axes.\n<p>\nBones that do not inherit scale are still affected by this property.",
          "children": []
        },
        {
          "name": "getX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 579,
              "character": 0
            },
            "end": {
              "line": 581,
              "character": 2
            }
          },
          "preview": "public float getX () {",
          "documentation": "Sets the skeleton X position, which is added to the root bone worldX position.\n<p>\nBones that do not inherit translation are still affected by this property.",
          "children": []
        },
        {
          "name": "setX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 583,
              "character": 0
            },
            "end": {
              "line": 585,
              "character": 2
            }
          },
          "preview": "public void setX (float x) {",
          "children": []
        },
        {
          "name": "getY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 590,
              "character": 0
            },
            "end": {
              "line": 592,
              "character": 2
            }
          },
          "preview": "public float getY () {",
          "documentation": "Sets the skeleton Y position, which is added to the root bone worldY position.\n<p>\nBones that do not inherit translation are still affected by this property.",
          "children": []
        },
        {
          "name": "setY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 594,
              "character": 0
            },
            "end": {
              "line": 596,
              "character": 2
            }
          },
          "preview": "public void setY (float y) {",
          "children": []
        },
        {
          "name": "setPosition(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 601,
              "character": 0
            },
            "end": {
              "line": 604,
              "character": 2
            }
          },
          "preview": "public void setPosition (float x, float y) {",
          "documentation": "Sets the skeleton X and Y position, which is added to the root bone worldX and worldY position.\n<p>\nBones that do not inherit translation are still affected by this property.",
          "children": []
        },
        {
          "name": "getWindX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 606,
              "character": 0
            },
            "end": {
              "line": 608,
              "character": 2
            }
          },
          "preview": "public float getWindX () {",
          "children": []
        },
        {
          "name": "setWindX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 610,
              "character": 0
            },
            "end": {
              "line": 612,
              "character": 2
            }
          },
          "preview": "public void setWindX (float windX) {",
          "children": []
        },
        {
          "name": "getWindY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 614,
              "character": 0
            },
            "end": {
              "line": 616,
              "character": 2
            }
          },
          "preview": "public float getWindY () {",
          "children": []
        },
        {
          "name": "setWindY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 618,
              "character": 0
            },
            "end": {
              "line": 620,
              "character": 2
            }
          },
          "preview": "public void setWindY (float windY) {",
          "children": []
        },
        {
          "name": "getGravityX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 622,
              "character": 0
            },
            "end": {
              "line": 624,
              "character": 2
            }
          },
          "preview": "public float getGravityX () {",
          "children": []
        },
        {
          "name": "setGravityX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 626,
              "character": 0
            },
            "end": {
              "line": 628,
              "character": 2
            }
          },
          "preview": "public void setGravityX (float gravityX) {",
          "children": []
        },
        {
          "name": "getGravityY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 630,
              "character": 0
            },
            "end": {
              "line": 632,
              "character": 2
            }
          },
          "preview": "public float getGravityY () {",
          "children": []
        },
        {
          "name": "setGravityY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 634,
              "character": 0
            },
            "end": {
              "line": 636,
              "character": 2
            }
          },
          "preview": "public void setGravityY (float gravityY) {",
          "children": []
        },
        {
          "name": "physicsTranslate(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 639,
              "character": 0
            },
            "end": {
              "line": 643,
              "character": 2
            }
          },
          "preview": "public void physicsTranslate (float x, float y) {",
          "documentation": "Calls {@link PhysicsConstraint#translate(float, float)} for each physics constraint.",
          "children": []
        },
        {
          "name": "physicsRotate(float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 646,
              "character": 0
            },
            "end": {
              "line": 650,
              "character": 2
            }
          },
          "preview": "public void physicsRotate (float x, float y, float degrees) {",
          "documentation": "Calls {@link PhysicsConstraint#rotate(float, float, float)} for each physics constraint.",
          "children": []
        },
        {
          "name": "getTime()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 655,
              "character": 0
            },
            "end": {
              "line": 657,
              "character": 2
            }
          },
          "preview": "public float getTime () {",
          "documentation": "Returns the skeleton's time. This is used for time-based manipulations, such as {@link PhysicsConstraint}.\n<p>\nSee {@link #update(float)}.",
          "children": []
        },
        {
          "name": "setTime(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 659,
              "character": 0
            },
            "end": {
              "line": 661,
              "character": 2
            }
          },
          "preview": "public void setTime (float time) {",
          "children": []
        },
        {
          "name": "update(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 664,
              "character": 0
            },
            "end": {
              "line": 666,
              "character": 2
            }
          },
          "preview": "public void update (float delta) {",
          "documentation": "Increments the skeleton's {@link #time}.",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skeleton.java",
          "range": {
            "start": {
              "line": 668,
              "character": 0
            },
            "end": {
              "line": 670,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonBinary",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
      "range": {
        "start": {
          "line": 121,
          "character": 0
        },
        "end": {
          "line": 1343,
          "character": 1
        }
      },
      "preview": "public class SkeletonBinary extends SkeletonLoader",
      "documentation": "Loads skeleton data in the Spine binary format.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-binary-format\">Spine binary format</a> and\n<a href=\"https://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data\">JSON and binary data</a> in the Spine\nRuntimes Guide.",
      "supertypes": [
        {
          "name": "SkeletonLoader"
        }
      ],
      "children": [
        {
          "name": "BONE_ROTATE",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 41
            }
          },
          "preview": "static public final int BONE_ROTATE = 0;",
          "children": []
        },
        {
          "name": "BONE_TRANSLATE",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 44
            }
          },
          "preview": "static public final int BONE_TRANSLATE = 1;",
          "children": []
        },
        {
          "name": "BONE_TRANSLATEX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 45
            }
          },
          "preview": "static public final int BONE_TRANSLATEX = 2;",
          "children": []
        },
        {
          "name": "BONE_TRANSLATEY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 125,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 45
            }
          },
          "preview": "static public final int BONE_TRANSLATEY = 3;",
          "children": []
        },
        {
          "name": "BONE_SCALE",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 126,
              "character": 0
            },
            "end": {
              "line": 126,
              "character": 40
            }
          },
          "preview": "static public final int BONE_SCALE = 4;",
          "children": []
        },
        {
          "name": "BONE_SCALEX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 41
            }
          },
          "preview": "static public final int BONE_SCALEX = 5;",
          "children": []
        },
        {
          "name": "BONE_SCALEY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 41
            }
          },
          "preview": "static public final int BONE_SCALEY = 6;",
          "children": []
        },
        {
          "name": "BONE_SHEAR",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 40
            }
          },
          "preview": "static public final int BONE_SHEAR = 7;",
          "children": []
        },
        {
          "name": "BONE_SHEARX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 41
            }
          },
          "preview": "static public final int BONE_SHEARX = 8;",
          "children": []
        },
        {
          "name": "BONE_SHEARY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 41
            }
          },
          "preview": "static public final int BONE_SHEARY = 9;",
          "children": []
        },
        {
          "name": "BONE_INHERIT",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 43
            }
          },
          "preview": "static public final int BONE_INHERIT = 10;",
          "children": []
        },
        {
          "name": "SLOT_ATTACHMENT",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 45
            }
          },
          "preview": "static public final int SLOT_ATTACHMENT = 0;",
          "children": []
        },
        {
          "name": "SLOT_RGBA",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 135,
              "character": 39
            }
          },
          "preview": "static public final int SLOT_RGBA = 1;",
          "children": []
        },
        {
          "name": "SLOT_RGB",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 38
            }
          },
          "preview": "static public final int SLOT_RGB = 2;",
          "children": []
        },
        {
          "name": "SLOT_RGBA2",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 137,
              "character": 0
            },
            "end": {
              "line": 137,
              "character": 40
            }
          },
          "preview": "static public final int SLOT_RGBA2 = 3;",
          "children": []
        },
        {
          "name": "SLOT_RGB2",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 138,
              "character": 0
            },
            "end": {
              "line": 138,
              "character": 39
            }
          },
          "preview": "static public final int SLOT_RGB2 = 4;",
          "children": []
        },
        {
          "name": "SLOT_ALPHA",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 139,
              "character": 0
            },
            "end": {
              "line": 139,
              "character": 40
            }
          },
          "preview": "static public final int SLOT_ALPHA = 5;",
          "children": []
        },
        {
          "name": "CONSTRAINT_IK",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 141,
              "character": 0
            },
            "end": {
              "line": 141,
              "character": 43
            }
          },
          "preview": "static public final int CONSTRAINT_IK = 0;",
          "children": []
        },
        {
          "name": "CONSTRAINT_PATH",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 142,
              "character": 0
            },
            "end": {
              "line": 142,
              "character": 45
            }
          },
          "preview": "static public final int CONSTRAINT_PATH = 1;",
          "children": []
        },
        {
          "name": "CONSTRAINT_TRANSFORM",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 143,
              "character": 0
            },
            "end": {
              "line": 143,
              "character": 50
            }
          },
          "preview": "static public final int CONSTRAINT_TRANSFORM = 2;",
          "children": []
        },
        {
          "name": "CONSTRAINT_PHYSICS",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 144,
              "character": 0
            },
            "end": {
              "line": 144,
              "character": 48
            }
          },
          "preview": "static public final int CONSTRAINT_PHYSICS = 3;",
          "children": []
        },
        {
          "name": "CONSTRAINT_SLIDER",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 145,
              "character": 0
            },
            "end": {
              "line": 145,
              "character": 47
            }
          },
          "preview": "static public final int CONSTRAINT_SLIDER = 4;",
          "children": []
        },
        {
          "name": "ATTACHMENT_DEFORM",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 147,
              "character": 0
            },
            "end": {
              "line": 147,
              "character": 47
            }
          },
          "preview": "static public final int ATTACHMENT_DEFORM = 0;",
          "children": []
        },
        {
          "name": "ATTACHMENT_SEQUENCE",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 148,
              "character": 0
            },
            "end": {
              "line": 148,
              "character": 49
            }
          },
          "preview": "static public final int ATTACHMENT_SEQUENCE = 1;",
          "children": []
        },
        {
          "name": "PATH_POSITION",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 150,
              "character": 0
            },
            "end": {
              "line": 150,
              "character": 43
            }
          },
          "preview": "static public final int PATH_POSITION = 0;",
          "children": []
        },
        {
          "name": "PATH_SPACING",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 151,
              "character": 0
            },
            "end": {
              "line": 151,
              "character": 42
            }
          },
          "preview": "static public final int PATH_SPACING = 1;",
          "children": []
        },
        {
          "name": "PATH_MIX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 152,
              "character": 0
            },
            "end": {
              "line": 152,
              "character": 38
            }
          },
          "preview": "static public final int PATH_MIX = 2;",
          "children": []
        },
        {
          "name": "PHYSICS_INERTIA",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 154,
              "character": 0
            },
            "end": {
              "line": 154,
              "character": 45
            }
          },
          "preview": "static public final int PHYSICS_INERTIA = 0;",
          "children": []
        },
        {
          "name": "PHYSICS_STRENGTH",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 46
            }
          },
          "preview": "static public final int PHYSICS_STRENGTH = 1;",
          "children": []
        },
        {
          "name": "PHYSICS_DAMPING",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 156,
              "character": 0
            },
            "end": {
              "line": 156,
              "character": 45
            }
          },
          "preview": "static public final int PHYSICS_DAMPING = 2;",
          "children": []
        },
        {
          "name": "PHYSICS_MASS",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 157,
              "character": 0
            },
            "end": {
              "line": 157,
              "character": 42
            }
          },
          "preview": "static public final int PHYSICS_MASS = 4;",
          "children": []
        },
        {
          "name": "PHYSICS_WIND",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 158,
              "character": 0
            },
            "end": {
              "line": 158,
              "character": 42
            }
          },
          "preview": "static public final int PHYSICS_WIND = 5;",
          "children": []
        },
        {
          "name": "PHYSICS_GRAVITY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 159,
              "character": 0
            },
            "end": {
              "line": 159,
              "character": 45
            }
          },
          "preview": "static public final int PHYSICS_GRAVITY = 6;",
          "children": []
        },
        {
          "name": "PHYSICS_MIX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 160,
              "character": 0
            },
            "end": {
              "line": 160,
              "character": 41
            }
          },
          "preview": "static public final int PHYSICS_MIX = 7;",
          "children": []
        },
        {
          "name": "PHYSICS_RESET",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 161,
              "character": 0
            },
            "end": {
              "line": 161,
              "character": 43
            }
          },
          "preview": "static public final int PHYSICS_RESET = 8;",
          "children": []
        },
        {
          "name": "SLIDER_TIME",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 163,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 41
            }
          },
          "preview": "static public final int SLIDER_TIME = 0;",
          "children": []
        },
        {
          "name": "SLIDER_MIX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 164,
              "character": 0
            },
            "end": {
              "line": 164,
              "character": 40
            }
          },
          "preview": "static public final int SLIDER_MIX = 1;",
          "children": []
        },
        {
          "name": "CURVE_LINEAR",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 166,
              "character": 0
            },
            "end": {
              "line": 166,
              "character": 42
            }
          },
          "preview": "static public final int CURVE_LINEAR = 0;",
          "children": []
        },
        {
          "name": "CURVE_STEPPED",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 167,
              "character": 0
            },
            "end": {
              "line": 167,
              "character": 43
            }
          },
          "preview": "static public final int CURVE_STEPPED = 1;",
          "children": []
        },
        {
          "name": "CURVE_BEZIER",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 168,
              "character": 0
            },
            "end": {
              "line": 168,
              "character": 42
            }
          },
          "preview": "static public final int CURVE_BEZIER = 2;",
          "children": []
        },
        {
          "name": "linkedMeshes",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 170,
              "character": 0
            },
            "end": {
              "line": 170,
              "character": 86
            }
          },
          "preview": "private final Array<LinkedMesh> linkedMeshes = new Array(true, 8, LinkedMesh[]::new);",
          "children": []
        },
        {
          "name": "SkeletonBinary(AttachmentLoader)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 172,
              "character": 0
            },
            "end": {
              "line": 174,
              "character": 2
            }
          },
          "preview": "public SkeletonBinary (AttachmentLoader attachmentLoader) {",
          "children": []
        },
        {
          "name": "SkeletonBinary(TextureAtlas)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 176,
              "character": 0
            },
            "end": {
              "line": 178,
              "character": 2
            }
          },
          "preview": "public SkeletonBinary (TextureAtlas atlas) {",
          "children": []
        },
        {
          "name": "readSkeletonData(FileHandle)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 180,
              "character": 0
            },
            "end": {
              "line": 189,
              "character": 2
            }
          },
          "preview": "public SkeletonData readSkeletonData (FileHandle file) {",
          "children": []
        },
        {
          "name": "readSkeletonData(InputStream)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 191,
              "character": 0
            },
            "end": {
              "line": 519,
              "character": 2
            }
          },
          "preview": "public SkeletonData readSkeletonData (InputStream dataInput) {",
          "children": []
        },
        {
          "name": "readSkin(SkeletonInput, SkeletonData, boolean, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 521,
              "character": 0
            },
            "end": {
              "line": 557,
              "character": 2
            }
          },
          "preview": "private @Null Skin readSkin (SkeletonInput input, SkeletonData skeletonData, boolean defaultSkin, boolean nonessential)",
          "children": []
        },
        {
          "name": "readAttachment(SkeletonInput, SkeletonData, Skin, int, String, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 559,
              "character": 0
            },
            "end": {
              "line": 717,
              "character": 2
            }
          },
          "preview": "private Attachment readAttachment (SkeletonInput input, SkeletonData skeletonData, Skin skin, int slotIndex,",
          "children": []
        },
        {
          "name": "readSequence(SkeletonInput)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 719,
              "character": 0
            },
            "end": {
              "line": 725,
              "character": 2
            }
          },
          "preview": "private Sequence readSequence (SkeletonInput input) throws IOException {",
          "children": []
        },
        {
          "name": "readVertices(SkeletonInput, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 727,
              "character": 0
            },
            "end": {
              "line": 751,
              "character": 2
            }
          },
          "preview": "private Vertices readVertices (SkeletonInput input, boolean weighted) throws IOException {",
          "children": []
        },
        {
          "name": "readFloatArray(SkeletonInput, int, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 753,
              "character": 0
            },
            "end": {
              "line": 763,
              "character": 2
            }
          },
          "preview": "private float[] readFloatArray (SkeletonInput input, int n, float scale) throws IOException {",
          "children": []
        },
        {
          "name": "readShortArray(SkeletonInput, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 765,
              "character": 0
            },
            "end": {
              "line": 770,
              "character": 2
            }
          },
          "preview": "private short[] readShortArray (SkeletonInput input, int n) throws IOException {",
          "children": []
        },
        {
          "name": "readAnimation(SkeletonInput, String, SkeletonData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 772,
              "character": 0
            },
            "end": {
              "line": 1226,
              "character": 2
            }
          },
          "preview": "private Animation readAnimation (SkeletonInput input, String name, SkeletonData skeletonData) throws IOException {",
          "children": []
        },
        {
          "name": "readTimeline(SkeletonInput, Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 1228,
              "character": 0
            },
            "end": {
              "line": 1243,
              "character": 2
            }
          },
          "preview": "private void readTimeline (SkeletonInput input, Array<Timeline> timelines, CurveTimeline1 timeline, float scale)",
          "children": []
        },
        {
          "name": "readTimeline(SkeletonInput, Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 1245,
              "character": 0
            },
            "end": {
              "line": 1264,
              "character": 2
            }
          },
          "preview": "private void readTimeline (SkeletonInput input, Array<Timeline> timelines, BoneTimeline2 timeline, float scale)",
          "children": []
        },
        {
          "name": "setBezier(SkeletonInput, CurveTimeline, int, int, int, float, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 1266,
              "character": 0
            },
            "end": {
              "line": 1270,
              "character": 2
            }
          },
          "preview": "void setBezier (SkeletonInput input, CurveTimeline timeline, int bezier, int frame, int value, float time1, float time2,",
          "children": []
        },
        {
          "name": "Vertices",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 1272,
              "character": 0
            },
            "end": {
              "line": 1276,
              "character": 2
            }
          },
          "preview": "static class Vertices",
          "children": [
            {
              "name": "length",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1273,
                  "character": 0
                },
                "end": {
                  "line": 1273,
                  "character": 13
                }
              },
              "preview": "int length;",
              "children": []
            },
            {
              "name": "bones",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1274,
                  "character": 0
                },
                "end": {
                  "line": 1274,
                  "character": 14
                }
              },
              "preview": "int[] bones;",
              "children": []
            },
            {
              "name": "vertices",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1275,
                  "character": 0
                },
                "end": {
                  "line": 1275,
                  "character": 19
                }
              },
              "preview": "float[] vertices;",
              "children": []
            }
          ]
        },
        {
          "name": "SkeletonInput",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 1278,
              "character": 0
            },
            "end": {
              "line": 1327,
              "character": 2
            }
          },
          "preview": "static class SkeletonInput extends DataInput",
          "supertypes": [
            {
              "name": "DataInput"
            }
          ],
          "children": [
            {
              "name": "chars",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1279,
                  "character": 0
                },
                "end": {
                  "line": 1279,
                  "character": 38
                }
              },
              "preview": "private char[] chars = new char[32];",
              "children": []
            },
            {
              "name": "strings",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1280,
                  "character": 0
                },
                "end": {
                  "line": 1280,
                  "character": 19
                }
              },
              "preview": "String[] strings;",
              "children": []
            },
            {
              "name": "SkeletonInput(InputStream)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1282,
                  "character": 0
                },
                "end": {
                  "line": 1284,
                  "character": 3
                }
              },
              "preview": "public SkeletonInput (InputStream input) {",
              "children": []
            },
            {
              "name": "SkeletonInput(FileHandle)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1286,
                  "character": 0
                },
                "end": {
                  "line": 1288,
                  "character": 3
                }
              },
              "preview": "public SkeletonInput (FileHandle file) {",
              "children": []
            },
            {
              "name": "readStringRef()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1290,
                  "character": 0
                },
                "end": {
                  "line": 1293,
                  "character": 3
                }
              },
              "preview": "public @Null String readStringRef () throws IOException {",
              "children": []
            },
            {
              "name": "readString()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1295,
                  "character": 0
                },
                "end": {
                  "line": 1326,
                  "character": 3
                }
              },
              "preview": "public String readString () throws IOException {",
              "children": []
            }
          ]
        },
        {
          "name": "LinkedMesh",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
          "range": {
            "start": {
              "line": 1329,
              "character": 0
            },
            "end": {
              "line": 1342,
              "character": 2
            }
          },
          "preview": "static class LinkedMesh",
          "children": [
            {
              "name": "parent",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1330,
                  "character": 0
                },
                "end": {
                  "line": 1330,
                  "character": 16
                }
              },
              "preview": "String parent;",
              "children": []
            },
            {
              "name": "skinIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1331,
                  "character": 0
                },
                "end": {
                  "line": 1331,
                  "character": 27
                }
              },
              "preview": "int skinIndex, slotIndex;",
              "children": []
            },
            {
              "name": "slotIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1331,
                  "character": 0
                },
                "end": {
                  "line": 1331,
                  "character": 27
                }
              },
              "preview": "int skinIndex, slotIndex;",
              "children": []
            },
            {
              "name": "mesh",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1332,
                  "character": 0
                },
                "end": {
                  "line": 1332,
                  "character": 22
                }
              },
              "preview": "MeshAttachment mesh;",
              "children": []
            },
            {
              "name": "inheritTimelines",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1333,
                  "character": 0
                },
                "end": {
                  "line": 1333,
                  "character": 27
                }
              },
              "preview": "boolean inheritTimelines;",
              "children": []
            },
            {
              "name": "LinkedMesh(MeshAttachment, int, int, String, boolean)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBinary.java",
              "range": {
                "start": {
                  "line": 1335,
                  "character": 0
                },
                "end": {
                  "line": 1341,
                  "character": 3
                }
              },
              "preview": "public LinkedMesh (MeshAttachment mesh, int skinIndex, int slotIndex, String parent, boolean inheritTimelines) {",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonBounds",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 252,
          "character": 1
        }
      },
      "preview": "public class SkeletonBounds",
      "documentation": "Collects each visible {@link BoundingBoxAttachment} and computes the world vertices for its polygon. The polygon vertices are\nprovided along with convenience methods for doing hit detection.",
      "children": [
        {
          "name": "minX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 38
            }
          },
          "preview": "private float minX, minY, maxX, maxY;",
          "children": []
        },
        {
          "name": "minY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 38
            }
          },
          "preview": "private float minX, minY, maxX, maxY;",
          "children": []
        },
        {
          "name": "maxX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 38
            }
          },
          "preview": "private float minX, minY, maxX, maxY;",
          "children": []
        },
        {
          "name": "maxY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 38
            }
          },
          "preview": "private float minX, minY, maxX, maxY;",
          "children": []
        },
        {
          "name": "boundingBoxes",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 103
            }
          },
          "preview": "private Array<BoundingBoxAttachment> boundingBoxes = new Array(true, 8, BoundingBoxAttachment[]::new);",
          "children": []
        },
        {
          "name": "polygons",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 76
            }
          },
          "preview": "private Array<FloatArray> polygons = new Array(true, 8, FloatArray[]::new);",
          "children": []
        },
        {
          "name": "polygonPool",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 3
            }
          },
          "preview": "private Pool<FloatArray> polygonPool = new Pool() {",
          "children": [
            {
              "name": "new Pool() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
              "range": {
                "start": {
                  "line": 45,
                  "character": 0
                },
                "end": {
                  "line": 49,
                  "character": 2
                }
              },
              "preview": "private Pool<FloatArray> polygonPool = new Pool()",
              "children": [
                {
                  "name": "newObject()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
                  "range": {
                    "start": {
                      "line": 46,
                      "character": 0
                    },
                    "end": {
                      "line": 48,
                      "character": 3
                    }
                  },
                  "preview": "protected Object newObject () {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "update(Skeleton, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 2
            }
          },
          "preview": "public void update (Skeleton skeleton, boolean updateAabb) {",
          "documentation": "Clears any previous polygons, finds all visible bounding box attachments, and computes the world vertices for each bounding\nbox's polygon.\n@param updateAabb If true, the axis aligned bounding box containing all the polygons is computed. If false, the\nSkeletonBounds AABB methods will always return true.",
          "children": []
        },
        {
          "name": "aabbCompute()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 2
            }
          },
          "preview": "private void aabbCompute () {",
          "children": []
        },
        {
          "name": "aabbContainsPoint(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 2
            }
          },
          "preview": "public boolean aabbContainsPoint (float x, float y) {",
          "documentation": "Returns true if the axis aligned bounding box contains the point.",
          "children": []
        },
        {
          "name": "aabbIntersectsSegment(float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 117,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 2
            }
          },
          "preview": "public boolean aabbIntersectsSegment (float x1, float y1, float x2, float y2) {",
          "documentation": "Returns true if the axis aligned bounding box intersects the line segment.",
          "children": []
        },
        {
          "name": "aabbIntersectsSkeleton(SkeletonBounds)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 137,
              "character": 0
            },
            "end": {
              "line": 140,
              "character": 2
            }
          },
          "preview": "public boolean aabbIntersectsSkeleton (SkeletonBounds bounds) {",
          "documentation": "Returns true if the axis aligned bounding box intersects the axis aligned bounding box of the specified bounds.",
          "children": []
        },
        {
          "name": "containsPoint(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 144,
              "character": 0
            },
            "end": {
              "line": 149,
              "character": 2
            }
          },
          "preview": "public @Null BoundingBoxAttachment containsPoint (float x, float y) {",
          "documentation": "Returns the first bounding box attachment that contains the point, or null. When doing many checks, it is usually more\nefficient to only call this method if {@link #aabbContainsPoint(float, float)} returns true.",
          "children": []
        },
        {
          "name": "containsPoint(FloatArray, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 152,
              "character": 0
            },
            "end": {
              "line": 169,
              "character": 2
            }
          },
          "preview": "public boolean containsPoint (FloatArray polygon, float x, float y) {",
          "documentation": "Returns true if the polygon contains the point.",
          "children": []
        },
        {
          "name": "intersectsSegment(float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 174,
              "character": 0
            },
            "end": {
              "line": 179,
              "character": 2
            }
          },
          "preview": "public @Null BoundingBoxAttachment intersectsSegment (float x1, float y1, float x2, float y2) {",
          "documentation": "Returns the first bounding box attachment that contains any part of the line segment, or null. When doing many checks, it\nis usually more efficient to only call this method if {@link #aabbIntersectsSegment(float, float, float, float)} returns\ntrue.",
          "children": []
        },
        {
          "name": "intersectsSegment(FloatArray, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 182,
              "character": 0
            },
            "end": {
              "line": 204,
              "character": 2
            }
          },
          "preview": "public boolean intersectsSegment (FloatArray polygon, float x1, float y1, float x2, float y2) {",
          "documentation": "Returns true if the polygon contains any part of the line segment.",
          "children": []
        },
        {
          "name": "getMinX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 207,
              "character": 0
            },
            "end": {
              "line": 209,
              "character": 2
            }
          },
          "preview": "public float getMinX () {",
          "documentation": "The left edge of the axis aligned bounding box.",
          "children": []
        },
        {
          "name": "getMinY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 212,
              "character": 0
            },
            "end": {
              "line": 214,
              "character": 2
            }
          },
          "preview": "public float getMinY () {",
          "documentation": "The bottom edge of the axis aligned bounding box.",
          "children": []
        },
        {
          "name": "getMaxX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 217,
              "character": 0
            },
            "end": {
              "line": 219,
              "character": 2
            }
          },
          "preview": "public float getMaxX () {",
          "documentation": "The right edge of the axis aligned bounding box.",
          "children": []
        },
        {
          "name": "getMaxY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 222,
              "character": 0
            },
            "end": {
              "line": 224,
              "character": 2
            }
          },
          "preview": "public float getMaxY () {",
          "documentation": "The top edge of the axis aligned bounding box.",
          "children": []
        },
        {
          "name": "getWidth()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 227,
              "character": 0
            },
            "end": {
              "line": 229,
              "character": 2
            }
          },
          "preview": "public float getWidth () {",
          "documentation": "The width of the axis aligned bounding box.",
          "children": []
        },
        {
          "name": "getHeight()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 232,
              "character": 0
            },
            "end": {
              "line": 234,
              "character": 2
            }
          },
          "preview": "public float getHeight () {",
          "documentation": "The height of the axis aligned bounding box.",
          "children": []
        },
        {
          "name": "getBoundingBoxes()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 237,
              "character": 0
            },
            "end": {
              "line": 239,
              "character": 2
            }
          },
          "preview": "public Array<BoundingBoxAttachment> getBoundingBoxes () {",
          "documentation": "The visible bounding boxes.",
          "children": []
        },
        {
          "name": "getPolygons()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 242,
              "character": 0
            },
            "end": {
              "line": 244,
              "character": 2
            }
          },
          "preview": "public Array<FloatArray> getPolygons () {",
          "documentation": "The world vertices for the bounding box polygons.",
          "children": []
        },
        {
          "name": "getPolygon(BoundingBoxAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonBounds.java",
          "range": {
            "start": {
              "line": 247,
              "character": 0
            },
            "end": {
              "line": 251,
              "character": 2
            }
          },
          "preview": "public @Null FloatArray getPolygon (BoundingBoxAttachment boundingBox) {",
          "documentation": "Returns the polygon for the specified bounding box, or null.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 276,
          "character": 1
        }
      },
      "preview": "public class SkeletonData",
      "documentation": "Stores the setup pose and all of the stateless data for a skeleton.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-runtime-architecture#Data-objects\">Data objects</a> in the Spine Runtimes\nGuide.",
      "children": [
        {
          "name": "name",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 19
            }
          },
          "preview": "@Null String name;",
          "children": []
        },
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 93
            }
          },
          "preview": "final Array<BoneData> bones = new Array(true, 0, BoneData[]::new); // Ordered parents first.",
          "children": []
        },
        {
          "name": "slots",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 93
            }
          },
          "preview": "final Array<SlotData> slots = new Array(true, 0, SlotData[]::new); // Setup pose draw order.",
          "children": []
        },
        {
          "name": "skins",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 59
            }
          },
          "preview": "final Array<Skin> skins = new Array(true, 0, Skin[]::new);",
          "children": []
        },
        {
          "name": "defaultSkin",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 24
            }
          },
          "preview": "@Null Skin defaultSkin;",
          "children": []
        },
        {
          "name": "events",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 70
            }
          },
          "preview": "final Array<EventData> events = new Array(true, 0, EventData[]::new);",
          "children": []
        },
        {
          "name": "animations",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 74
            }
          },
          "preview": "final Array<Animation> animations = new Array(true, 0, Animation[]::new);",
          "children": []
        },
        {
          "name": "constraints",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 85
            }
          },
          "preview": "final Array<ConstraintData> constraints = new Array(true, 0, ConstraintData[]::new);",
          "children": []
        },
        {
          "name": "x",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 49
            }
          },
          "preview": "float x, y, width, height, referenceScale = 100;",
          "children": []
        },
        {
          "name": "y",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 49
            }
          },
          "preview": "float x, y, width, height, referenceScale = 100;",
          "children": []
        },
        {
          "name": "width",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 49
            }
          },
          "preview": "float x, y, width, height, referenceScale = 100;",
          "children": []
        },
        {
          "name": "height",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 49
            }
          },
          "preview": "float x, y, width, height, referenceScale = 100;",
          "children": []
        },
        {
          "name": "referenceScale",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 49
            }
          },
          "preview": "float x, y, width, height, referenceScale = 100;",
          "children": []
        },
        {
          "name": "version",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 28
            }
          },
          "preview": "@Null String version, hash;",
          "children": []
        },
        {
          "name": "hash",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 28
            }
          },
          "preview": "@Null String version, hash;",
          "children": []
        },
        {
          "name": "fps",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 16
            }
          },
          "preview": "float fps = 30;",
          "children": []
        },
        {
          "name": "imagesPath",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 36
            }
          },
          "preview": "@Null String imagesPath, audioPath;",
          "children": []
        },
        {
          "name": "audioPath",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 36
            }
          },
          "preview": "@Null String imagesPath, audioPath;",
          "children": []
        },
        {
          "name": "SkeletonData()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public SkeletonData () {",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 2
            }
          },
          "preview": "public Array<BoneData> getBones () {",
          "documentation": "The skeleton's bones, sorted parent first. The root bone is always the first bone.",
          "children": []
        },
        {
          "name": "findBone(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public @Null BoneData findBone (String boneName) {",
          "documentation": "Finds a bone by comparing each bone's name. It is more efficient to cache the results of this method than to call it\nmultiple times.",
          "children": []
        },
        {
          "name": "getSlots()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 2
            }
          },
          "preview": "public Array<SlotData> getSlots () {",
          "documentation": "The skeleton's slots in the setup pose draw order.",
          "children": []
        },
        {
          "name": "findSlot(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public @Null SlotData findSlot (String slotName) {",
          "documentation": "Finds a slot by comparing each slot's name. It is more efficient to cache the results of this method than to call it\nmultiple times.",
          "children": []
        },
        {
          "name": "getDefaultSkin()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 2
            }
          },
          "preview": "public @Null Skin getDefaultSkin () {",
          "documentation": "The skeleton's default skin. By default this skin contains all attachments that were not in a skin in Spine.\n<p>\nSee {@link Skeleton#getAttachment(int, String)}.",
          "children": []
        },
        {
          "name": "setDefaultSkin(Skin)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public void setDefaultSkin (@Null Skin defaultSkin) {",
          "children": []
        },
        {
          "name": "findSkin(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 2
            }
          },
          "preview": "public @Null Skin findSkin (String skinName) {",
          "documentation": "Finds a skin by comparing each skin's name. It is more efficient to cache the results of this method than to call it\nmultiple times.",
          "children": []
        },
        {
          "name": "getSkins()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 2
            }
          },
          "preview": "public Array<Skin> getSkins () {",
          "documentation": "All skins, including the default skin.",
          "children": []
        },
        {
          "name": "findEvent(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 2
            }
          },
          "preview": "public @Null EventData findEvent (String eventDataName) {",
          "documentation": "Finds an event by comparing each events's name. It is more efficient to cache the results of this method than to call it\nmultiple times.",
          "children": []
        },
        {
          "name": "getEvents()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 2
            }
          },
          "preview": "public Array<EventData> getEvents () {",
          "documentation": "The skeleton's events.",
          "children": []
        },
        {
          "name": "getAnimations()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 138,
              "character": 0
            },
            "end": {
              "line": 140,
              "character": 2
            }
          },
          "preview": "public Array<Animation> getAnimations () {",
          "documentation": "The skeleton's animations.",
          "children": []
        },
        {
          "name": "findAnimation(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 144,
              "character": 0
            },
            "end": {
              "line": 150,
              "character": 2
            }
          },
          "preview": "public @Null Animation findAnimation (String animationName) {",
          "documentation": "Finds an animation by comparing each animation's name. It is more efficient to cache the results of this method than to\ncall it multiple times.",
          "children": []
        },
        {
          "name": "getConstraints()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 157,
              "character": 2
            }
          },
          "preview": "public Array<ConstraintData> getConstraints () {",
          "documentation": "The skeleton's constraints.",
          "children": []
        },
        {
          "name": "findConstraint(String, Class",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 159,
              "character": 0
            },
            "end": {
              "line": 168,
              "character": 2
            }
          },
          "preview": "public @Null <T extends ConstraintData> T findConstraint (String constraintName, Class<T> type) {",
          "children": []
        },
        {
          "name": "getName()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 174,
              "character": 0
            },
            "end": {
              "line": 176,
              "character": 2
            }
          },
          "preview": "public @Null String getName () {",
          "documentation": "The skeleton's name, which by default is the name of the skeleton data file when possible, or null when a name hasn't been\nset.",
          "children": []
        },
        {
          "name": "setName(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 178,
              "character": 0
            },
            "end": {
              "line": 180,
              "character": 2
            }
          },
          "preview": "public void setName (@Null String name) {",
          "children": []
        },
        {
          "name": "getX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 183,
              "character": 0
            },
            "end": {
              "line": 185,
              "character": 2
            }
          },
          "preview": "public float getX () {",
          "documentation": "The X coordinate of the skeleton's axis aligned bounding box in the setup pose.",
          "children": []
        },
        {
          "name": "setX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 187,
              "character": 0
            },
            "end": {
              "line": 189,
              "character": 2
            }
          },
          "preview": "public void setX (float x) {",
          "children": []
        },
        {
          "name": "getY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 192,
              "character": 0
            },
            "end": {
              "line": 194,
              "character": 2
            }
          },
          "preview": "public float getY () {",
          "documentation": "The Y coordinate of the skeleton's axis aligned bounding box in the setup pose.",
          "children": []
        },
        {
          "name": "setY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 196,
              "character": 0
            },
            "end": {
              "line": 198,
              "character": 2
            }
          },
          "preview": "public void setY (float y) {",
          "children": []
        },
        {
          "name": "getWidth()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 201,
              "character": 0
            },
            "end": {
              "line": 203,
              "character": 2
            }
          },
          "preview": "public float getWidth () {",
          "documentation": "The width of the skeleton's axis aligned bounding box in the setup pose.",
          "children": []
        },
        {
          "name": "setWidth(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 205,
              "character": 0
            },
            "end": {
              "line": 207,
              "character": 2
            }
          },
          "preview": "public void setWidth (float width) {",
          "children": []
        },
        {
          "name": "getHeight()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 210,
              "character": 0
            },
            "end": {
              "line": 212,
              "character": 2
            }
          },
          "preview": "public float getHeight () {",
          "documentation": "The height of the skeleton's axis aligned bounding box in the setup pose.",
          "children": []
        },
        {
          "name": "setHeight(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 214,
              "character": 0
            },
            "end": {
              "line": 216,
              "character": 2
            }
          },
          "preview": "public void setHeight (float height) {",
          "children": []
        },
        {
          "name": "getReferenceScale()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 220,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 2
            }
          },
          "preview": "public float getReferenceScale () {",
          "documentation": "Baseline scale factor for applying physics and other effects based on distance to non-scalable properties, such as angle or\nscale. Default is 100.",
          "children": []
        },
        {
          "name": "setReferenceScale(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 224,
              "character": 0
            },
            "end": {
              "line": 226,
              "character": 2
            }
          },
          "preview": "public void setReferenceScale (float referenceScale) {",
          "children": []
        },
        {
          "name": "getVersion()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 229,
              "character": 0
            },
            "end": {
              "line": 231,
              "character": 2
            }
          },
          "preview": "public @Null String getVersion () {",
          "documentation": "The Spine version used to export the skeleton data, or null.",
          "children": []
        },
        {
          "name": "setVersion(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 233,
              "character": 0
            },
            "end": {
              "line": 235,
              "character": 2
            }
          },
          "preview": "public void setVersion (@Null String version) {",
          "children": []
        },
        {
          "name": "getHash()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 238,
              "character": 0
            },
            "end": {
              "line": 240,
              "character": 2
            }
          },
          "preview": "public @Null String getHash () {",
          "documentation": "The skeleton data hash. This value will change if any of the skeleton data has changed.",
          "children": []
        },
        {
          "name": "setHash(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 242,
              "character": 0
            },
            "end": {
              "line": 244,
              "character": 2
            }
          },
          "preview": "public void setHash (@Null String hash) {",
          "children": []
        },
        {
          "name": "getImagesPath()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 247,
              "character": 0
            },
            "end": {
              "line": 249,
              "character": 2
            }
          },
          "preview": "public @Null String getImagesPath () {",
          "documentation": "The path to the images directory as defined in Spine, or null if nonessential data was not exported.",
          "children": []
        },
        {
          "name": "setImagesPath(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 251,
              "character": 0
            },
            "end": {
              "line": 253,
              "character": 2
            }
          },
          "preview": "public void setImagesPath (@Null String imagesPath) {",
          "children": []
        },
        {
          "name": "getAudioPath()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 256,
              "character": 0
            },
            "end": {
              "line": 258,
              "character": 2
            }
          },
          "preview": "public @Null String getAudioPath () {",
          "documentation": "The path to the audio directory as defined in Spine, or null if nonessential data was not exported.",
          "children": []
        },
        {
          "name": "setAudioPath(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 260,
              "character": 0
            },
            "end": {
              "line": 262,
              "character": 2
            }
          },
          "preview": "public void setAudioPath (@Null String audioPath) {",
          "children": []
        },
        {
          "name": "getFps()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 265,
              "character": 0
            },
            "end": {
              "line": 267,
              "character": 2
            }
          },
          "preview": "public float getFps () {",
          "documentation": "The dopesheet FPS in Spine, or zero if nonessential data was not exported.",
          "children": []
        },
        {
          "name": "setFps(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 269,
              "character": 0
            },
            "end": {
              "line": 271,
              "character": 2
            }
          },
          "preview": "public void setFps (float fps) {",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonData.java",
          "range": {
            "start": {
              "line": 273,
              "character": 0
            },
            "end": {
              "line": 275,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonJson",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
      "range": {
        "start": {
          "line": 124,
          "character": 0
        },
        "end": {
          "line": 1352,
          "character": 1
        }
      },
      "preview": "public class SkeletonJson extends SkeletonLoader",
      "documentation": "Loads skeleton data in the Spine JSON format.\n<p>\nJSON is human readable but the binary format is much smaller on disk and faster to load. See {@link SkeletonBinary}.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-json-format\">Spine JSON format</a> and\n<a href=\"https://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data\">JSON and binary data</a> in the Spine\nRuntimes Guide.",
      "supertypes": [
        {
          "name": "SkeletonLoader"
        }
      ],
      "children": [
        {
          "name": "linkedMeshes",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 125,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 86
            }
          },
          "preview": "private final Array<LinkedMesh> linkedMeshes = new Array(true, 8, LinkedMesh[]::new);",
          "children": []
        },
        {
          "name": "SkeletonJson(AttachmentLoader)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 2
            }
          },
          "preview": "public SkeletonJson (AttachmentLoader attachmentLoader) {",
          "children": []
        },
        {
          "name": "SkeletonJson(TextureAtlas)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 2
            }
          },
          "preview": "public SkeletonJson (TextureAtlas atlas) {",
          "children": []
        },
        {
          "name": "readSkeletonData(FileHandle)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 144,
              "character": 2
            }
          },
          "preview": "public SkeletonData readSkeletonData (FileHandle file) {",
          "children": []
        },
        {
          "name": "readSkeletonData(InputStream)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 146,
              "character": 0
            },
            "end": {
              "line": 153,
              "character": 2
            }
          },
          "preview": "public SkeletonData readSkeletonData (InputStream input) {",
          "children": []
        },
        {
          "name": "readSkeletonData(JsonValue)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 541,
              "character": 2
            }
          },
          "preview": "public SkeletonData readSkeletonData (JsonValue root) {",
          "children": []
        },
        {
          "name": "fromProperty(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 543,
              "character": 0
            },
            "end": {
              "line": 553,
              "character": 2
            }
          },
          "preview": "private FromProperty fromProperty (String type) {",
          "children": []
        },
        {
          "name": "propertyScale(String, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 555,
              "character": 0
            },
            "end": {
              "line": 560,
              "character": 2
            }
          },
          "preview": "private float propertyScale (String type, float scale) {",
          "children": []
        },
        {
          "name": "readAttachment(JsonValue, Skin, int, String, SkeletonData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 562,
              "character": 0
            },
            "end": {
              "line": 677,
              "character": 2
            }
          },
          "preview": "private Attachment readAttachment (JsonValue map, Skin skin, int slotIndex, String name, SkeletonData skeletonData) {",
          "children": []
        },
        {
          "name": "readSequence(JsonValue)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 679,
              "character": 0
            },
            "end": {
              "line": 686,
              "character": 2
            }
          },
          "preview": "private Sequence readSequence (@Null JsonValue map) {",
          "children": []
        },
        {
          "name": "readVertices(JsonValue, VertexAttachment, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 688,
              "character": 0
            },
            "end": {
              "line": 713,
              "character": 2
            }
          },
          "preview": "private void readVertices (JsonValue map, VertexAttachment attachment, int verticesLength) {",
          "children": []
        },
        {
          "name": "readAnimation(JsonValue, String, SkeletonData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 715,
              "character": 0
            },
            "end": {
              "line": 1266,
              "character": 2
            }
          },
          "preview": "private void readAnimation (JsonValue map, String name, SkeletonData skeletonData) {",
          "children": []
        },
        {
          "name": "readTimeline(Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 1268,
              "character": 0
            },
            "end": {
              "line": 1287,
              "character": 2
            }
          },
          "preview": "private void readTimeline (Array<Timeline> timelines, JsonValue keyMap, CurveTimeline1 timeline, float defaultValue,",
          "children": []
        },
        {
          "name": "readTimeline(Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 1289,
              "character": 0
            },
            "end": {
              "line": 1313,
              "character": 2
            }
          },
          "preview": "private void readTimeline (Array<Timeline> timelines, JsonValue keyMap, BoneTimeline2 timeline, String name1, String name2,",
          "children": []
        },
        {
          "name": "readCurve(JsonValue, CurveTimeline, int, int, int, float, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 1315,
              "character": 0
            },
            "end": {
              "line": 1331,
              "character": 2
            }
          },
          "preview": "int readCurve (JsonValue curve, CurveTimeline timeline, int bezier, int frame, int value, float time1, float time2,",
          "children": []
        },
        {
          "name": "setBezier(CurveTimeline, int, int, int, float, float, float, float, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 1333,
              "character": 0
            },
            "end": {
              "line": 1336,
              "character": 2
            }
          },
          "preview": "static void setBezier (CurveTimeline timeline, int frame, int value, int bezier, float time1, float value1, float cx1,",
          "children": []
        },
        {
          "name": "LinkedMesh",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
          "range": {
            "start": {
              "line": 1338,
              "character": 0
            },
            "end": {
              "line": 1351,
              "character": 2
            }
          },
          "preview": "static class LinkedMesh",
          "children": [
            {
              "name": "parent",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
              "range": {
                "start": {
                  "line": 1339,
                  "character": 0
                },
                "end": {
                  "line": 1339,
                  "character": 22
                }
              },
              "preview": "String parent, skin;",
              "children": []
            },
            {
              "name": "skin",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
              "range": {
                "start": {
                  "line": 1339,
                  "character": 0
                },
                "end": {
                  "line": 1339,
                  "character": 22
                }
              },
              "preview": "String parent, skin;",
              "children": []
            },
            {
              "name": "slotIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
              "range": {
                "start": {
                  "line": 1340,
                  "character": 0
                },
                "end": {
                  "line": 1340,
                  "character": 16
                }
              },
              "preview": "int slotIndex;",
              "children": []
            },
            {
              "name": "mesh",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
              "range": {
                "start": {
                  "line": 1341,
                  "character": 0
                },
                "end": {
                  "line": 1341,
                  "character": 22
                }
              },
              "preview": "MeshAttachment mesh;",
              "children": []
            },
            {
              "name": "inheritTimelines",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
              "range": {
                "start": {
                  "line": 1342,
                  "character": 0
                },
                "end": {
                  "line": 1342,
                  "character": 27
                }
              },
              "preview": "boolean inheritTimelines;",
              "children": []
            },
            {
              "name": "LinkedMesh(MeshAttachment, String, int, String, boolean)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonJson.java",
              "range": {
                "start": {
                  "line": 1344,
                  "character": 0
                },
                "end": {
                  "line": 1350,
                  "character": 3
                }
              },
              "preview": "public LinkedMesh (MeshAttachment mesh, String skin, int slotIndex, String parent, boolean inheritTimelines) {",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 77,
          "character": 1
        }
      },
      "preview": "abstract public class SkeletonLoader",
      "documentation": "Base class for loading skeleton data from a file.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data\">JSON and binary data</a> in the\nSpine Runtimes Guide.",
      "children": [
        {
          "name": "attachmentLoader",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 41
            }
          },
          "preview": "final AttachmentLoader attachmentLoader;",
          "children": []
        },
        {
          "name": "scale",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 17
            }
          },
          "preview": "float scale = 1;",
          "children": []
        },
        {
          "name": "SkeletonLoader(TextureAtlas)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public SkeletonLoader (TextureAtlas atlas) {",
          "documentation": "Creates a skeleton loader that loads attachments using an {@link AtlasAttachmentLoader} with the specified atlas.",
          "children": []
        },
        {
          "name": "SkeletonLoader(AttachmentLoader)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 2
            }
          },
          "preview": "public SkeletonLoader (AttachmentLoader attachmentLoader) {",
          "documentation": "Creates a skeleton loader that loads attachments using the specified attachment loader.\n<p>\nSee <a href='https://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data'>Loading skeleton data</a> in the\nSpine Runtimes Guide.",
          "children": []
        },
        {
          "name": "getScale()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 2
            }
          },
          "preview": "public float getScale () {",
          "documentation": "Scales bone positions, image sizes, and translations as they are loaded. This allows different size images to be used at\nruntime than were used in Spine.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-loading-skeleton-data#Scaling\">Scaling</a> in the Spine Runtimes Guide.",
          "children": []
        },
        {
          "name": "setScale(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public void setScale (float scale) {",
          "children": []
        },
        {
          "name": "readSkeletonData(FileHandle)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 65
            }
          },
          "preview": "abstract public SkeletonData readSkeletonData (FileHandle file);",
          "children": []
        },
        {
          "name": "readSkeletonData(InputStream)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonLoader.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 67
            }
          },
          "preview": "abstract public SkeletonData readSkeletonData (InputStream input);",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonRenderer",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 358,
          "character": 1
        }
      },
      "preview": "public class SkeletonRenderer",
      "children": [
        {
          "name": "quadTriangles",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 65
            }
          },
          "preview": "static private final short[] quadTriangles = {0, 1, 2, 2, 3, 0};",
          "children": []
        },
        {
          "name": "pmaColors",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 42
            }
          },
          "preview": "private boolean pmaColors, pmaBlendModes;",
          "children": []
        },
        {
          "name": "pmaBlendModes",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 42
            }
          },
          "preview": "private boolean pmaColors, pmaBlendModes;",
          "children": []
        },
        {
          "name": "vertices",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 56
            }
          },
          "preview": "private final FloatArray vertices = new FloatArray(32);",
          "children": []
        },
        {
          "name": "clipper",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 65
            }
          },
          "preview": "private final SkeletonClipping clipper = new SkeletonClipping();",
          "children": []
        },
        {
          "name": "draw(Batch, Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 126,
              "character": 2
            }
          },
          "preview": "public void draw (Batch batch, Skeleton skeleton) {",
          "documentation": "Renders the specified skeleton. If the batch is a PolygonSpriteBatch, {@link #draw(PolygonSpriteBatch, Skeleton)} is\ncalled. If the batch is a TwoColorPolygonBatch, {@link #draw(TwoColorPolygonBatch, Skeleton)} is called. Otherwise the\nskeleton is rendered without two color tinting and any mesh or clipping attachments will throw an exception.\n<p>\nThis method may change the batch's {@link Batch#setBlendFunctionSeparate(int, int, int, int) blending function}. The\nprevious blend function is not restored, since that could result in unnecessary flushes, depending on what is rendered\nnext.",
          "children": []
        },
        {
          "name": "draw(PolygonSpriteBatch, Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 220,
              "character": 2
            }
          },
          "preview": "public void draw (PolygonSpriteBatch batch, Skeleton skeleton) {",
          "documentation": "Renders the specified skeleton, including meshes, but without two color tinting.\n<p>\nThis method may change the batch's {@link Batch#setBlendFunctionSeparate(int, int, int, int) blending function}. The\nprevious blend function is not restored, since that could result in unnecessary flushes, depending on what is rendered\nnext.",
          "children": []
        },
        {
          "name": "draw(TwoColorPolygonBatch, Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 227,
              "character": 0
            },
            "end": {
              "line": 325,
              "character": 2
            }
          },
          "preview": "public void draw (TwoColorPolygonBatch batch, Skeleton skeleton) {",
          "documentation": "Renders the specified skeleton, including meshes and two color tinting.\n<p>\nThis method may change the batch's {@link Batch#setBlendFunctionSeparate(int, int, int, int) blending function}. The\nprevious blend function is not restored, since that could result in unnecessary flushes, depending on what is rendered\nnext.",
          "children": []
        },
        {
          "name": "getPremultipliedAlphaColors()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 327,
              "character": 0
            },
            "end": {
              "line": 329,
              "character": 2
            }
          },
          "preview": "public boolean getPremultipliedAlphaColors () {",
          "children": []
        },
        {
          "name": "setPremultipliedAlphaColors(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 333,
              "character": 0
            },
            "end": {
              "line": 335,
              "character": 2
            }
          },
          "preview": "public void setPremultipliedAlphaColors (boolean pmaColors) {",
          "documentation": "If true, colors will be multiplied by their alpha before being sent to the GPU. Set to false if premultiplied alpha is not\nbeing used or if the shader does the multiplication (libgdx's default batch shaders do not). Default is false.",
          "children": []
        },
        {
          "name": "getPremultipliedAlphaBlendModes()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 337,
              "character": 0
            },
            "end": {
              "line": 339,
              "character": 2
            }
          },
          "preview": "public boolean getPremultipliedAlphaBlendModes () {",
          "children": []
        },
        {
          "name": "setPremultipliedAlphaBlendModes(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 343,
              "character": 0
            },
            "end": {
              "line": 345,
              "character": 2
            }
          },
          "preview": "public void setPremultipliedAlphaBlendModes (boolean pmaBlendModes) {",
          "documentation": "If true, blend modes for premultiplied alpha will be used. Set to false if premultiplied alpha is not being used. Default\nis false.",
          "children": []
        },
        {
          "name": "setPremultipliedAlpha(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 348,
              "character": 0
            },
            "end": {
              "line": 351,
              "character": 2
            }
          },
          "preview": "public void setPremultipliedAlpha (boolean pmaColorsAndBlendModes) {",
          "documentation": "Sets {@link #setPremultipliedAlphaColors(boolean)} and {@link #setPremultipliedAlphaBlendModes(boolean)}.",
          "children": []
        },
        {
          "name": "getSkeletonClipping()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRenderer.java",
          "range": {
            "start": {
              "line": 355,
              "character": 0
            },
            "end": {
              "line": 357,
              "character": 2
            }
          },
          "preview": "public SkeletonClipping getSkeletonClipping () {",
          "documentation": "Returns the {@link SkeletonClipping} used by this renderer for use with e.g.\n{@link Skeleton#getBounds(com.badlogic.gdx.math.Vector2, com.badlogic.gdx.math.Vector2, FloatArray, SkeletonClipping)} *",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonRendererDebug",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 303,
          "character": 1
        }
      },
      "preview": "public class SkeletonRendererDebug",
      "children": [
        {
          "name": "boneLineColor",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 53
            }
          },
          "preview": "static public final Color boneLineColor = Color.RED;",
          "children": []
        },
        {
          "name": "boneOriginColor",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 57
            }
          },
          "preview": "static public final Color boneOriginColor = Color.GREEN;",
          "children": []
        },
        {
          "name": "attachmentLineColor",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 74
            }
          },
          "preview": "static public final Color attachmentLineColor = new Color(0, 0, 1, 0.5f);",
          "children": []
        },
        {
          "name": "triangleLineColor",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 88
            }
          },
          "preview": "static public final Color triangleLineColor = new Color(1, 0.64f, 0, 0.5f); // ffa3007f",
          "children": []
        },
        {
          "name": "aabbColor",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 64
            }
          },
          "preview": "static public final Color aabbColor = new Color(0, 1, 0, 0.5f);",
          "children": []
        },
        {
          "name": "shapes",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 36
            }
          },
          "preview": "private final ShapeRenderer shapes;",
          "children": []
        },
        {
          "name": "drawBones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 109
            }
          },
          "preview": "private boolean drawBones = true, drawRegionAttachments = true, drawBoundingBoxes = true, drawPoints = true;",
          "children": []
        },
        {
          "name": "drawRegionAttachments",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 109
            }
          },
          "preview": "private boolean drawBones = true, drawRegionAttachments = true, drawBoundingBoxes = true, drawPoints = true;",
          "children": []
        },
        {
          "name": "drawBoundingBoxes",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 109
            }
          },
          "preview": "private boolean drawBones = true, drawRegionAttachments = true, drawBoundingBoxes = true, drawPoints = true;",
          "children": []
        },
        {
          "name": "drawPoints",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 109
            }
          },
          "preview": "private boolean drawBones = true, drawRegionAttachments = true, drawBoundingBoxes = true, drawPoints = true;",
          "children": []
        },
        {
          "name": "drawMeshHull",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 102
            }
          },
          "preview": "private boolean drawMeshHull = true, drawMeshTriangles = true, drawPaths = true, drawClipping = true;",
          "children": []
        },
        {
          "name": "drawMeshTriangles",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 102
            }
          },
          "preview": "private boolean drawMeshHull = true, drawMeshTriangles = true, drawPaths = true, drawClipping = true;",
          "children": []
        },
        {
          "name": "drawPaths",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 102
            }
          },
          "preview": "private boolean drawMeshHull = true, drawMeshTriangles = true, drawPaths = true, drawClipping = true;",
          "children": []
        },
        {
          "name": "drawClipping",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 102
            }
          },
          "preview": "private boolean drawMeshHull = true, drawMeshTriangles = true, drawPaths = true, drawClipping = true;",
          "children": []
        },
        {
          "name": "bounds",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 60
            }
          },
          "preview": "private final SkeletonBounds bounds = new SkeletonBounds();",
          "children": []
        },
        {
          "name": "vertices",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 56
            }
          },
          "preview": "private final FloatArray vertices = new FloatArray(32);",
          "children": []
        },
        {
          "name": "scale",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 25
            }
          },
          "preview": "private float scale = 1;",
          "children": []
        },
        {
          "name": "boneWidth",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 29
            }
          },
          "preview": "private float boneWidth = 2;",
          "children": []
        },
        {
          "name": "premultipliedAlpha",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 36
            }
          },
          "preview": "private boolean premultipliedAlpha;",
          "children": []
        },
        {
          "name": "temp1",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 68
            }
          },
          "preview": "private final Vector2 temp1 = new Vector2(), temp2 = new Vector2();",
          "children": []
        },
        {
          "name": "temp2",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 68
            }
          },
          "preview": "private final Vector2 temp1 = new Vector2(), temp2 = new Vector2();",
          "children": []
        },
        {
          "name": "SkeletonRendererDebug()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 2
            }
          },
          "preview": "public SkeletonRendererDebug () {",
          "children": []
        },
        {
          "name": "SkeletonRendererDebug(ShapeRenderer)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 2
            }
          },
          "preview": "public SkeletonRendererDebug (ShapeRenderer shapes) {",
          "children": []
        },
        {
          "name": "draw(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 258,
              "character": 2
            }
          },
          "preview": "public void draw (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getShapeRenderer()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 260,
              "character": 0
            },
            "end": {
              "line": 262,
              "character": 2
            }
          },
          "preview": "public ShapeRenderer getShapeRenderer () {",
          "children": []
        },
        {
          "name": "setBones(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 264,
              "character": 0
            },
            "end": {
              "line": 266,
              "character": 2
            }
          },
          "preview": "public void setBones (boolean bones) {",
          "children": []
        },
        {
          "name": "setScale(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 268,
              "character": 0
            },
            "end": {
              "line": 270,
              "character": 2
            }
          },
          "preview": "public void setScale (float scale) {",
          "children": []
        },
        {
          "name": "setRegionAttachments(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 272,
              "character": 0
            },
            "end": {
              "line": 274,
              "character": 2
            }
          },
          "preview": "public void setRegionAttachments (boolean regionAttachments) {",
          "children": []
        },
        {
          "name": "setBoundingBoxes(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 276,
              "character": 0
            },
            "end": {
              "line": 278,
              "character": 2
            }
          },
          "preview": "public void setBoundingBoxes (boolean boundingBoxes) {",
          "children": []
        },
        {
          "name": "setMeshHull(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 280,
              "character": 0
            },
            "end": {
              "line": 282,
              "character": 2
            }
          },
          "preview": "public void setMeshHull (boolean meshHull) {",
          "children": []
        },
        {
          "name": "setMeshTriangles(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 284,
              "character": 0
            },
            "end": {
              "line": 286,
              "character": 2
            }
          },
          "preview": "public void setMeshTriangles (boolean meshTriangles) {",
          "children": []
        },
        {
          "name": "setPaths(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 288,
              "character": 0
            },
            "end": {
              "line": 290,
              "character": 2
            }
          },
          "preview": "public void setPaths (boolean paths) {",
          "children": []
        },
        {
          "name": "setPoints(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 292,
              "character": 0
            },
            "end": {
              "line": 294,
              "character": 2
            }
          },
          "preview": "public void setPoints (boolean points) {",
          "children": []
        },
        {
          "name": "setClipping(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 296,
              "character": 0
            },
            "end": {
              "line": 298,
              "character": 2
            }
          },
          "preview": "public void setClipping (boolean clipping) {",
          "children": []
        },
        {
          "name": "setPremultipliedAlpha(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SkeletonRendererDebug.java",
          "range": {
            "start": {
              "line": 300,
              "character": 0
            },
            "end": {
              "line": 302,
              "character": 2
            }
          },
          "preview": "public void setPremultipliedAlpha (boolean premultipliedAlpha) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Skin",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 214,
          "character": 1
        }
      },
      "preview": "public class Skin",
      "documentation": "Stores attachments by slot index and attachment name.\n<p>\nSee SkeletonData {@link SkeletonData#defaultSkin}, Skeleton {@link Skeleton#skin}, and\n<a href=\"https://esotericsoftware.com/spine-runtime-skins\">Runtime skins</a> in the Spine Runtimes Guide.",
      "children": [
        {
          "name": "name",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 19
            }
          },
          "preview": "final String name;",
          "children": []
        },
        {
          "name": "attachments",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 60
            }
          },
          "preview": "final OrderedSet<SkinEntry> attachments = new OrderedSet();",
          "children": []
        },
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 67
            }
          },
          "preview": "final Array<BoneData> bones = new Array(true, 0, BoneData[]::new);",
          "children": []
        },
        {
          "name": "constraints",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 85
            }
          },
          "preview": "final Array<ConstraintData> constraints = new Array(true, 0, ConstraintData[]::new);",
          "children": []
        },
        {
          "name": "lookup",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 61
            }
          },
          "preview": "private final SkinEntry lookup = new SkinEntry(0, \"\", null);",
          "children": []
        },
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 85
            }
          },
          "preview": "final Color color = new Color(0.99607843f, 0.61960787f, 0.30980393f, 1); // fe9e4fff",
          "children": []
        },
        {
          "name": "Skin(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 2
            }
          },
          "preview": "public Skin (String name) {",
          "children": []
        },
        {
          "name": "setAttachment(int, String, Attachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 2
            }
          },
          "preview": "public void setAttachment (int slotIndex, String name, Attachment attachment) {",
          "documentation": "Adds an attachment to the skin for the specified slot index and name.",
          "children": []
        },
        {
          "name": "addSkin(Skin)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public void addSkin (Skin skin) {",
          "documentation": "Adds all attachments, bones, and constraints from the specified skin to this skin.",
          "children": []
        },
        {
          "name": "copySkin(Skin)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 2
            }
          },
          "preview": "public void copySkin (Skin skin) {",
          "documentation": "Adds all bones and constraints and copies of all attachments from the specified skin to this skin. Mesh attachments are not\ncopied, instead a new linked mesh is created. The attachment copies can be modified without affecting the originals.",
          "children": []
        },
        {
          "name": "getAttachment(int, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 2
            }
          },
          "preview": "public @Null Attachment getAttachment (int slotIndex, String name) {",
          "documentation": "Returns the attachment for the specified slot index and name, or null.",
          "children": []
        },
        {
          "name": "removeAttachment(int, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 2
            }
          },
          "preview": "public void removeAttachment (int slotIndex, String name) {",
          "documentation": "Removes the attachment in the skin for the specified slot index and name, if any.",
          "children": []
        },
        {
          "name": "getAttachments()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 2
            }
          },
          "preview": "public Array<SkinEntry> getAttachments () {",
          "documentation": "Returns all attachments in this skin.",
          "children": []
        },
        {
          "name": "getAttachments(int, Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 2
            }
          },
          "preview": "public void getAttachments (int slotIndex, Array<SkinEntry> attachments) {",
          "documentation": "Returns all attachments in this skin for the specified slot index.",
          "children": []
        },
        {
          "name": "clear()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 126,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 2
            }
          },
          "preview": "public void clear () {",
          "documentation": "Clears all attachments, bones, and constraints.",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 2
            }
          },
          "preview": "public Array<BoneData> getBones () {",
          "children": []
        },
        {
          "name": "getConstraints()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 138,
              "character": 2
            }
          },
          "preview": "public Array<ConstraintData> getConstraints () {",
          "children": []
        },
        {
          "name": "getName()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 141,
              "character": 0
            },
            "end": {
              "line": 143,
              "character": 2
            }
          },
          "preview": "public String getName () {",
          "documentation": "The skin's name, which is unique across all skins in the skeleton.",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 146,
              "character": 0
            },
            "end": {
              "line": 148,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "documentation": "The color of the skin as it was in Spine, or a default color if nonessential data was not exported.",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 150,
              "character": 0
            },
            "end": {
              "line": 152,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        },
        {
          "name": "attachAll(Skeleton, Skin)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 155,
              "character": 0
            },
            "end": {
              "line": 164,
              "character": 2
            }
          },
          "preview": "void attachAll (Skeleton skeleton, Skin oldSkin) {",
          "documentation": "Attach each attachment in this skin if the corresponding attachment in the old skin is currently attached.",
          "children": []
        },
        {
          "name": "SkinEntry",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
          "range": {
            "start": {
              "line": 167,
              "character": 0
            },
            "end": {
              "line": 213,
              "character": 2
            }
          },
          "preview": "static public class SkinEntry",
          "documentation": "Stores an entry in the skin consisting of the slot index and the attachment name.",
          "children": [
            {
              "name": "slotIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 168,
                  "character": 0
                },
                "end": {
                  "line": 168,
                  "character": 16
                }
              },
              "preview": "int slotIndex;",
              "children": []
            },
            {
              "name": "name",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 169,
                  "character": 0
                },
                "end": {
                  "line": 169,
                  "character": 14
                }
              },
              "preview": "String name;",
              "children": []
            },
            {
              "name": "attachment",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 170,
                  "character": 0
                },
                "end": {
                  "line": 170,
                  "character": 30
                }
              },
              "preview": "@Null Attachment attachment;",
              "children": []
            },
            {
              "name": "hashCode",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 171,
                  "character": 0
                },
                "end": {
                  "line": 171,
                  "character": 23
                }
              },
              "preview": "private int hashCode;",
              "children": []
            },
            {
              "name": "SkinEntry(int, String, Attachment)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 173,
                  "character": 0
                },
                "end": {
                  "line": 176,
                  "character": 3
                }
              },
              "preview": "SkinEntry (int slotIndex, String name, @Null Attachment attachment) {",
              "children": []
            },
            {
              "name": "set(int, String)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 178,
                  "character": 0
                },
                "end": {
                  "line": 184,
                  "character": 3
                }
              },
              "preview": "void set (int slotIndex, String name) {",
              "children": []
            },
            {
              "name": "getSlotIndex()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 186,
                  "character": 0
                },
                "end": {
                  "line": 188,
                  "character": 3
                }
              },
              "preview": "public int getSlotIndex () {",
              "children": []
            },
            {
              "name": "getName()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 191,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 3
                }
              },
              "preview": "public String getName () {",
              "documentation": "The name the attachment is associated with, equivalent to the skin placeholder name in the Spine editor.",
              "children": []
            },
            {
              "name": "getAttachment()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 195,
                  "character": 0
                },
                "end": {
                  "line": 197,
                  "character": 3
                }
              },
              "preview": "public Attachment getAttachment () {",
              "children": []
            },
            {
              "name": "hashCode()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 199,
                  "character": 0
                },
                "end": {
                  "line": 201,
                  "character": 3
                }
              },
              "preview": "public int hashCode () {",
              "children": []
            },
            {
              "name": "equals(Object)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 203,
                  "character": 0
                },
                "end": {
                  "line": 208,
                  "character": 3
                }
              },
              "preview": "public boolean equals (Object object) {",
              "children": []
            },
            {
              "name": "toString()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Skin.java",
              "range": {
                "start": {
                  "line": 210,
                  "character": 0
                },
                "end": {
                  "line": 212,
                  "character": 3
                }
              },
              "preview": "public String toString () {",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Slider",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 124,
          "character": 1
        }
      },
      "preview": "public class Slider extends Constraint<Slider, SliderData, SliderPose>",
      "documentation": "Stores the setup pose for a {@link PhysicsConstraint}.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-physics-constraints\">Physics constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "Constraint",
          "typeArguments": [
            "Slider",
            "SliderData",
            "SliderPose"
          ]
        }
      ],
      "children": [
        {
          "name": "offsets",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 53
            }
          },
          "preview": "static private final float[] offsets = new float[6];",
          "children": []
        },
        {
          "name": "bone",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 11
            }
          },
          "preview": "Bone bone;",
          "children": []
        },
        {
          "name": "Slider(SliderData, Skeleton)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "public Slider (SliderData data, Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "copy(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 2
            }
          },
          "preview": "public Slider copy (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "update(Skeleton, Physics)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public void update (Skeleton skeleton, Physics physics) {",
          "children": []
        },
        {
          "name": "sort(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 2
            }
          },
          "preview": "void sort (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getBone()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
          "range": {
            "start": {
              "line": 117,
              "character": 0
            },
            "end": {
              "line": 119,
              "character": 2
            }
          },
          "preview": "public Bone getBone () {",
          "children": []
        },
        {
          "name": "setBone(Bone)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slider.java",
          "range": {
            "start": {
              "line": 121,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 2
            }
          },
          "preview": "public void setBone (Bone bone) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SliderData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 115,
          "character": 1
        }
      },
      "preview": "public class SliderData extends ConstraintData<Slider, SliderPose>",
      "documentation": "Stores the setup pose for a {@link Slider}.",
      "supertypes": [
        {
          "name": "ConstraintData",
          "typeArguments": [
            "Slider",
            "SliderPose"
          ]
        }
      ],
      "children": [
        {
          "name": "animation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 21
            }
          },
          "preview": "Animation animation;",
          "children": []
        },
        {
          "name": "additive",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 24
            }
          },
          "preview": "boolean additive, loop;",
          "children": []
        },
        {
          "name": "loop",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 24
            }
          },
          "preview": "boolean additive, loop;",
          "children": []
        },
        {
          "name": "bone",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 21
            }
          },
          "preview": "@Null BoneData bone;",
          "children": []
        },
        {
          "name": "property",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 29
            }
          },
          "preview": "@Null FromProperty property;",
          "children": []
        },
        {
          "name": "offset",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 21
            }
          },
          "preview": "float offset, scale;",
          "children": []
        },
        {
          "name": "scale",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 21
            }
          },
          "preview": "float offset, scale;",
          "children": []
        },
        {
          "name": "local",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 15
            }
          },
          "preview": "boolean local;",
          "children": []
        },
        {
          "name": "SliderData(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "public SliderData (String name) {",
          "children": []
        },
        {
          "name": "create(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public Slider create (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getAnimation()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 2
            }
          },
          "preview": "public Animation getAnimation () {",
          "children": []
        },
        {
          "name": "setAnimation(Animation)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public void setAnimation (Animation animation) {",
          "children": []
        },
        {
          "name": "getAdditive()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 2
            }
          },
          "preview": "public boolean getAdditive () {",
          "children": []
        },
        {
          "name": "setAdditive(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 2
            }
          },
          "preview": "public void setAdditive (boolean additive) {",
          "children": []
        },
        {
          "name": "getLoop()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 2
            }
          },
          "preview": "public boolean getLoop () {",
          "children": []
        },
        {
          "name": "setLoop(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 2
            }
          },
          "preview": "public void setLoop (boolean loop) {",
          "children": []
        },
        {
          "name": "getBone()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public @Null BoneData getBone () {",
          "children": []
        },
        {
          "name": "setBone(BoneData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public void setBone (@Null BoneData bone) {",
          "children": []
        },
        {
          "name": "getProperty()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public @Null FromProperty getProperty () {",
          "children": []
        },
        {
          "name": "setProperty(FromProperty)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public void setProperty (@Null FromProperty property) {",
          "children": []
        },
        {
          "name": "getOffset()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public float getOffset () {",
          "children": []
        },
        {
          "name": "setOffset(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public void setOffset (float offset) {",
          "children": []
        },
        {
          "name": "getScale()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public float getScale () {",
          "children": []
        },
        {
          "name": "setScale(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public void setScale (float scale) {",
          "children": []
        },
        {
          "name": "getLocal()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 2
            }
          },
          "preview": "public boolean getLocal () {",
          "children": []
        },
        {
          "name": "setLocal(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderData.java",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 2
            }
          },
          "preview": "public void setLocal (boolean local) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SliderPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
      "range": {
        "start": {
          "line": 32,
          "character": 0
        },
        "end": {
          "line": 55,
          "character": 1
        }
      },
      "preview": "public class SliderPose implements Pose<SliderPose>",
      "documentation": "Stores a pose for a slider.",
      "supertypes": [
        {
          "name": "Pose",
          "typeArguments": [
            "SliderPose"
          ]
        }
      ],
      "children": [
        {
          "name": "time",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 17
            }
          },
          "preview": "float time, mix;",
          "children": []
        },
        {
          "name": "mix",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 17
            }
          },
          "preview": "float time, mix;",
          "children": []
        },
        {
          "name": "set(SliderPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 2
            }
          },
          "preview": "public void set (SliderPose pose) {",
          "children": []
        },
        {
          "name": "getTime()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 2
            }
          },
          "preview": "public float getTime () {",
          "children": []
        },
        {
          "name": "setTime(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "public void setTime (float time) {",
          "children": []
        },
        {
          "name": "getMix()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "public float getMix () {",
          "children": []
        },
        {
          "name": "setMix(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SliderPose.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 2
            }
          },
          "preview": "public void setMix (float mix) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Slot",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 83,
          "character": 1
        }
      },
      "preview": "public class Slot extends Posed<SlotData, SlotPose, SlotPose>",
      "documentation": "Stores a slot's current pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store\nstate for an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared\nacross multiple skeletons.",
      "supertypes": [
        {
          "name": "Posed",
          "typeArguments": [
            "SlotData",
            "SlotPose",
            "SlotPose"
          ]
        }
      ],
      "children": [
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 25
            }
          },
          "preview": "final Skeleton skeleton;",
          "children": []
        },
        {
          "name": "bone",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 17
            }
          },
          "preview": "final Bone bone;",
          "children": []
        },
        {
          "name": "attachmentState",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 21
            }
          },
          "preview": "int attachmentState;",
          "children": []
        },
        {
          "name": "Slot(SlotData, Skeleton)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "public Slot (SlotData data, Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "Slot(Slot, Bone, Skeleton)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 2
            }
          },
          "preview": "public Slot (Slot slot, Bone bone, Skeleton skeleton) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "getBone()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 2
            }
          },
          "preview": "public Bone getBone () {",
          "documentation": "The bone this slot belongs to.",
          "children": []
        },
        {
          "name": "setupPose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Slot.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public void setupPose () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SlotData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
      "range": {
        "start": {
          "line": 34,
          "character": 0
        },
        "end": {
          "line": 88,
          "character": 1
        }
      },
      "preview": "public class SlotData extends PosedData<SlotPose>",
      "documentation": "Stores the setup pose for a {@link Slot}.",
      "supertypes": [
        {
          "name": "PosedData",
          "typeArguments": [
            "SlotPose"
          ]
        }
      ],
      "children": [
        {
          "name": "index",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 17
            }
          },
          "preview": "final int index;",
          "children": []
        },
        {
          "name": "boneData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 25
            }
          },
          "preview": "final BoneData boneData;",
          "children": []
        },
        {
          "name": "attachmentName",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 29
            }
          },
          "preview": "@Null String attachmentName;",
          "children": []
        },
        {
          "name": "blendMode",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 21
            }
          },
          "preview": "BlendMode blendMode;",
          "children": []
        },
        {
          "name": "visible",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 24
            }
          },
          "preview": "boolean visible = true;",
          "children": []
        },
        {
          "name": "SlotData(int, String, BoneData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 2
            }
          },
          "preview": "public SlotData (int index, String name, BoneData boneData) {",
          "children": []
        },
        {
          "name": "getIndex()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 2
            }
          },
          "preview": "public int getIndex () {",
          "documentation": "The index of the slot in {@link Skeleton#getSlots()}.",
          "children": []
        },
        {
          "name": "getBoneData()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 2
            }
          },
          "preview": "public BoneData getBoneData () {",
          "documentation": "The bone this slot belongs to.",
          "children": []
        },
        {
          "name": "setAttachmentName(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 2
            }
          },
          "preview": "public void setAttachmentName (@Null String attachmentName) {",
          "children": []
        },
        {
          "name": "getAttachmentName()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 2
            }
          },
          "preview": "public @Null String getAttachmentName () {",
          "documentation": "The name of the attachment that is visible for this slot in the setup pose, or null if no attachment is visible.",
          "children": []
        },
        {
          "name": "getBlendMode()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public BlendMode getBlendMode () {",
          "documentation": "The blend mode for drawing the slot's attachment.",
          "children": []
        },
        {
          "name": "setBlendMode(BlendMode)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public void setBlendMode (BlendMode blendMode) {",
          "children": []
        },
        {
          "name": "getVisible()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 2
            }
          },
          "preview": "public boolean getVisible () {",
          "documentation": "False if the slot was hidden in Spine and nonessential data was exported. Does not affect runtime rendering.",
          "children": []
        },
        {
          "name": "setVisible(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotData.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 2
            }
          },
          "preview": "public void setVisible (boolean visible) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SlotPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 111,
          "character": 1
        }
      },
      "preview": "public class SlotPose implements Pose<SlotPose>",
      "documentation": "Stores a slot's pose. Slots organize attachments for {@link Skeleton#drawOrder} purposes and provide a place to store state\nfor an attachment. State cannot be stored in an attachment itself because attachments are stateless and may be shared across\nmultiple skeletons.",
      "supertypes": [
        {
          "name": "Pose",
          "typeArguments": [
            "SlotPose"
          ]
        }
      ],
      "children": [
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 43
            }
          },
          "preview": "final Color color = new Color(1, 1, 1, 1);",
          "children": []
        },
        {
          "name": "darkColor",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 23
            }
          },
          "preview": "@Null Color darkColor;",
          "children": []
        },
        {
          "name": "attachment",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 56
            }
          },
          "preview": "@Null Attachment attachment; // Not used in setup pose.",
          "children": []
        },
        {
          "name": "sequenceIndex",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 19
            }
          },
          "preview": "int sequenceIndex;",
          "children": []
        },
        {
          "name": "deform",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 45
            }
          },
          "preview": "final FloatArray deform = new FloatArray(0);",
          "children": []
        },
        {
          "name": "SlotPose()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "SlotPose () {",
          "children": []
        },
        {
          "name": "set(SlotPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 2
            }
          },
          "preview": "public void set (SlotPose pose) {",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "documentation": "The color used to tint the slot's attachment. If {@link #getDarkColor()} is set, this is used as the light color for two\ncolor tinting.",
          "children": []
        },
        {
          "name": "getDarkColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public @Null Color getDarkColor () {",
          "documentation": "The dark color used to tint the slot's attachment for two color tinting, or null if two color tinting is not used. The dark\ncolor's alpha is not used.",
          "children": []
        },
        {
          "name": "getAttachment()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public @Null Attachment getAttachment () {",
          "documentation": "The current attachment for the slot, or null if the slot has no attachment.",
          "children": []
        },
        {
          "name": "setAttachment(Attachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 2
            }
          },
          "preview": "public void setAttachment (@Null Attachment attachment) {",
          "documentation": "Sets the slot's attachment and, if the attachment changed, resets {@link #sequenceIndex} and clears the {@link #deform}.\nThe deform is not cleared if the old attachment has the same {@link VertexAttachment#getTimelineAttachment()} as the\nspecified attachment.",
          "children": []
        },
        {
          "name": "getSequenceIndex()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 2
            }
          },
          "preview": "public int getSequenceIndex () {",
          "documentation": "The index of the texture region to display when the slot's attachment has a {@link Sequence}. -1 represents the\n{@link Sequence#getSetupIndex()}.",
          "children": []
        },
        {
          "name": "setSequenceIndex(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 2
            }
          },
          "preview": "public void setSequenceIndex (int sequenceIndex) {",
          "children": []
        },
        {
          "name": "getDeform()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/SlotPose.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 2
            }
          },
          "preview": "public FloatArray getDeform () {",
          "documentation": "Values to deform the slot's attachment. For an unweighted mesh, the entries are local positions for each vertex. For a\nweighted mesh, the entries are an offset for each vertex which will be added to the mesh's local vertex positions.\n<p>\nSee {@link VertexAttachment#computeWorldVertices(Skeleton, Slot, int, int, float[], int, int)} and\n{@link DeformTimeline}.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "TransformConstraint",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 140,
          "character": 1
        }
      },
      "preview": "public class TransformConstraint extends Constraint<TransformConstraint, TransformConstraintData, TransformConstraintPose>",
      "documentation": "Stores the current pose for a transform constraint. A transform constraint adjusts the world transform of the constrained\nbones to match that of the source bone.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-transform-constraints\">Transform constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "Constraint",
          "typeArguments": [
            "TransformConstraint",
            "TransformConstraintData",
            "TransformConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 29
            }
          },
          "preview": "final Array<BonePose> bones;",
          "children": []
        },
        {
          "name": "source",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 13
            }
          },
          "preview": "Bone source;",
          "children": []
        },
        {
          "name": "TransformConstraint(TransformConstraintData, Skeleton)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "public TransformConstraint (TransformConstraintData data, Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "copy(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 2
            }
          },
          "preview": "public TransformConstraint copy (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "update(Skeleton, Physics)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 2
            }
          },
          "preview": "public void update (Skeleton skeleton, Physics physics) {",
          "documentation": "Applies the constraint to the constrained bones.",
          "children": []
        },
        {
          "name": "sort(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 120,
              "character": 2
            }
          },
          "preview": "void sort (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "isSourceActive()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 2
            }
          },
          "preview": "boolean isSourceActive () {",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 2
            }
          },
          "preview": "public Array<BonePose> getBones () {",
          "documentation": "The bones that will be modified by this transform constraint.",
          "children": []
        },
        {
          "name": "getSource()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 2
            }
          },
          "preview": "public Bone getSource () {",
          "documentation": "The bone whose world transform will be copied to the constrained bones.",
          "children": []
        },
        {
          "name": "setSource(Bone)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraint.java",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 139,
              "character": 2
            }
          },
          "preview": "public void setSource (Bone source) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "TransformConstraintData",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 386,
          "character": 1
        }
      },
      "preview": "public class TransformConstraintData extends ConstraintData<TransformConstraint, TransformConstraintPose>",
      "documentation": "Stores the setup pose for a {@link TransformConstraint}.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-transform-constraints\">Transform constraints</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "ConstraintData",
          "typeArguments": [
            "TransformConstraint",
            "TransformConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "ROTATION",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 88
            }
          },
          "preview": "static public final int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;",
          "children": []
        },
        {
          "name": "X",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 88
            }
          },
          "preview": "static public final int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;",
          "children": []
        },
        {
          "name": "Y",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 88
            }
          },
          "preview": "static public final int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;",
          "children": []
        },
        {
          "name": "SCALEX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 88
            }
          },
          "preview": "static public final int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;",
          "children": []
        },
        {
          "name": "SCALEY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 88
            }
          },
          "preview": "static public final int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;",
          "children": []
        },
        {
          "name": "SHEARY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 88
            }
          },
          "preview": "static public final int ROTATION = 0, X = 1, Y = 2, SCALEX = 3, SCALEY = 4, SHEARY = 5;",
          "children": []
        },
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 67
            }
          },
          "preview": "final Array<BoneData> bones = new Array(true, 0, BoneData[]::new);",
          "children": []
        },
        {
          "name": "source",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 17
            }
          },
          "preview": "BoneData source;",
          "children": []
        },
        {
          "name": "offsets",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 32
            }
          },
          "preview": "float[] offsets = new float[6];",
          "children": []
        },
        {
          "name": "localSource",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 51
            }
          },
          "preview": "boolean localSource, localTarget, additive, clamp;",
          "children": []
        },
        {
          "name": "localTarget",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 51
            }
          },
          "preview": "boolean localSource, localTarget, additive, clamp;",
          "children": []
        },
        {
          "name": "additive",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 51
            }
          },
          "preview": "boolean localSource, localTarget, additive, clamp;",
          "children": []
        },
        {
          "name": "clamp",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 51
            }
          },
          "preview": "boolean localSource, localTarget, additive, clamp;",
          "children": []
        },
        {
          "name": "properties",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 80
            }
          },
          "preview": "final Array<FromProperty> properties = new Array(true, 1, FromProperty[]::new);",
          "children": []
        },
        {
          "name": "TransformConstraintData(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 2
            }
          },
          "preview": "public TransformConstraintData (String name) {",
          "children": []
        },
        {
          "name": "create(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 2
            }
          },
          "preview": "public TransformConstraint create (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public Array<BoneData> getBones () {",
          "documentation": "The bones that will be modified by this transform constraint.",
          "children": []
        },
        {
          "name": "getSource()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 2
            }
          },
          "preview": "public BoneData getSource () {",
          "documentation": "The bone whose world transform will be copied to the constrained bones.",
          "children": []
        },
        {
          "name": "setSource(BoneData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 2
            }
          },
          "preview": "public void setSource (BoneData source) {",
          "children": []
        },
        {
          "name": "getOffsetRotation()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 2
            }
          },
          "preview": "public float getOffsetRotation () {",
          "documentation": "An offset added to the constrained bone rotation.",
          "children": []
        },
        {
          "name": "setOffsetRotation(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 2
            }
          },
          "preview": "public void setOffsetRotation (float offsetRotation) {",
          "children": []
        },
        {
          "name": "getOffsetX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public float getOffsetX () {",
          "documentation": "An offset added to the constrained bone X translation.",
          "children": []
        },
        {
          "name": "setOffsetX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public void setOffsetX (float offsetX) {",
          "children": []
        },
        {
          "name": "getOffsetY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 2
            }
          },
          "preview": "public float getOffsetY () {",
          "documentation": "An offset added to the constrained bone Y translation.",
          "children": []
        },
        {
          "name": "setOffsetY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 2
            }
          },
          "preview": "public void setOffsetY (float offsetY) {",
          "children": []
        },
        {
          "name": "getOffsetScaleX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 2
            }
          },
          "preview": "public float getOffsetScaleX () {",
          "documentation": "An offset added to the constrained bone scaleX.",
          "children": []
        },
        {
          "name": "setOffsetScaleX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 2
            }
          },
          "preview": "public void setOffsetScaleX (float offsetScaleX) {",
          "children": []
        },
        {
          "name": "getOffsetScaleY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 2
            }
          },
          "preview": "public float getOffsetScaleY () {",
          "documentation": "An offset added to the constrained bone scaleY.",
          "children": []
        },
        {
          "name": "setOffsetScaleY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 2
            }
          },
          "preview": "public void setOffsetScaleY (float offsetScaleY) {",
          "children": []
        },
        {
          "name": "getOffsetShearY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 116,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 2
            }
          },
          "preview": "public float getOffsetShearY () {",
          "documentation": "An offset added to the constrained bone shearY.",
          "children": []
        },
        {
          "name": "setOffsetShearY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 2
            }
          },
          "preview": "public void setOffsetShearY (float offsetShearY) {",
          "children": []
        },
        {
          "name": "getLocalSource()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 125,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 2
            }
          },
          "preview": "public boolean getLocalSource () {",
          "documentation": "Reads the source bone's local transform instead of its world transform.",
          "children": []
        },
        {
          "name": "setLocalSource(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 2
            }
          },
          "preview": "public void setLocalSource (boolean localSource) {",
          "children": []
        },
        {
          "name": "getLocalTarget()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 2
            }
          },
          "preview": "public boolean getLocalTarget () {",
          "documentation": "Sets the constrained bones' local transforms instead of their world transforms.",
          "children": []
        },
        {
          "name": "setLocalTarget(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 138,
              "character": 0
            },
            "end": {
              "line": 140,
              "character": 2
            }
          },
          "preview": "public void setLocalTarget (boolean localTarget) {",
          "children": []
        },
        {
          "name": "getAdditive()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 143,
              "character": 0
            },
            "end": {
              "line": 145,
              "character": 2
            }
          },
          "preview": "public boolean getAdditive () {",
          "documentation": "Adds the source bone transform to the constrained bones instead of setting it absolutely.",
          "children": []
        },
        {
          "name": "setAdditive(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 147,
              "character": 0
            },
            "end": {
              "line": 149,
              "character": 2
            }
          },
          "preview": "public void setAdditive (boolean additive) {",
          "children": []
        },
        {
          "name": "getClamp()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 152,
              "character": 0
            },
            "end": {
              "line": 154,
              "character": 2
            }
          },
          "preview": "public boolean getClamp () {",
          "documentation": "Prevents constrained bones from exceeding the ranged defined by {@link ToProperty#offset} and {@link ToProperty#max}.",
          "children": []
        },
        {
          "name": "setClamp(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 156,
              "character": 0
            },
            "end": {
              "line": 158,
              "character": 2
            }
          },
          "preview": "public void setClamp (boolean clamp) {",
          "children": []
        },
        {
          "name": "getProperties()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 161,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 2
            }
          },
          "preview": "public Array<FromProperty> getProperties () {",
          "documentation": "The mapping of transform properties to other transform properties.",
          "children": []
        },
        {
          "name": "FromProperty",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 166,
              "character": 0
            },
            "end": {
              "line": 175,
              "character": 2
            }
          },
          "preview": "static abstract public class FromProperty",
          "documentation": "Source property for a {@link TransformConstraint}.",
          "children": [
            {
              "name": "offset",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 168,
                  "character": 0
                },
                "end": {
                  "line": 168,
                  "character": 22
                }
              },
              "preview": "public float offset;",
              "documentation": "The value of this property that corresponds to {@link ToProperty#offset}.",
              "children": []
            },
            {
              "name": "to",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 171,
                  "character": 0
                },
                "end": {
                  "line": 171,
                  "character": 76
                }
              },
              "preview": "public final Array<ToProperty> to = new Array(true, 1, ToProperty[]::new);",
              "documentation": "Constrained properties.",
              "children": []
            },
            {
              "name": "value(Skeleton, BonePose, boolean, float[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 174,
                  "character": 0
                },
                "end": {
                  "line": 174,
                  "character": 99
                }
              },
              "preview": "abstract public float value (Skeleton skeleton, BonePose source, boolean local, float[] offsets);",
              "documentation": "Reads this property from the specified bone.",
              "children": []
            }
          ]
        },
        {
          "name": "ToProperty",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 178,
              "character": 0
            },
            "end": {
              "line": 194,
              "character": 2
            }
          },
          "preview": "static abstract public class ToProperty",
          "documentation": "Constrained property for a {@link TransformConstraint}.",
          "children": [
            {
              "name": "offset",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 180,
                  "character": 0
                },
                "end": {
                  "line": 180,
                  "character": 22
                }
              },
              "preview": "public float offset;",
              "documentation": "The value of this property that corresponds to {@link FromProperty#offset}.",
              "children": []
            },
            {
              "name": "max",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 183,
                  "character": 0
                },
                "end": {
                  "line": 183,
                  "character": 19
                }
              },
              "preview": "public float max;",
              "documentation": "The maximum value of this property when {@link TransformConstraintData#clamp clamped}.",
              "children": []
            },
            {
              "name": "scale",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 186,
                  "character": 0
                },
                "end": {
                  "line": 186,
                  "character": 21
                }
              },
              "preview": "public float scale;",
              "documentation": "The scale of the {@link FromProperty} value in relation to this property.",
              "children": []
            },
            {
              "name": "mix(TransformConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 189,
                  "character": 0
                },
                "end": {
                  "line": 189,
                  "character": 59
                }
              },
              "preview": "abstract public float mix (TransformConstraintPose pose);",
              "documentation": "Reads the mix for this property from the specified pose.",
              "children": []
            },
            {
              "name": "apply(Skeleton, TransformConstraintPose, BonePose, float, boolean, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 192,
                  "character": 0
                },
                "end": {
                  "line": 193,
                  "character": 21
                }
              },
              "preview": "abstract public void apply (Skeleton skeleton, TransformConstraintPose pose, BonePose bone, float value, boolean local,",
              "documentation": "Applies the value to this property.",
              "children": []
            }
          ]
        },
        {
          "name": "FromRotate",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 196,
              "character": 0
            },
            "end": {
              "line": 205,
              "character": 2
            }
          },
          "preview": "static public class FromRotate extends FromProperty",
          "supertypes": [
            {
              "name": "FromProperty"
            }
          ],
          "children": [
            {
              "name": "value(Skeleton, BonePose, boolean, float[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 197,
                  "character": 0
                },
                "end": {
                  "line": 204,
                  "character": 3
                }
              },
              "preview": "public float value (Skeleton skeleton, BonePose source, boolean local, float[] offsets) {",
              "children": []
            }
          ]
        },
        {
          "name": "ToRotate",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 207,
              "character": 0
            },
            "end": {
              "line": 233,
              "character": 2
            }
          },
          "preview": "static public class ToRotate extends ToProperty",
          "supertypes": [
            {
              "name": "ToProperty"
            }
          ],
          "children": [
            {
              "name": "mix(TransformConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 208,
                  "character": 0
                },
                "end": {
                  "line": 210,
                  "character": 3
                }
              },
              "preview": "public float mix (TransformConstraintPose pose) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, TransformConstraintPose, BonePose, float, boolean, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 212,
                  "character": 0
                },
                "end": {
                  "line": 232,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, TransformConstraintPose pose, BonePose bone, float value, boolean local,",
              "children": []
            }
          ]
        },
        {
          "name": "FromX",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 235,
              "character": 0
            },
            "end": {
              "line": 239,
              "character": 2
            }
          },
          "preview": "static public class FromX extends FromProperty",
          "supertypes": [
            {
              "name": "FromProperty"
            }
          ],
          "children": [
            {
              "name": "value(Skeleton, BonePose, boolean, float[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 236,
                  "character": 0
                },
                "end": {
                  "line": 238,
                  "character": 3
                }
              },
              "preview": "public float value (Skeleton skeleton, BonePose source, boolean local, float[] offsets) {",
              "children": []
            }
          ]
        },
        {
          "name": "ToX",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 241,
              "character": 0
            },
            "end": {
              "line": 255,
              "character": 2
            }
          },
          "preview": "static public class ToX extends ToProperty",
          "supertypes": [
            {
              "name": "ToProperty"
            }
          ],
          "children": [
            {
              "name": "mix(TransformConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 242,
                  "character": 0
                },
                "end": {
                  "line": 244,
                  "character": 3
                }
              },
              "preview": "public float mix (TransformConstraintPose pose) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, TransformConstraintPose, BonePose, float, boolean, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 246,
                  "character": 0
                },
                "end": {
                  "line": 254,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, TransformConstraintPose pose, BonePose bone, float value, boolean local,",
              "children": []
            }
          ]
        },
        {
          "name": "FromY",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 257,
              "character": 0
            },
            "end": {
              "line": 261,
              "character": 2
            }
          },
          "preview": "static public class FromY extends FromProperty",
          "supertypes": [
            {
              "name": "FromProperty"
            }
          ],
          "children": [
            {
              "name": "value(Skeleton, BonePose, boolean, float[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 258,
                  "character": 0
                },
                "end": {
                  "line": 260,
                  "character": 3
                }
              },
              "preview": "public float value (Skeleton skeleton, BonePose source, boolean local, float[] offsets) {",
              "children": []
            }
          ]
        },
        {
          "name": "ToY",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 263,
              "character": 0
            },
            "end": {
              "line": 277,
              "character": 2
            }
          },
          "preview": "static public class ToY extends ToProperty",
          "supertypes": [
            {
              "name": "ToProperty"
            }
          ],
          "children": [
            {
              "name": "mix(TransformConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 264,
                  "character": 0
                },
                "end": {
                  "line": 266,
                  "character": 3
                }
              },
              "preview": "public float mix (TransformConstraintPose pose) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, TransformConstraintPose, BonePose, float, boolean, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 268,
                  "character": 0
                },
                "end": {
                  "line": 276,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, TransformConstraintPose pose, BonePose bone, float value, boolean local,",
              "children": []
            }
          ]
        },
        {
          "name": "FromScaleX",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 279,
              "character": 0
            },
            "end": {
              "line": 285,
              "character": 2
            }
          },
          "preview": "static public class FromScaleX extends FromProperty",
          "supertypes": [
            {
              "name": "FromProperty"
            }
          ],
          "children": [
            {
              "name": "value(Skeleton, BonePose, boolean, float[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 280,
                  "character": 0
                },
                "end": {
                  "line": 284,
                  "character": 3
                }
              },
              "preview": "public float value (Skeleton skeleton, BonePose source, boolean local, float[] offsets) {",
              "children": []
            }
          ]
        },
        {
          "name": "ToScaleX",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 287,
              "character": 0
            },
            "end": {
              "line": 312,
              "character": 2
            }
          },
          "preview": "static public class ToScaleX extends ToProperty",
          "supertypes": [
            {
              "name": "ToProperty"
            }
          ],
          "children": [
            {
              "name": "mix(TransformConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 288,
                  "character": 0
                },
                "end": {
                  "line": 290,
                  "character": 3
                }
              },
              "preview": "public float mix (TransformConstraintPose pose) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, TransformConstraintPose, BonePose, float, boolean, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 292,
                  "character": 0
                },
                "end": {
                  "line": 311,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, TransformConstraintPose pose, BonePose bone, float value, boolean local,",
              "children": []
            }
          ]
        },
        {
          "name": "FromScaleY",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 314,
              "character": 0
            },
            "end": {
              "line": 320,
              "character": 2
            }
          },
          "preview": "static public class FromScaleY extends FromProperty",
          "supertypes": [
            {
              "name": "FromProperty"
            }
          ],
          "children": [
            {
              "name": "value(Skeleton, BonePose, boolean, float[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 315,
                  "character": 0
                },
                "end": {
                  "line": 319,
                  "character": 3
                }
              },
              "preview": "public float value (Skeleton skeleton, BonePose source, boolean local, float[] offsets) {",
              "children": []
            }
          ]
        },
        {
          "name": "ToScaleY",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 322,
              "character": 0
            },
            "end": {
              "line": 347,
              "character": 2
            }
          },
          "preview": "static public class ToScaleY extends ToProperty",
          "supertypes": [
            {
              "name": "ToProperty"
            }
          ],
          "children": [
            {
              "name": "mix(TransformConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 323,
                  "character": 0
                },
                "end": {
                  "line": 325,
                  "character": 3
                }
              },
              "preview": "public float mix (TransformConstraintPose pose) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, TransformConstraintPose, BonePose, float, boolean, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 327,
                  "character": 0
                },
                "end": {
                  "line": 346,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, TransformConstraintPose pose, BonePose bone, float value, boolean local,",
              "children": []
            }
          ]
        },
        {
          "name": "FromShearY",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 349,
              "character": 0
            },
            "end": {
              "line": 355,
              "character": 2
            }
          },
          "preview": "static public class FromShearY extends FromProperty",
          "supertypes": [
            {
              "name": "FromProperty"
            }
          ],
          "children": [
            {
              "name": "value(Skeleton, BonePose, boolean, float[])",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 350,
                  "character": 0
                },
                "end": {
                  "line": 354,
                  "character": 3
                }
              },
              "preview": "public float value (Skeleton skeleton, BonePose source, boolean local, float[] offsets) {",
              "children": []
            }
          ]
        },
        {
          "name": "ToShearY",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
          "range": {
            "start": {
              "line": 357,
              "character": 0
            },
            "end": {
              "line": 385,
              "character": 2
            }
          },
          "preview": "static public class ToShearY extends ToProperty",
          "supertypes": [
            {
              "name": "ToProperty"
            }
          ],
          "children": [
            {
              "name": "mix(TransformConstraintPose)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 358,
                  "character": 0
                },
                "end": {
                  "line": 360,
                  "character": 3
                }
              },
              "preview": "public float mix (TransformConstraintPose pose) {",
              "children": []
            },
            {
              "name": "apply(Skeleton, TransformConstraintPose, BonePose, float, boolean, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintData.java",
              "range": {
                "start": {
                  "line": 362,
                  "character": 0
                },
                "end": {
                  "line": 384,
                  "character": 3
                }
              },
              "preview": "public void apply (Skeleton skeleton, TransformConstraintPose pose, BonePose bone, float value, boolean local,",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "TransformConstraintPose",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
      "range": {
        "start": {
          "line": 32,
          "character": 0
        },
        "end": {
          "line": 97,
          "character": 1
        }
      },
      "preview": "public class TransformConstraintPose implements Pose<TransformConstraintPose>",
      "documentation": "Stores a pose for a transform constraint.",
      "supertypes": [
        {
          "name": "Pose",
          "typeArguments": [
            "TransformConstraintPose"
          ]
        }
      ],
      "children": [
        {
          "name": "mixRotate",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 62
            }
          },
          "preview": "float mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY;",
          "children": []
        },
        {
          "name": "mixX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 62
            }
          },
          "preview": "float mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY;",
          "children": []
        },
        {
          "name": "mixY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 62
            }
          },
          "preview": "float mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY;",
          "children": []
        },
        {
          "name": "mixScaleX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 62
            }
          },
          "preview": "float mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY;",
          "children": []
        },
        {
          "name": "mixScaleY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 62
            }
          },
          "preview": "float mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY;",
          "children": []
        },
        {
          "name": "mixShearY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 62
            }
          },
          "preview": "float mixRotate, mixX, mixY, mixScaleX, mixScaleY, mixShearY;",
          "children": []
        },
        {
          "name": "set(TransformConstraintPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 2
            }
          },
          "preview": "public void set (TransformConstraintPose pose) {",
          "children": []
        },
        {
          "name": "getMixRotate()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 2
            }
          },
          "preview": "public float getMixRotate () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained rotation.",
          "children": []
        },
        {
          "name": "setMixRotate(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "public void setMixRotate (float mixRotate) {",
          "children": []
        },
        {
          "name": "getMixX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 2
            }
          },
          "preview": "public float getMixX () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained translation X.",
          "children": []
        },
        {
          "name": "setMixX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public void setMixX (float mixX) {",
          "children": []
        },
        {
          "name": "getMixY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 2
            }
          },
          "preview": "public float getMixY () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained translation Y.",
          "children": []
        },
        {
          "name": "setMixY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 2
            }
          },
          "preview": "public void setMixY (float mixY) {",
          "children": []
        },
        {
          "name": "getMixScaleX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 2
            }
          },
          "preview": "public float getMixScaleX () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained scale X.",
          "children": []
        },
        {
          "name": "setMixScaleX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public void setMixScaleX (float mixScaleX) {",
          "children": []
        },
        {
          "name": "getMixScaleY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 2
            }
          },
          "preview": "public float getMixScaleY () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained scale X.",
          "children": []
        },
        {
          "name": "setMixScaleY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 2
            }
          },
          "preview": "public void setMixScaleY (float mixScaleY) {",
          "children": []
        },
        {
          "name": "getMixShearY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 2
            }
          },
          "preview": "public float getMixShearY () {",
          "documentation": "A percentage (0-1) that controls the mix between the constrained and unconstrained shear Y.",
          "children": []
        },
        {
          "name": "setMixShearY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/TransformConstraintPose.java",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 2
            }
          },
          "preview": "public void setMixShearY (float mixShearY) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Update.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Update",
      "kind": "interface",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Update.java",
      "range": {
        "start": {
          "line": 32,
          "character": 0
        },
        "end": {
          "line": 35,
          "character": 1
        }
      },
      "preview": "public interface Update",
      "documentation": "The interface for items updated by {@link Skeleton#updateWorldTransform(Physics)}.",
      "children": [
        {
          "name": "update(Skeleton, Physics)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/Update.java",
          "range": {
            "start": {
              "line": 34,
              "character": 0
            },
            "end": {
              "line": 34,
              "character": 57
            }
          },
          "preview": "public void update (Skeleton skeleton, Physics physics);",
          "documentation": "@param physics Determines how physics and other non-deterministic updates are applied.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "AtlasAttachmentLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 101,
          "character": 1
        }
      },
      "preview": "public class AtlasAttachmentLoader implements AttachmentLoader",
      "documentation": "An {@link AttachmentLoader} that configures attachments using texture regions from an {@link Atlas}.\n<p>\nSee <a href='https://esotericsoftware.com/spine-loading-skeleton-data#JSON-and-binary-data'>Loading skeleton data</a> in the\nSpine Runtimes Guide.",
      "supertypes": [
        {
          "name": "AttachmentLoader"
        }
      ],
      "children": [
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 28
            }
          },
          "preview": "private TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "AtlasAttachmentLoader(TextureAtlas)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 2
            }
          },
          "preview": "public AtlasAttachmentLoader (TextureAtlas atlas) {",
          "children": []
        },
        {
          "name": "loadSequence(String, String, Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "private void loadSequence (String name, String basePath, Sequence sequence) {",
          "children": []
        },
        {
          "name": "newRegionAttachment(Skin, String, String, Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 2
            }
          },
          "preview": "public RegionAttachment newRegionAttachment (Skin skin, String name, String path, @Null Sequence sequence) {",
          "children": []
        },
        {
          "name": "newMeshAttachment(Skin, String, String, Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 2
            }
          },
          "preview": "public MeshAttachment newMeshAttachment (Skin skin, String name, String path, @Null Sequence sequence) {",
          "children": []
        },
        {
          "name": "newBoundingBoxAttachment(Skin, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 2
            }
          },
          "preview": "public BoundingBoxAttachment newBoundingBoxAttachment (Skin skin, String name) {",
          "children": []
        },
        {
          "name": "newClippingAttachment(Skin, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 2
            }
          },
          "preview": "public ClippingAttachment newClippingAttachment (Skin skin, String name) {",
          "children": []
        },
        {
          "name": "newPathAttachment(Skin, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 2
            }
          },
          "preview": "public PathAttachment newPathAttachment (Skin skin, String name) {",
          "children": []
        },
        {
          "name": "newPointAttachment(Skin, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AtlasAttachmentLoader.java",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 2
            }
          },
          "preview": "public PointAttachment newPointAttachment (Skin skin, String name) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Attachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Attachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Attachment.java",
      "range": {
        "start": {
          "line": 32,
          "character": 0
        },
        "end": {
          "line": 56,
          "character": 1
        }
      },
      "preview": "abstract public class Attachment",
      "documentation": "The base class for all attachments.",
      "children": [
        {
          "name": "name",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Attachment.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 19
            }
          },
          "preview": "final String name;",
          "children": []
        },
        {
          "name": "Attachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Attachment.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 2
            }
          },
          "preview": "public Attachment (String name) {",
          "children": []
        },
        {
          "name": "Attachment(Attachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Attachment.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 2
            }
          },
          "preview": "protected Attachment (Attachment other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "getName()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Attachment.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 2
            }
          },
          "preview": "public String getName () {",
          "documentation": "The attachment's name.",
          "children": []
        },
        {
          "name": "toString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Attachment.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 2
            }
          },
          "preview": "public String toString () {",
          "children": []
        },
        {
          "name": "copy()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Attachment.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 36
            }
          },
          "preview": "abstract public Attachment copy ();",
          "documentation": "Returns a copy of the attachment.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentLoader.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "AttachmentLoader",
      "kind": "interface",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentLoader.java",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 1
        }
      },
      "preview": "public interface AttachmentLoader",
      "documentation": "The interface which can be implemented to customize creating and populating attachments.\n<p>\nSee <a href='https://esotericsoftware.com/spine-loading-skeleton-data#AttachmentLoader'>Loading skeleton data</a> in the Spine\nRuntimes Guide.",
      "children": [
        {
          "name": "newRegionAttachment(Skin, String, String, Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentLoader.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 114
            }
          },
          "preview": "public @Null RegionAttachment newRegionAttachment (Skin skin, String name, String path, @Null Sequence sequence);",
          "documentation": "@return May be null to not load the attachment.",
          "children": []
        },
        {
          "name": "newMeshAttachment(Skin, String, String, Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentLoader.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 110
            }
          },
          "preview": "public @Null MeshAttachment newMeshAttachment (Skin skin, String name, String path, @Null Sequence sequence);",
          "documentation": "@return May be null to not load the attachment. In that case null should also be returned for child meshes.",
          "children": []
        },
        {
          "name": "newBoundingBoxAttachment(Skin, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentLoader.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 86
            }
          },
          "preview": "public @Null BoundingBoxAttachment newBoundingBoxAttachment (Skin skin, String name);",
          "documentation": "@return May be null to not load the attachment.",
          "children": []
        },
        {
          "name": "newClippingAttachment(Skin, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentLoader.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 80
            }
          },
          "preview": "public @Null ClippingAttachment newClippingAttachment (Skin skin, String name);",
          "documentation": "@return May be null to not load the attachment.",
          "children": []
        },
        {
          "name": "newPathAttachment(Skin, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentLoader.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 72
            }
          },
          "preview": "public @Null PathAttachment newPathAttachment (Skin skin, String name);",
          "documentation": "@return May be null to not load the attachment.",
          "children": []
        },
        {
          "name": "newPointAttachment(Skin, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentLoader.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 74
            }
          },
          "preview": "public @Null PointAttachment newPointAttachment (Skin skin, String name);",
          "documentation": "@return May be null to not load the attachment.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "AttachmentType",
      "kind": "enum",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
      "range": {
        "start": {
          "line": 31,
          "character": 0
        },
        "end": {
          "line": 35,
          "character": 1
        }
      },
      "preview": "public enum AttachmentType",
      "children": [
        {
          "name": "region",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 7
            }
          },
          "preview": "region, boundingbox, mesh, linkedmesh, path, point, clipping, sequence;",
          "children": []
        },
        {
          "name": "boundingbox",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 20
            }
          },
          "preview": "region, boundingbox, mesh, linkedmesh, path, point, clipping, sequence;",
          "children": []
        },
        {
          "name": "mesh",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 26
            }
          },
          "preview": "region, boundingbox, mesh, linkedmesh, path, point, clipping, sequence;",
          "children": []
        },
        {
          "name": "linkedmesh",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 38
            }
          },
          "preview": "region, boundingbox, mesh, linkedmesh, path, point, clipping, sequence;",
          "children": []
        },
        {
          "name": "path",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 44
            }
          },
          "preview": "region, boundingbox, mesh, linkedmesh, path, point, clipping, sequence;",
          "children": []
        },
        {
          "name": "point",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 51
            }
          },
          "preview": "region, boundingbox, mesh, linkedmesh, path, point, clipping, sequence;",
          "children": []
        },
        {
          "name": "clipping",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 61
            }
          },
          "preview": "region, boundingbox, mesh, linkedmesh, path, point, clipping, sequence;",
          "children": []
        },
        {
          "name": "sequence",
          "kind": "enumMember",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 71
            }
          },
          "preview": "region, boundingbox, mesh, linkedmesh, path, point, clipping, sequence;",
          "children": []
        },
        {
          "name": "values",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/AttachmentType.java",
          "range": {
            "start": {
              "line": 34,
              "character": 0
            },
            "end": {
              "line": 34,
              "character": 56
            }
          },
          "preview": "static public final AttachmentType[] values = values();",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/BoundingBoxAttachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "BoundingBoxAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/BoundingBoxAttachment.java",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 63,
          "character": 1
        }
      },
      "preview": "public class BoundingBoxAttachment extends VertexAttachment",
      "documentation": "An attachment with vertices that make up a polygon. Can be used for hit detection, creating physics bodies, spawning particle\neffects, and more.\n<p>\nSee {@link SkeletonBounds} and <a href=\"https://esotericsoftware.com/spine-bounding-boxes\">Bounding Boxes</a> in the Spine User\nGuide.",
      "supertypes": [
        {
          "name": "VertexAttachment"
        }
      ],
      "children": [
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/BoundingBoxAttachment.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 63
            }
          },
          "preview": "final Color color = new Color(0.38f, 0.94f, 0, 1); // 60f000ff",
          "children": []
        },
        {
          "name": "BoundingBoxAttachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/BoundingBoxAttachment.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "public BoundingBoxAttachment (String name) {",
          "children": []
        },
        {
          "name": "BoundingBoxAttachment(BoundingBoxAttachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/BoundingBoxAttachment.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 2
            }
          },
          "preview": "protected BoundingBoxAttachment (BoundingBoxAttachment other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/BoundingBoxAttachment.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "documentation": "The color of the bounding box as it was in Spine, or a default color if nonessential data was not exported. Bounding boxes\nare not usually rendered at runtime.",
          "children": []
        },
        {
          "name": "copy()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/BoundingBoxAttachment.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 2
            }
          },
          "preview": "public BoundingBoxAttachment copy () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "ClippingAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 73,
          "character": 1
        }
      },
      "preview": "public class ClippingAttachment extends VertexAttachment",
      "documentation": "An attachment with vertices that make up a polygon used for clipping the rendering of other attachments.",
      "supertypes": [
        {
          "name": "VertexAttachment"
        }
      ],
      "children": [
        {
          "name": "endSlot",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 24
            }
          },
          "preview": "@Null SlotData endSlot;",
          "children": []
        },
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 73
            }
          },
          "preview": "final Color color = new Color(0.2275f, 0.2275f, 0.8078f, 1); // ce3a3aff",
          "children": []
        },
        {
          "name": "ClippingAttachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 2
            }
          },
          "preview": "public ClippingAttachment (String name) {",
          "children": []
        },
        {
          "name": "ClippingAttachment(ClippingAttachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 2
            }
          },
          "preview": "protected ClippingAttachment (ClippingAttachment other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "getEndSlot()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "public @Null SlotData getEndSlot () {",
          "documentation": "Clipping is performed between the clipping attachment's slot and the end slot. If null clipping is done until the end of\nthe skeleton's rendering.",
          "children": []
        },
        {
          "name": "setEndSlot(SlotData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 2
            }
          },
          "preview": "public void setEndSlot (@Null SlotData endSlot) {",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "documentation": "The color of the clipping attachment as it was in Spine, or a default color if nonessential data was not exported. Clipping\nattachments are not usually rendered at runtime.",
          "children": []
        },
        {
          "name": "copy()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/ClippingAttachment.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public ClippingAttachment copy () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "HasTextureRegion",
      "kind": "interface",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
      "range": {
        "start": {
          "line": 35,
          "character": 0
        },
        "end": {
          "line": 57,
          "character": 1
        }
      },
      "preview": "public interface HasTextureRegion",
      "children": [
        {
          "name": "getPath()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 26
            }
          },
          "preview": "public String getPath ();",
          "documentation": "The name used to find the {@link #getRegion()}.",
          "children": []
        },
        {
          "name": "setPath(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 35
            }
          },
          "preview": "public void setPath (String path);",
          "children": []
        },
        {
          "name": "getRegion()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 35
            }
          },
          "preview": "public TextureRegion getRegion ();",
          "children": []
        },
        {
          "name": "setRegion(TextureRegion)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 46
            }
          },
          "preview": "public void setRegion (TextureRegion region);",
          "documentation": "Sets the region used to draw the attachment. After setting the region or if the region's properties are changed,\n{@link #updateRegion()} must be called.",
          "children": []
        },
        {
          "name": "updateRegion()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 29
            }
          },
          "preview": "public void updateRegion ();",
          "documentation": "Updates any values the attachment calculates using the {@link #getRegion()}. Must be called after setting the\n{@link #getRegion()} or if the region's properties are changed.",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 26
            }
          },
          "preview": "public Color getColor ();",
          "documentation": "The color to tint the attachment.",
          "children": []
        },
        {
          "name": "getSequence()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 38
            }
          },
          "preview": "public @Null Sequence getSequence ();",
          "children": []
        },
        {
          "name": "setSequence(Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/HasTextureRegion.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 51
            }
          },
          "preview": "public void setSequence (@Null Sequence sequence);",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "MeshAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 302,
          "character": 1
        }
      },
      "preview": "public class MeshAttachment extends VertexAttachment implements HasTextureRegion",
      "documentation": "An attachment that displays a textured mesh. A mesh has hull vertices and internal vertices within the hull. Holes are not\nsupported. Each vertex has UVs (texture coordinates) and triangles are used to map an image on to the mesh.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-meshes\">Mesh attachments</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "VertexAttachment"
        },
        {
          "name": "HasTextureRegion"
        }
      ],
      "children": [
        {
          "name": "region",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 30
            }
          },
          "preview": "private TextureRegion region;",
          "children": []
        },
        {
          "name": "path",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 21
            }
          },
          "preview": "private String path;",
          "children": []
        },
        {
          "name": "regionUVs",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 32
            }
          },
          "preview": "private float[] regionUVs, uvs;",
          "children": []
        },
        {
          "name": "uvs",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 32
            }
          },
          "preview": "private float[] regionUVs, uvs;",
          "children": []
        },
        {
          "name": "triangles",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 27
            }
          },
          "preview": "private short[] triangles;",
          "children": []
        },
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 51
            }
          },
          "preview": "private final Color color = new Color(1, 1, 1, 1);",
          "children": []
        },
        {
          "name": "hullLength",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 24
            }
          },
          "preview": "private int hullLength;",
          "children": []
        },
        {
          "name": "parentMesh",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 41
            }
          },
          "preview": "private @Null MeshAttachment parentMesh;",
          "children": []
        },
        {
          "name": "sequence",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 33
            }
          },
          "preview": "private @Null Sequence sequence;",
          "children": []
        },
        {
          "name": "edges",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 29
            }
          },
          "preview": "private @Null short[] edges;",
          "children": []
        },
        {
          "name": "width",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 29
            }
          },
          "preview": "private float width, height;",
          "children": []
        },
        {
          "name": "height",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 29
            }
          },
          "preview": "private float width, height;",
          "children": []
        },
        {
          "name": "MeshAttachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 2
            }
          },
          "preview": "public MeshAttachment (String name) {",
          "children": []
        },
        {
          "name": "MeshAttachment(MeshAttachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 2
            }
          },
          "preview": "protected MeshAttachment (MeshAttachment other) {",
          "documentation": "Copy constructor. Use {@link #newLinkedMesh()} if the other mesh is a linked mesh.",
          "children": []
        },
        {
          "name": "setRegion(TextureRegion)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 2
            }
          },
          "preview": "public void setRegion (TextureRegion region) {",
          "children": []
        },
        {
          "name": "getRegion()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 2
            }
          },
          "preview": "public @Null TextureRegion getRegion () {",
          "children": []
        },
        {
          "name": "updateRegion()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 169,
              "character": 2
            }
          },
          "preview": "public void updateRegion () {",
          "documentation": "Calculates {@link #uvs} using the {@link #regionUVs} and region. Must be called if the region, the region's properties, or\nthe {@link #regionUVs} are changed.",
          "children": []
        },
        {
          "name": "computeWorldVertices(Skeleton, Slot, int, int, float[], int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 172,
              "character": 0
            },
            "end": {
              "line": 176,
              "character": 2
            }
          },
          "preview": "public void computeWorldVertices (Skeleton skeleton, Slot slot, int start, int count, float[] worldVertices, int offset,",
          "documentation": "If the attachment has a {@link #sequence}, the region may be changed.",
          "children": []
        },
        {
          "name": "getTriangles()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 179,
              "character": 0
            },
            "end": {
              "line": 181,
              "character": 2
            }
          },
          "preview": "public short[] getTriangles () {",
          "documentation": "Triplets of vertex indices which describe the mesh's triangulation.",
          "children": []
        },
        {
          "name": "setTriangles(short[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 183,
              "character": 0
            },
            "end": {
              "line": 185,
              "character": 2
            }
          },
          "preview": "public void setTriangles (short[] triangles) {",
          "children": []
        },
        {
          "name": "getRegionUVs()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 188,
              "character": 0
            },
            "end": {
              "line": 190,
              "character": 2
            }
          },
          "preview": "public float[] getRegionUVs () {",
          "documentation": "The UV pair for each vertex, normalized within the texture region.",
          "children": []
        },
        {
          "name": "setRegionUVs(float[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 193,
              "character": 0
            },
            "end": {
              "line": 195,
              "character": 2
            }
          },
          "preview": "public void setRegionUVs (float[] regionUVs) {",
          "documentation": "Sets the texture coordinates for the region. The values are u,v pairs for each vertex.",
          "children": []
        },
        {
          "name": "getUVs()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 200,
              "character": 0
            },
            "end": {
              "line": 202,
              "character": 2
            }
          },
          "preview": "public float[] getUVs () {",
          "documentation": "The UV pair for each vertex, normalized within the entire texture.\n<p>\nSee {@link #updateRegion()}.",
          "children": []
        },
        {
          "name": "setUVs(float[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 204,
              "character": 0
            },
            "end": {
              "line": 206,
              "character": 2
            }
          },
          "preview": "public void setUVs (float[] uvs) {",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 208,
              "character": 0
            },
            "end": {
              "line": 210,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "children": []
        },
        {
          "name": "getPath()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 212,
              "character": 0
            },
            "end": {
              "line": 214,
              "character": 2
            }
          },
          "preview": "public String getPath () {",
          "children": []
        },
        {
          "name": "setPath(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 216,
              "character": 0
            },
            "end": {
              "line": 218,
              "character": 2
            }
          },
          "preview": "public void setPath (String path) {",
          "children": []
        },
        {
          "name": "getHullLength()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 221,
              "character": 0
            },
            "end": {
              "line": 223,
              "character": 2
            }
          },
          "preview": "public int getHullLength () {",
          "documentation": "The number of entries at the beginning of {@link #vertices} that make up the mesh hull.",
          "children": []
        },
        {
          "name": "setHullLength(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 225,
              "character": 0
            },
            "end": {
              "line": 227,
              "character": 2
            }
          },
          "preview": "public void setHullLength (int hullLength) {",
          "children": []
        },
        {
          "name": "setEdges(short[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 229,
              "character": 0
            },
            "end": {
              "line": 231,
              "character": 2
            }
          },
          "preview": "public void setEdges (short[] edges) {",
          "children": []
        },
        {
          "name": "getEdges()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 235,
              "character": 0
            },
            "end": {
              "line": 237,
              "character": 2
            }
          },
          "preview": "public @Null short[] getEdges () {",
          "documentation": "Vertex index pairs describing edges for controlling triangulation, or be null if nonessential data was not exported. Mesh\ntriangles will never cross edges. Triangulation is not performed at runtime.",
          "children": []
        },
        {
          "name": "getWidth()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 240,
              "character": 0
            },
            "end": {
              "line": 242,
              "character": 2
            }
          },
          "preview": "public float getWidth () {",
          "documentation": "The width of the mesh's image, or zero if nonessential data was not exported.",
          "children": []
        },
        {
          "name": "setWidth(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 244,
              "character": 0
            },
            "end": {
              "line": 246,
              "character": 2
            }
          },
          "preview": "public void setWidth (float width) {",
          "children": []
        },
        {
          "name": "getHeight()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 249,
              "character": 0
            },
            "end": {
              "line": 251,
              "character": 2
            }
          },
          "preview": "public float getHeight () {",
          "documentation": "The height of the mesh's image, or zero if nonessential data was not exported.",
          "children": []
        },
        {
          "name": "setHeight(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 253,
              "character": 0
            },
            "end": {
              "line": 255,
              "character": 2
            }
          },
          "preview": "public void setHeight (float height) {",
          "children": []
        },
        {
          "name": "getSequence()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 257,
              "character": 0
            },
            "end": {
              "line": 259,
              "character": 2
            }
          },
          "preview": "public @Null Sequence getSequence () {",
          "children": []
        },
        {
          "name": "setSequence(Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 261,
              "character": 0
            },
            "end": {
              "line": 263,
              "character": 2
            }
          },
          "preview": "public void setSequence (@Null Sequence sequence) {",
          "children": []
        },
        {
          "name": "getParentMesh()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 268,
              "character": 0
            },
            "end": {
              "line": 270,
              "character": 2
            }
          },
          "preview": "public @Null MeshAttachment getParentMesh () {",
          "documentation": "The parent mesh if this is a linked mesh, else null. A linked mesh shares the {@link #bones}, {@link #vertices},\n{@link #regionUVs}, {@link #triangles}, {@link #hullLength}, {@link #edges}, {@link #width}, and {@link #height} with the\nparent mesh, but may have a different {@link #name} or {@link #path} (and therefore a different texture).",
          "children": []
        },
        {
          "name": "setParentMesh(MeshAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 272,
              "character": 0
            },
            "end": {
              "line": 285,
              "character": 2
            }
          },
          "preview": "public void setParentMesh (@Null MeshAttachment parentMesh) {",
          "children": []
        },
        {
          "name": "newLinkedMesh()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 288,
              "character": 0
            },
            "end": {
              "line": 297,
              "character": 2
            }
          },
          "preview": "public MeshAttachment newLinkedMesh () {",
          "documentation": "Returns a new mesh with the {@link #parentMesh} set to this mesh's parent mesh, if any, else to this mesh.",
          "children": []
        },
        {
          "name": "copy()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/MeshAttachment.java",
          "range": {
            "start": {
              "line": 299,
              "character": 0
            },
            "end": {
              "line": 301,
              "character": 2
            }
          },
          "preview": "public MeshAttachment copy () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PathAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 100,
          "character": 1
        }
      },
      "preview": "public class PathAttachment extends VertexAttachment",
      "documentation": "An attachment whose vertices make up a composite Bezier curve.\n<p>\nSee {@link PathConstraint} and <a href=\"https://esotericsoftware.com/spine-paths\">Paths</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "VertexAttachment"
        }
      ],
      "children": [
        {
          "name": "lengths",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 17
            }
          },
          "preview": "float[] lengths;",
          "children": []
        },
        {
          "name": "closed",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 31
            }
          },
          "preview": "boolean closed, constantSpeed;",
          "children": []
        },
        {
          "name": "constantSpeed",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 31
            }
          },
          "preview": "boolean closed, constantSpeed;",
          "children": []
        },
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 58
            }
          },
          "preview": "final Color color = new Color(1, 0.5f, 0, 1); // ff7f00ff",
          "children": []
        },
        {
          "name": "PathAttachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 2
            }
          },
          "preview": "public PathAttachment (String name) {",
          "children": []
        },
        {
          "name": "PathAttachment(PathAttachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 2
            }
          },
          "preview": "protected PathAttachment (PathAttachment other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "getClosed()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 2
            }
          },
          "preview": "public boolean getClosed () {",
          "documentation": "If true, the start and end knots are connected.",
          "children": []
        },
        {
          "name": "setClosed(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 2
            }
          },
          "preview": "public void setClosed (boolean closed) {",
          "children": []
        },
        {
          "name": "getConstantSpeed()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 2
            }
          },
          "preview": "public boolean getConstantSpeed () {",
          "documentation": "If true, additional calculations are performed to make computing positions along the path more accurate and movement along\nthe path have a constant speed.",
          "children": []
        },
        {
          "name": "setConstantSpeed(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 2
            }
          },
          "preview": "public void setConstantSpeed (boolean constantSpeed) {",
          "children": []
        },
        {
          "name": "getLengths()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 2
            }
          },
          "preview": "public float[] getLengths () {",
          "documentation": "The lengths along the path in the setup pose from the start of the path to the end of each Bezier curve.",
          "children": []
        },
        {
          "name": "setLengths(float[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 2
            }
          },
          "preview": "public void setLengths (float[] lengths) {",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "documentation": "The color of the path as it was in Spine, or a default color if nonessential data was not exported. Paths are not usually\nrendered at runtime.",
          "children": []
        },
        {
          "name": "copy()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PathAttachment.java",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 2
            }
          },
          "preview": "public PathAttachment copy () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PointAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 108,
          "character": 1
        }
      },
      "preview": "public class PointAttachment extends Attachment",
      "documentation": "An attachment which is a single point and a rotation. This can be used to spawn projectiles, particles, etc. A bone can be\nused in similar ways, but a PointAttachment is slightly less expensive to compute and can be hidden, shown, and placed in a\nskin.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-points\">Point Attachments</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "Attachment"
        }
      ],
      "children": [
        {
          "name": "x",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 22
            }
          },
          "preview": "float x, y, rotation;",
          "children": []
        },
        {
          "name": "y",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 22
            }
          },
          "preview": "float x, y, rotation;",
          "children": []
        },
        {
          "name": "rotation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 22
            }
          },
          "preview": "float x, y, rotation;",
          "children": []
        },
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 67
            }
          },
          "preview": "final Color color = new Color(0.9451f, 0.9451f, 0, 1); // f1f100ff",
          "children": []
        },
        {
          "name": "PointAttachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "public PointAttachment (String name) {",
          "children": []
        },
        {
          "name": "PointAttachment(PointAttachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "protected PointAttachment (PointAttachment other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "getX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 2
            }
          },
          "preview": "public float getX () {",
          "children": []
        },
        {
          "name": "setX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 2
            }
          },
          "preview": "public void setX (float x) {",
          "children": []
        },
        {
          "name": "getY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public float getY () {",
          "children": []
        },
        {
          "name": "setY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 2
            }
          },
          "preview": "public void setY (float y) {",
          "children": []
        },
        {
          "name": "getRotation()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 2
            }
          },
          "preview": "public float getRotation () {",
          "children": []
        },
        {
          "name": "setRotation(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 2
            }
          },
          "preview": "public void setRotation (float rotation) {",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "documentation": "The color of the point attachment as it was in Spine, or a default clor if nonessential data was not exported. Point\nattachments are not usually rendered at runtime.",
          "children": []
        },
        {
          "name": "computeWorldPosition(BonePose, Vector2)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 2
            }
          },
          "preview": "public Vector2 computeWorldPosition (BonePose bone, Vector2 point) {",
          "children": []
        },
        {
          "name": "computeWorldRotation(BonePose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 98,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public float computeWorldRotation (BonePose bone) {",
          "children": []
        },
        {
          "name": "copy()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/PointAttachment.java",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 2
            }
          },
          "preview": "public PointAttachment copy () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "RegionAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 307,
          "character": 1
        }
      },
      "preview": "public class RegionAttachment extends Attachment implements HasTextureRegion",
      "documentation": "An attachment that displays a textured quadrilateral.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-regions\">Region attachments</a> in the Spine User Guide.",
      "supertypes": [
        {
          "name": "Attachment"
        },
        {
          "name": "HasTextureRegion"
        }
      ],
      "children": [
        {
          "name": "BLX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 42
            }
          },
          "preview": "static public final int BLX = 0, BLY = 1;",
          "children": []
        },
        {
          "name": "BLY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 42
            }
          },
          "preview": "static public final int BLX = 0, BLY = 1;",
          "children": []
        },
        {
          "name": "ULX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 42
            }
          },
          "preview": "static public final int ULX = 2, ULY = 3;",
          "children": []
        },
        {
          "name": "ULY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 42
            }
          },
          "preview": "static public final int ULX = 2, ULY = 3;",
          "children": []
        },
        {
          "name": "URX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 42
            }
          },
          "preview": "static public final int URX = 4, URY = 5;",
          "children": []
        },
        {
          "name": "URY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 42
            }
          },
          "preview": "static public final int URX = 4, URY = 5;",
          "children": []
        },
        {
          "name": "BRX",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 42
            }
          },
          "preview": "static public final int BRX = 6, BRY = 7;",
          "children": []
        },
        {
          "name": "BRY",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 42
            }
          },
          "preview": "static public final int BRX = 6, BRY = 7;",
          "children": []
        },
        {
          "name": "region",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 30
            }
          },
          "preview": "private TextureRegion region;",
          "children": []
        },
        {
          "name": "path",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 21
            }
          },
          "preview": "private String path;",
          "children": []
        },
        {
          "name": "x",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 69
            }
          },
          "preview": "private float x, y, scaleX = 1, scaleY = 1, rotation, width, height;",
          "children": []
        },
        {
          "name": "y",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 69
            }
          },
          "preview": "private float x, y, scaleX = 1, scaleY = 1, rotation, width, height;",
          "children": []
        },
        {
          "name": "scaleX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 69
            }
          },
          "preview": "private float x, y, scaleX = 1, scaleY = 1, rotation, width, height;",
          "children": []
        },
        {
          "name": "scaleY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 69
            }
          },
          "preview": "private float x, y, scaleX = 1, scaleY = 1, rotation, width, height;",
          "children": []
        },
        {
          "name": "rotation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 69
            }
          },
          "preview": "private float x, y, scaleX = 1, scaleY = 1, rotation, width, height;",
          "children": []
        },
        {
          "name": "width",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 69
            }
          },
          "preview": "private float x, y, scaleX = 1, scaleY = 1, rotation, width, height;",
          "children": []
        },
        {
          "name": "height",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 69
            }
          },
          "preview": "private float x, y, scaleX = 1, scaleY = 1, rotation, width, height;",
          "children": []
        },
        {
          "name": "uvs",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 42
            }
          },
          "preview": "private final float[] uvs = new float[8];",
          "children": []
        },
        {
          "name": "offset",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 45
            }
          },
          "preview": "private final float[] offset = new float[8];",
          "children": []
        },
        {
          "name": "color",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 51
            }
          },
          "preview": "private final Color color = new Color(1, 1, 1, 1);",
          "children": []
        },
        {
          "name": "sequence",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 33
            }
          },
          "preview": "private @Null Sequence sequence;",
          "children": []
        },
        {
          "name": "RegionAttachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public RegionAttachment (String name) {",
          "children": []
        },
        {
          "name": "RegionAttachment(RegionAttachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "protected RegionAttachment (RegionAttachment other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "updateRegion()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 158,
              "character": 2
            }
          },
          "preview": "public void updateRegion () {",
          "documentation": "Calculates the {@link #offset} and {@link #uvs} using the region and the attachment's transform. Must be called if the\nregion, the region's properties, or the transform are changed.",
          "children": []
        },
        {
          "name": "setRegion(TextureRegion)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 160,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 2
            }
          },
          "preview": "public void setRegion (TextureRegion region) {",
          "children": []
        },
        {
          "name": "getRegion()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 167,
              "character": 2
            }
          },
          "preview": "public @Null TextureRegion getRegion () {",
          "children": []
        },
        {
          "name": "computeWorldVertices(Slot, float[], int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 177,
              "character": 0
            },
            "end": {
              "line": 208,
              "character": 2
            }
          },
          "preview": "public void computeWorldVertices (Slot slot, float[] worldVertices, int offset, int stride) {",
          "documentation": "Transforms the attachment's four vertices to world coordinates. If the attachment has a {@link #sequence}, the region may\nbe changed.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.\n@param worldVertices The output world vertices. Must have a length >= <code>offset</code> + 8.\n@param offset The <code>worldVertices</code> index to begin writing values.\n@param stride The number of <code>worldVertices</code> entries between the value pairs written.",
          "children": []
        },
        {
          "name": "getOffset()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 213,
              "character": 0
            },
            "end": {
              "line": 215,
              "character": 2
            }
          },
          "preview": "public float[] getOffset () {",
          "documentation": "For each of the 4 vertices, a pair of <code>x,y</code> values that is the local position of the vertex.\n<p>\nSee {@link #updateRegion()}.",
          "children": []
        },
        {
          "name": "getUVs()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 217,
              "character": 0
            },
            "end": {
              "line": 219,
              "character": 2
            }
          },
          "preview": "public float[] getUVs () {",
          "children": []
        },
        {
          "name": "getX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 222,
              "character": 0
            },
            "end": {
              "line": 224,
              "character": 2
            }
          },
          "preview": "public float getX () {",
          "documentation": "The local x translation.",
          "children": []
        },
        {
          "name": "setX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 226,
              "character": 0
            },
            "end": {
              "line": 228,
              "character": 2
            }
          },
          "preview": "public void setX (float x) {",
          "children": []
        },
        {
          "name": "getY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 231,
              "character": 0
            },
            "end": {
              "line": 233,
              "character": 2
            }
          },
          "preview": "public float getY () {",
          "documentation": "The local y translation.",
          "children": []
        },
        {
          "name": "setY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 235,
              "character": 0
            },
            "end": {
              "line": 237,
              "character": 2
            }
          },
          "preview": "public void setY (float y) {",
          "children": []
        },
        {
          "name": "getScaleX()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 240,
              "character": 0
            },
            "end": {
              "line": 242,
              "character": 2
            }
          },
          "preview": "public float getScaleX () {",
          "documentation": "The local scaleX.",
          "children": []
        },
        {
          "name": "setScaleX(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 244,
              "character": 0
            },
            "end": {
              "line": 246,
              "character": 2
            }
          },
          "preview": "public void setScaleX (float scaleX) {",
          "children": []
        },
        {
          "name": "getScaleY()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 249,
              "character": 0
            },
            "end": {
              "line": 251,
              "character": 2
            }
          },
          "preview": "public float getScaleY () {",
          "documentation": "The local scaleY.",
          "children": []
        },
        {
          "name": "setScaleY(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 253,
              "character": 0
            },
            "end": {
              "line": 255,
              "character": 2
            }
          },
          "preview": "public void setScaleY (float scaleY) {",
          "children": []
        },
        {
          "name": "getRotation()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 258,
              "character": 0
            },
            "end": {
              "line": 260,
              "character": 2
            }
          },
          "preview": "public float getRotation () {",
          "documentation": "The local rotation.",
          "children": []
        },
        {
          "name": "setRotation(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 262,
              "character": 0
            },
            "end": {
              "line": 264,
              "character": 2
            }
          },
          "preview": "public void setRotation (float rotation) {",
          "children": []
        },
        {
          "name": "getWidth()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 267,
              "character": 0
            },
            "end": {
              "line": 269,
              "character": 2
            }
          },
          "preview": "public float getWidth () {",
          "documentation": "The width of the region attachment in Spine.",
          "children": []
        },
        {
          "name": "setWidth(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 271,
              "character": 0
            },
            "end": {
              "line": 273,
              "character": 2
            }
          },
          "preview": "public void setWidth (float width) {",
          "children": []
        },
        {
          "name": "getHeight()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 276,
              "character": 0
            },
            "end": {
              "line": 278,
              "character": 2
            }
          },
          "preview": "public float getHeight () {",
          "documentation": "The height of the region attachment in Spine.",
          "children": []
        },
        {
          "name": "setHeight(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 280,
              "character": 0
            },
            "end": {
              "line": 282,
              "character": 2
            }
          },
          "preview": "public void setHeight (float height) {",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 284,
              "character": 0
            },
            "end": {
              "line": 286,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "children": []
        },
        {
          "name": "getPath()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 288,
              "character": 0
            },
            "end": {
              "line": 290,
              "character": 2
            }
          },
          "preview": "public String getPath () {",
          "children": []
        },
        {
          "name": "setPath(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 292,
              "character": 0
            },
            "end": {
              "line": 294,
              "character": 2
            }
          },
          "preview": "public void setPath (String path) {",
          "children": []
        },
        {
          "name": "getSequence()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 296,
              "character": 0
            },
            "end": {
              "line": 298,
              "character": 2
            }
          },
          "preview": "public @Null Sequence getSequence () {",
          "children": []
        },
        {
          "name": "setSequence(Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 300,
              "character": 0
            },
            "end": {
              "line": 302,
              "character": 2
            }
          },
          "preview": "public void setSequence (@Null Sequence sequence) {",
          "children": []
        },
        {
          "name": "copy()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/RegionAttachment.java",
          "range": {
            "start": {
              "line": 304,
              "character": 0
            },
            "end": {
              "line": 306,
              "character": 2
            }
          },
          "preview": "public RegionAttachment copy () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Sequence",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 122,
          "character": 1
        }
      },
      "preview": "public class Sequence",
      "children": [
        {
          "name": "nextID",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 27
            }
          },
          "preview": "static private int nextID;",
          "children": []
        },
        {
          "name": "id",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 33
            }
          },
          "preview": "private final int id = nextID();",
          "children": []
        },
        {
          "name": "regions",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 39
            }
          },
          "preview": "private final TextureRegion[] regions;",
          "children": []
        },
        {
          "name": "start",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 39
            }
          },
          "preview": "private int start, digits, setupIndex;",
          "children": []
        },
        {
          "name": "digits",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 39
            }
          },
          "preview": "private int start, digits, setupIndex;",
          "children": []
        },
        {
          "name": "setupIndex",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 39
            }
          },
          "preview": "private int start, digits, setupIndex;",
          "children": []
        },
        {
          "name": "Sequence(int)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "public Sequence (int count) {",
          "children": []
        },
        {
          "name": "Sequence(Sequence)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 2
            }
          },
          "preview": "protected Sequence (Sequence other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "apply(SlotPose, HasTextureRegion)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 2
            }
          },
          "preview": "public void apply (SlotPose slot, HasTextureRegion attachment) {",
          "children": []
        },
        {
          "name": "getPath(String, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 2
            }
          },
          "preview": "public String getPath (String basePath, int index) {",
          "children": []
        },
        {
          "name": "getStart()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 2
            }
          },
          "preview": "public int getStart () {",
          "children": []
        },
        {
          "name": "setStart(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 2
            }
          },
          "preview": "public void setStart (int start) {",
          "children": []
        },
        {
          "name": "getDigits()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 2
            }
          },
          "preview": "public int getDigits () {",
          "children": []
        },
        {
          "name": "setDigits(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 2
            }
          },
          "preview": "public void setDigits (int digits) {",
          "children": []
        },
        {
          "name": "getSetupIndex()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public int getSetupIndex () {",
          "documentation": "The index of the region to show for the setup pose.",
          "children": []
        },
        {
          "name": "setSetupIndex(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public void setSetupIndex (int index) {",
          "children": []
        },
        {
          "name": "getRegions()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public TextureRegion[] getRegions () {",
          "children": []
        },
        {
          "name": "getId()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 2
            }
          },
          "preview": "public int getId () {",
          "documentation": "Returns a unique ID for this attachment.",
          "children": []
        },
        {
          "name": "nextID()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 2
            }
          },
          "preview": "static private synchronized int nextID () {",
          "children": []
        },
        {
          "name": "SequenceMode",
          "kind": "enum",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
          "range": {
            "start": {
              "line": 117,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 2
            }
          },
          "preview": "static public enum SequenceMode",
          "children": [
            {
              "name": "hold",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
              "range": {
                "start": {
                  "line": 118,
                  "character": 0
                },
                "end": {
                  "line": 118,
                  "character": 6
                }
              },
              "preview": "hold, once, loop, pingpong, onceReverse, loopReverse, pingpongReverse;",
              "children": []
            },
            {
              "name": "once",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
              "range": {
                "start": {
                  "line": 118,
                  "character": 0
                },
                "end": {
                  "line": 118,
                  "character": 12
                }
              },
              "preview": "hold, once, loop, pingpong, onceReverse, loopReverse, pingpongReverse;",
              "children": []
            },
            {
              "name": "loop",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
              "range": {
                "start": {
                  "line": 118,
                  "character": 0
                },
                "end": {
                  "line": 118,
                  "character": 18
                }
              },
              "preview": "hold, once, loop, pingpong, onceReverse, loopReverse, pingpongReverse;",
              "children": []
            },
            {
              "name": "pingpong",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
              "range": {
                "start": {
                  "line": 118,
                  "character": 0
                },
                "end": {
                  "line": 118,
                  "character": 28
                }
              },
              "preview": "hold, once, loop, pingpong, onceReverse, loopReverse, pingpongReverse;",
              "children": []
            },
            {
              "name": "onceReverse",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
              "range": {
                "start": {
                  "line": 118,
                  "character": 0
                },
                "end": {
                  "line": 118,
                  "character": 41
                }
              },
              "preview": "hold, once, loop, pingpong, onceReverse, loopReverse, pingpongReverse;",
              "children": []
            },
            {
              "name": "loopReverse",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
              "range": {
                "start": {
                  "line": 118,
                  "character": 0
                },
                "end": {
                  "line": 118,
                  "character": 54
                }
              },
              "preview": "hold, once, loop, pingpong, onceReverse, loopReverse, pingpongReverse;",
              "children": []
            },
            {
              "name": "pingpongReverse",
              "kind": "enumMember",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
              "range": {
                "start": {
                  "line": 118,
                  "character": 0
                },
                "end": {
                  "line": 118,
                  "character": 71
                }
              },
              "preview": "hold, once, loop, pingpong, onceReverse, loopReverse, pingpongReverse;",
              "children": []
            },
            {
              "name": "values",
              "kind": "constant",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/Sequence.java",
              "range": {
                "start": {
                  "line": 120,
                  "character": 0
                },
                "end": {
                  "line": 120,
                  "character": 55
                }
              },
              "preview": "static public final SequenceMode[] values = values();",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/SkeletonAttachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/SkeletonAttachment.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 60,
          "character": 1
        }
      },
      "preview": "public class SkeletonAttachment extends Attachment",
      "documentation": "Attachment that displays a skeleton.",
      "supertypes": [
        {
          "name": "Attachment"
        }
      ],
      "children": [
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/SkeletonAttachment.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 33
            }
          },
          "preview": "private @Null Skeleton skeleton;",
          "children": []
        },
        {
          "name": "SkeletonAttachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/SkeletonAttachment.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 2
            }
          },
          "preview": "public SkeletonAttachment (String name) {",
          "children": []
        },
        {
          "name": "SkeletonAttachment(SkeletonAttachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/SkeletonAttachment.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 2
            }
          },
          "preview": "protected SkeletonAttachment (SkeletonAttachment other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "getSkeleton()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/SkeletonAttachment.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "public @Null Skeleton getSkeleton () {",
          "children": []
        },
        {
          "name": "setSkeleton(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/SkeletonAttachment.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "public void setSkeleton (@Null Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "copy()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/SkeletonAttachment.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 2
            }
          },
          "preview": "public SkeletonAttachment copy () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.attachments",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 47
        }
      },
      "preview": "package com.esotericsoftware.spine.attachments;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "VertexAttachment",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 198,
          "character": 1
        }
      },
      "preview": "abstract public class VertexAttachment extends Attachment",
      "documentation": "Base class for an attachment with vertices that are transformed by one or more bones and can be deformed by a slot's\n{@link SlotPose#getDeform()}.",
      "supertypes": [
        {
          "name": "Attachment"
        }
      ],
      "children": [
        {
          "name": "nextID",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "static private int nextID;",
          "children": []
        },
        {
          "name": "id",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 33
            }
          },
          "preview": "private final int id = nextID();",
          "children": []
        },
        {
          "name": "timelineAttachment",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 44
            }
          },
          "preview": "@Null Attachment timelineAttachment = this;",
          "children": []
        },
        {
          "name": "bones",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 19
            }
          },
          "preview": "@Null int[] bones;",
          "children": []
        },
        {
          "name": "vertices",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 18
            }
          },
          "preview": "float[] vertices;",
          "children": []
        },
        {
          "name": "worldVerticesLength",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 25
            }
          },
          "preview": "int worldVerticesLength;",
          "children": []
        },
        {
          "name": "VertexAttachment(String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "public VertexAttachment (String name) {",
          "children": []
        },
        {
          "name": "VertexAttachment(VertexAttachment)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 2
            }
          },
          "preview": "public VertexAttachment (VertexAttachment other) {",
          "documentation": "Copy constructor.",
          "children": []
        },
        {
          "name": "computeWorldVertices(Skeleton, Slot, int, int, float[], int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 144,
              "character": 2
            }
          },
          "preview": "public void computeWorldVertices (Skeleton skeleton, Slot slot, int start, int count, float[] worldVertices, int offset,",
          "documentation": "Transforms the attachment's local {@link #getVertices()} to world coordinates. If the slot's {@link SlotPose#getDeform()}\nis not empty, it is used to deform the vertices.\n<p>\nSee <a href=\"https://esotericsoftware.com/spine-runtime-skeletons#World-transforms\">World transforms</a> in the Spine\nRuntimes Guide.\n@param start The index of the first {@link #getVertices()} value to transform. Each vertex has 2 values, x and y.\n@param count The number of world vertex values to output. Must be <= {@link #getWorldVerticesLength()} - <code>start</code>.\n@param worldVertices The output world vertices. Must have a length >= <code>offset</code> + <code>count</code> *\n<code>stride</code> / 2.\n@param offset The <code>worldVertices</code> index to begin writing values.\n@param stride The number of <code>worldVertices</code> entries between the value pairs written.",
          "children": []
        },
        {
          "name": "getBones()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 149,
              "character": 0
            },
            "end": {
              "line": 151,
              "character": 2
            }
          },
          "preview": "public @Null int[] getBones () {",
          "documentation": "The bones which affect the {@link #getVertices()}. The array entries are, for each vertex, the number of bones affecting\nthe vertex followed by that many bone indices, which is the index of the bone in {@link Skeleton#getBones()}. Will be null\nif this attachment has no weights.",
          "children": []
        },
        {
          "name": "setBones(int[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 154,
              "character": 0
            },
            "end": {
              "line": 156,
              "character": 2
            }
          },
          "preview": "public void setBones (@Null int[] bones) {",
          "documentation": "@param bones May be null if this attachment has no weights.",
          "children": []
        },
        {
          "name": "getVertices()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 161,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 2
            }
          },
          "preview": "public float[] getVertices () {",
          "documentation": "The vertex positions in the bone's coordinate system. For a non-weighted attachment, the values are <code>x,y</code>\nentries for each vertex. For a weighted attachment, the values are <code>x,y,weight</code> entries for each bone affecting\neach vertex.",
          "children": []
        },
        {
          "name": "setVertices(float[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 167,
              "character": 2
            }
          },
          "preview": "public void setVertices (float[] vertices) {",
          "children": []
        },
        {
          "name": "getWorldVerticesLength()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 171,
              "character": 0
            },
            "end": {
              "line": 173,
              "character": 2
            }
          },
          "preview": "public int getWorldVerticesLength () {",
          "documentation": "The maximum number of world vertex values that can be output by\n{@link #computeWorldVertices(Skeleton, Slot, int, int, float[], int, int)} using the <code>count</code> parameter.",
          "children": []
        },
        {
          "name": "setWorldVerticesLength(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 175,
              "character": 0
            },
            "end": {
              "line": 177,
              "character": 2
            }
          },
          "preview": "public void setWorldVerticesLength (int worldVerticesLength) {",
          "children": []
        },
        {
          "name": "getTimelineAttachment()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 181,
              "character": 0
            },
            "end": {
              "line": 183,
              "character": 2
            }
          },
          "preview": "public @Null Attachment getTimelineAttachment () {",
          "documentation": "Timelines for the timeline attachment are also applied to this attachment.\n@return May be null if no attachment-specific timelines should be applied.",
          "children": []
        },
        {
          "name": "setTimelineAttachment(Attachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 186,
              "character": 0
            },
            "end": {
              "line": 188,
              "character": 2
            }
          },
          "preview": "public void setTimelineAttachment (Attachment timelineAttachment) {",
          "documentation": "@param timelineAttachment May be null if no attachment-specific timelines should be applied.",
          "children": []
        },
        {
          "name": "getId()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 191,
              "character": 0
            },
            "end": {
              "line": 193,
              "character": 2
            }
          },
          "preview": "public int getId () {",
          "documentation": "Returns a unique ID for this attachment.",
          "children": []
        },
        {
          "name": "nextID()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/attachments/VertexAttachment.java",
          "range": {
            "start": {
              "line": 195,
              "character": 0
            },
            "end": {
              "line": 197,
              "character": 2
            }
          },
          "preview": "static private synchronized int nextID () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonActor",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 117,
          "character": 1
        }
      },
      "preview": "public class SkeletonActor extends Actor",
      "documentation": "A scene2d actor that draws a skeleton.",
      "supertypes": [
        {
          "name": "Actor"
        }
      ],
      "children": [
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 35
            }
          },
          "preview": "private SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "private Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "resetBlendFunction",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 43
            }
          },
          "preview": "private boolean resetBlendFunction = true;",
          "children": []
        },
        {
          "name": "SkeletonActor()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 2
            }
          },
          "preview": "public SkeletonActor () {",
          "documentation": "Creates an uninitialized SkeletonActor. The renderer, skeleton, and animation state must be set before use.",
          "children": []
        },
        {
          "name": "SkeletonActor(SkeletonRenderer, Skeleton, AnimationState)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "public SkeletonActor (SkeletonRenderer renderer, Skeleton skeleton, AnimationState state) {",
          "children": []
        },
        {
          "name": "act(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 2
            }
          },
          "preview": "public void act (float delta) {",
          "children": []
        },
        {
          "name": "draw(Batch, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public void draw (Batch batch, float parentAlpha) {",
          "children": []
        },
        {
          "name": "updateWorldTransform()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "protected void updateWorldTransform () {",
          "children": []
        },
        {
          "name": "getRenderer()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public SkeletonRenderer getRenderer () {",
          "children": []
        },
        {
          "name": "setRenderer(SkeletonRenderer)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public void setRenderer (SkeletonRenderer renderer) {",
          "children": []
        },
        {
          "name": "getSkeleton()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public Skeleton getSkeleton () {",
          "children": []
        },
        {
          "name": "setSkeleton(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public void setSkeleton (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getAnimationState()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public AnimationState getAnimationState () {",
          "children": []
        },
        {
          "name": "setAnimationState(AnimationState)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public void setAnimationState (AnimationState state) {",
          "children": []
        },
        {
          "name": "getResetBlendFunction()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 2
            }
          },
          "preview": "public boolean getResetBlendFunction () {",
          "children": []
        },
        {
          "name": "setResetBlendFunction(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActor.java",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 2
            }
          },
          "preview": "public void setResetBlendFunction (boolean resetBlendFunction) {",
          "documentation": "If false, the blend function will be left as whatever {@link SkeletonRenderer#draw(Batch, Skeleton)} set. This can reduce\nbatch flushes in some cases, but means other rendering may need to first set the blend function. Default is true.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonActorPool",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 130,
          "character": 1
        }
      },
      "preview": "public class SkeletonActorPool extends Pool<SkeletonActor>",
      "supertypes": [
        {
          "name": "Pool",
          "typeArguments": [
            "SkeletonActor"
          ]
        }
      ],
      "children": [
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 35
            }
          },
          "preview": "private SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "stateData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 30
            }
          },
          "preview": "AnimationStateData stateData;",
          "children": []
        },
        {
          "name": "skeletonPool",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 43
            }
          },
          "preview": "private final Pool<Skeleton> skeletonPool;",
          "children": []
        },
        {
          "name": "statePool",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 46
            }
          },
          "preview": "private final Pool<AnimationState> statePool;",
          "children": []
        },
        {
          "name": "obtained",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 45
            }
          },
          "preview": "private final Array<SkeletonActor> obtained;",
          "children": []
        },
        {
          "name": "SkeletonActorPool(SkeletonRenderer, SkeletonData, AnimationStateData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 2
            }
          },
          "preview": "public SkeletonActorPool (SkeletonRenderer renderer, SkeletonData skeletonData, AnimationStateData stateData) {",
          "children": []
        },
        {
          "name": "SkeletonActorPool(SkeletonRenderer, SkeletonData, AnimationStateData, int, int)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 2
            }
          },
          "preview": "public SkeletonActorPool (SkeletonRenderer renderer, SkeletonData skeletonData, AnimationStateData stateData,",
          "children": [
            {
              "name": "new Pool() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
              "range": {
                "start": {
                  "line": 65,
                  "character": 0
                },
                "end": {
                  "line": 77,
                  "character": 3
                }
              },
              "preview": "skeletonPool = new Pool<Skeleton>(initialCapacity, max)",
              "children": [
                {
                  "name": "newObject()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
                  "range": {
                    "start": {
                      "line": 66,
                      "character": 0
                    },
                    "end": {
                      "line": 68,
                      "character": 4
                    }
                  },
                  "preview": "protected Skeleton newObject () {",
                  "children": []
                },
                {
                  "name": "reset(Skeleton)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
                  "range": {
                    "start": {
                      "line": 70,
                      "character": 0
                    },
                    "end": {
                      "line": 76,
                      "character": 4
                    }
                  },
                  "preview": "protected void reset (Skeleton skeleton) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new Pool() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
              "range": {
                "start": {
                  "line": 79,
                  "character": 0
                },
                "end": {
                  "line": 88,
                  "character": 3
                }
              },
              "preview": "statePool = new Pool<AnimationState>(initialCapacity, max)",
              "children": [
                {
                  "name": "newObject()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
                  "range": {
                    "start": {
                      "line": 80,
                      "character": 0
                    },
                    "end": {
                      "line": 82,
                      "character": 4
                    }
                  },
                  "preview": "protected AnimationState newObject () {",
                  "children": []
                },
                {
                  "name": "reset(AnimationState)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
                  "range": {
                    "start": {
                      "line": 84,
                      "character": 0
                    },
                    "end": {
                      "line": 87,
                      "character": 4
                    }
                  },
                  "preview": "protected void reset (AnimationState state) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "freeComplete()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public void freeComplete () {",
          "documentation": "Each obtained skeleton actor that is no longer playing an animation is removed from the stage and returned to the pool.",
          "children": []
        },
        {
          "name": "newObject()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 2
            }
          },
          "preview": "protected SkeletonActor newObject () {",
          "children": []
        },
        {
          "name": "obtain()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 2
            }
          },
          "preview": "public SkeletonActor obtain () {",
          "documentation": "This pool keeps a reference to the obtained instance, so it should be returned to the pool via {@link #free(SkeletonActor)}\n, {@link #freeAll(Array)} or {@link #freeComplete()} to avoid leaking memory.",
          "children": []
        },
        {
          "name": "reset(SkeletonActor)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 2
            }
          },
          "preview": "protected void reset (SkeletonActor actor) {",
          "children": []
        },
        {
          "name": "getObtained()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonActorPool.java",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 2
            }
          },
          "preview": "public Array<SkeletonActor> getObtained () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonClipping",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
      "range": {
        "start": {
          "line": 39,
          "character": 0
        },
        "end": {
          "line": 494,
          "character": 1
        }
      },
      "preview": "public class SkeletonClipping",
      "children": [
        {
          "name": "triangulator",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 62
            }
          },
          "preview": "private final Triangulator triangulator = new Triangulator();",
          "children": []
        },
        {
          "name": "clippingPolygon",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 61
            }
          },
          "preview": "private final FloatArray clippingPolygon = new FloatArray();",
          "children": []
        },
        {
          "name": "clipOutput",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 59
            }
          },
          "preview": "private final FloatArray clipOutput = new FloatArray(128);",
          "children": []
        },
        {
          "name": "clippedVertices",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 64
            }
          },
          "preview": "private final FloatArray clippedVertices = new FloatArray(128);",
          "children": []
        },
        {
          "name": "clippedUvs",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 57
            }
          },
          "preview": "private final FloatArray clippedUvs = new FloatArray(0);",
          "children": []
        },
        {
          "name": "clippedTriangles",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 65
            }
          },
          "preview": "private final ShortArray clippedTriangles = new ShortArray(128);",
          "children": []
        },
        {
          "name": "scratch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 53
            }
          },
          "preview": "private final FloatArray scratch = new FloatArray();",
          "children": []
        },
        {
          "name": "clipAttachment",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 43
            }
          },
          "preview": "private ClippingAttachment clipAttachment;",
          "children": []
        },
        {
          "name": "clippingPolygons",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 44
            }
          },
          "preview": "private Array<FloatArray> clippingPolygons;",
          "children": []
        },
        {
          "name": "clipStart(Skeleton, Slot, ClippingAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 2
            }
          },
          "preview": "public void clipStart (Skeleton skeleton, Slot slot, ClippingAttachment clip) {",
          "children": []
        },
        {
          "name": "clipEnd(Slot)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 2
            }
          },
          "preview": "public void clipEnd (Slot slot) {",
          "children": []
        },
        {
          "name": "clipEnd()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 2
            }
          },
          "preview": "public void clipEnd () {",
          "children": []
        },
        {
          "name": "isClipping()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 2
            }
          },
          "preview": "public boolean isClipping () {",
          "children": []
        },
        {
          "name": "clipTriangles(float[], short[], int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 2
            }
          },
          "preview": "public boolean clipTriangles (float[] vertices, short[] triangles, int trianglesLength) {",
          "children": []
        },
        {
          "name": "clipTriangles(float[], short[], int, float[], float, float, boolean, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 157,
              "character": 0
            },
            "end": {
              "line": 273,
              "character": 2
            }
          },
          "preview": "public boolean clipTriangles (float[] vertices, short[] triangles, int trianglesLength, float[] uvs, float light, float dark,",
          "children": []
        },
        {
          "name": "clipTrianglesUnpacked(float[], int, short[], int, float[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 275,
              "character": 0
            },
            "end": {
              "line": 361,
              "character": 2
            }
          },
          "preview": "public void clipTrianglesUnpacked (float[] vertices, int vertexStart, short[] triangles, int trianglesLength, float[] uvs) {",
          "children": []
        },
        {
          "name": "clip(float, float, float, float, float, float, FloatArray, FloatArray)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 365,
              "character": 0
            },
            "end": {
              "line": 456,
              "character": 2
            }
          },
          "preview": "private boolean clip (float x1, float y1, float x2, float y2, float x3, float y3, FloatArray clippingArea, FloatArray output) {",
          "documentation": "Clips the input triangle against the convex, clockwise clipping area. If the triangle lies entirely within the clipping\narea, false is returned. The clipping area must duplicate the first vertex at the end of the vertices list.",
          "children": []
        },
        {
          "name": "getClippedVertices()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 458,
              "character": 0
            },
            "end": {
              "line": 460,
              "character": 2
            }
          },
          "preview": "public FloatArray getClippedVertices () {",
          "children": []
        },
        {
          "name": "getClippedUvs()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 463,
              "character": 0
            },
            "end": {
              "line": 465,
              "character": 2
            }
          },
          "preview": "public FloatArray getClippedUvs () {",
          "documentation": "Returns an empty array unless {@link #clipTrianglesUnpacked(float[], int, short[], int, float[])} was used. *",
          "children": []
        },
        {
          "name": "getClippedTriangles()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 467,
              "character": 0
            },
            "end": {
              "line": 469,
              "character": 2
            }
          },
          "preview": "public ShortArray getClippedTriangles () {",
          "children": []
        },
        {
          "name": "makeClockwise(FloatArray)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonClipping.java",
          "range": {
            "start": {
              "line": 471,
              "character": 0
            },
            "end": {
              "line": 493,
              "character": 2
            }
          },
          "preview": "static void makeClockwise (FloatArray polygon) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonDataLoader",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
      "range": {
        "start": {
          "line": 63,
          "character": 0
        },
        "end": {
          "line": 134,
          "character": 1
        }
      },
      "preview": "public class SkeletonDataLoader extends AsynchronousAssetLoader<SkeletonData, SkeletonDataLoader.SkeletonDataParameter>",
      "documentation": "An asset loader to create and load skeleton data. The data file is assumed to be binary if it ends with <code>.skel</code>,\notherwise JSON is assumed. The {@link SkeletonDataParameter} can provide a texture atlas name or an {@link AttachmentLoader}.\nIf neither is provided, a texture atlas name based on the skeleton file name with an <code>.atlas</code> extension is used.\nWhen a texture atlas name is used, the texture atlas is loaded by the asset manager as a dependency.\n<p>\nExample:\n<pre>\n// Load skeleton.json and skeleton.atlas:\nassetManager.load(\"skeleton.json\", SkeletonData.class);\n// Or specify the atlas/AttachmentLoader and scale:\nassetManager.setLoader(SkeletonData.class, new SkeletonDataLoader(new InternalFileHandleResolver()));\nSkeletonDataParameter parameter = new SkeletonDataParameter(\"skeleton2x.atlas\", 2);\nassetManager.load(\"skeleton.json\", SkeletonData.class, parameter);\n</pre>",
      "supertypes": [
        {
          "name": "AsynchronousAssetLoader",
          "typeArguments": [
            "SkeletonData",
            "SkeletonDataLoader.SkeletonDataParameter"
          ]
        }
      ],
      "children": [
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 35
            }
          },
          "preview": "private SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "SkeletonDataLoader(FileHandleResolver)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 2
            }
          },
          "preview": "public SkeletonDataLoader (FileHandleResolver resolver) {",
          "children": []
        },
        {
          "name": "loadAsync(AssetManager, String, FileHandle, SkeletonDataParameter)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 2
            }
          },
          "preview": "public void loadAsync (AssetManager manager, String fileName, FileHandle file, @Null SkeletonDataParameter parameter) {",
          "children": []
        },
        {
          "name": "loadSync(AssetManager, String, FileHandle, SkeletonDataParameter)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
          "range": {
            "start": {
              "line": 94,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public SkeletonData loadSync (AssetManager manager, String fileName, FileHandle file, @Null SkeletonDataParameter parameter) {",
          "children": []
        },
        {
          "name": "getDependencies(String, FileHandle, SkeletonDataParameter)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public Array<AssetDescriptor> getDependencies (String fileName, FileHandle file, @Null SkeletonDataParameter parameter) {",
          "children": []
        },
        {
          "name": "SkeletonDataParameter",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 2
            }
          },
          "preview": "static public class SkeletonDataParameter extends AssetLoaderParameters<SkeletonData>",
          "supertypes": [
            {
              "name": "AssetLoaderParameters",
              "typeArguments": [
                "SkeletonData"
              ]
            }
          ],
          "children": [
            {
              "name": "atlasName",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
              "range": {
                "start": {
                  "line": 109,
                  "character": 0
                },
                "end": {
                  "line": 109,
                  "character": 26
                }
              },
              "preview": "public String atlasName;",
              "children": []
            },
            {
              "name": "attachmentLoader",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
              "range": {
                "start": {
                  "line": 110,
                  "character": 0
                },
                "end": {
                  "line": 110,
                  "character": 43
                }
              },
              "preview": "public AttachmentLoader attachmentLoader;",
              "children": []
            },
            {
              "name": "scale",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
              "range": {
                "start": {
                  "line": 111,
                  "character": 0
                },
                "end": {
                  "line": 111,
                  "character": 25
                }
              },
              "preview": "public float scale = 1;",
              "children": []
            },
            {
              "name": "SkeletonDataParameter()",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
              "range": {
                "start": {
                  "line": 113,
                  "character": 0
                },
                "end": {
                  "line": 114,
                  "character": 3
                }
              },
              "preview": "public SkeletonDataParameter () {",
              "children": []
            },
            {
              "name": "SkeletonDataParameter(String)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
              "range": {
                "start": {
                  "line": 116,
                  "character": 0
                },
                "end": {
                  "line": 118,
                  "character": 3
                }
              },
              "preview": "public SkeletonDataParameter (String atlasName) {",
              "children": []
            },
            {
              "name": "SkeletonDataParameter(String, float)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
              "range": {
                "start": {
                  "line": 120,
                  "character": 0
                },
                "end": {
                  "line": 123,
                  "character": 3
                }
              },
              "preview": "public SkeletonDataParameter (String atlasName, float scale) {",
              "children": []
            },
            {
              "name": "SkeletonDataParameter(AttachmentLoader)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
              "range": {
                "start": {
                  "line": 125,
                  "character": 0
                },
                "end": {
                  "line": 127,
                  "character": 3
                }
              },
              "preview": "public SkeletonDataParameter (AttachmentLoader attachmentLoader) {",
              "children": []
            },
            {
              "name": "SkeletonDataParameter(AttachmentLoader, float)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDataLoader.java",
              "range": {
                "start": {
                  "line": 129,
                  "character": 0
                },
                "end": {
                  "line": 132,
                  "character": 3
                }
              },
              "preview": "public SkeletonDataParameter (AttachmentLoader attachmentLoader, float scale) {",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonDrawable",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 110,
          "character": 1
        }
      },
      "preview": "public class SkeletonDrawable extends BaseDrawable",
      "documentation": "A scene2d drawable that draws a skeleton. The animation state and skeleton must be updated each frame, or\n{@link #update(float)} called each frame.",
      "supertypes": [
        {
          "name": "BaseDrawable"
        }
      ],
      "children": [
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 35
            }
          },
          "preview": "private SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "private Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "resetBlendFunction",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 43
            }
          },
          "preview": "private boolean resetBlendFunction = true;",
          "children": []
        },
        {
          "name": "SkeletonDrawable()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 2
            }
          },
          "preview": "public SkeletonDrawable () {",
          "documentation": "Creates an uninitialized SkeletonDrawable. The renderer, skeleton, and animation state must be set before use.",
          "children": []
        },
        {
          "name": "SkeletonDrawable(SkeletonRenderer, Skeleton, AnimationState)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "public SkeletonDrawable (SkeletonRenderer renderer, Skeleton skeleton, AnimationState state) {",
          "children": []
        },
        {
          "name": "update(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public void update (float delta) {",
          "children": []
        },
        {
          "name": "draw(Batch, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 2
            }
          },
          "preview": "public void draw (Batch batch, float x, float y, float width, float height) {",
          "children": []
        },
        {
          "name": "updateWorldTransform()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 2
            }
          },
          "preview": "protected void updateWorldTransform () {",
          "children": []
        },
        {
          "name": "getRenderer()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 2
            }
          },
          "preview": "public SkeletonRenderer getRenderer () {",
          "children": []
        },
        {
          "name": "setRenderer(SkeletonRenderer)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 2
            }
          },
          "preview": "public void setRenderer (SkeletonRenderer renderer) {",
          "children": []
        },
        {
          "name": "getSkeleton()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 2
            }
          },
          "preview": "public Skeleton getSkeleton () {",
          "children": []
        },
        {
          "name": "setSkeleton(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 2
            }
          },
          "preview": "public void setSkeleton (Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "getAnimationState()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 2
            }
          },
          "preview": "public AnimationState getAnimationState () {",
          "children": []
        },
        {
          "name": "setAnimationState(AnimationState)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 2
            }
          },
          "preview": "public void setAnimationState (AnimationState state) {",
          "children": []
        },
        {
          "name": "getResetBlendFunction()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public boolean getResetBlendFunction () {",
          "children": []
        },
        {
          "name": "setResetBlendFunction(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonDrawable.java",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 2
            }
          },
          "preview": "public void setResetBlendFunction (boolean resetBlendFunction) {",
          "documentation": "If false, the blend function will be left as whatever {@link SkeletonRenderer#draw(Batch, Skeleton)} set. This can reduce\nbatch flushes in some cases, but means other rendering may need to first set the blend function. Default is true.",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonPool.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonPool",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonPool.java",
      "range": {
        "start": {
          "line": 36,
          "character": 0
        },
        "end": {
          "line": 56,
          "character": 1
        }
      },
      "preview": "public class SkeletonPool extends Pool<Skeleton>",
      "supertypes": [
        {
          "name": "Pool",
          "typeArguments": [
            "Skeleton"
          ]
        }
      ],
      "children": [
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonPool.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 35
            }
          },
          "preview": "private SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "SkeletonPool(SkeletonData)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonPool.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 2
            }
          },
          "preview": "public SkeletonPool (SkeletonData skeletonData) {",
          "children": []
        },
        {
          "name": "SkeletonPool(SkeletonData, int)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonPool.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "public SkeletonPool (SkeletonData skeletonData, int initialCapacity) {",
          "children": []
        },
        {
          "name": "SkeletonPool(SkeletonData, int, int)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonPool.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 2
            }
          },
          "preview": "public SkeletonPool (SkeletonData skeletonData, int initialCapacity, int max) {",
          "children": []
        },
        {
          "name": "newObject()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SkeletonPool.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 2
            }
          },
          "preview": "protected Skeleton newObject () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SpineUtils",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
      "range": {
        "start": {
          "line": 31,
          "character": 0
        },
        "end": {
          "line": 76,
          "character": 1
        }
      },
      "preview": "public class SpineUtils",
      "children": [
        {
          "name": "PI",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 32,
              "character": 43
            }
          },
          "preview": "static public final float PI = 3.1415927f;",
          "children": []
        },
        {
          "name": "PI2",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 33,
              "character": 40
            }
          },
          "preview": "static public final float PI2 = PI * 2;",
          "children": []
        },
        {
          "name": "invPI2",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 34,
              "character": 0
            },
            "end": {
              "line": 34,
              "character": 44
            }
          },
          "preview": "static public final float invPI2 = 1 / PI2;",
          "children": []
        },
        {
          "name": "radiansToDegrees",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 35,
              "character": 0
            },
            "end": {
              "line": 35,
              "character": 56
            }
          },
          "preview": "static public final float radiansToDegrees = 180f / PI;",
          "children": []
        },
        {
          "name": "radDeg",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 36,
              "character": 0
            },
            "end": {
              "line": 36,
              "character": 53
            }
          },
          "preview": "static public final float radDeg = radiansToDegrees;",
          "children": []
        },
        {
          "name": "degreesToRadians",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 37,
              "character": 0
            },
            "end": {
              "line": 37,
              "character": 55
            }
          },
          "preview": "static public final float degreesToRadians = PI / 180;",
          "children": []
        },
        {
          "name": "degRad",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 53
            }
          },
          "preview": "static public final float degRad = degreesToRadians;",
          "children": []
        },
        {
          "name": "cosDeg(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 2
            }
          },
          "preview": "static public float cosDeg (float degrees) {",
          "children": []
        },
        {
          "name": "sinDeg(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 2
            }
          },
          "preview": "static public float sinDeg (float degrees) {",
          "children": []
        },
        {
          "name": "cos(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 2
            }
          },
          "preview": "static public float cos (float radians) {",
          "children": []
        },
        {
          "name": "sin(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 2
            }
          },
          "preview": "static public float sin (float radians) {",
          "children": []
        },
        {
          "name": "atan2Deg(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 2
            }
          },
          "preview": "static public float atan2Deg (float y, float x) {",
          "children": []
        },
        {
          "name": "atan2(float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 2
            }
          },
          "preview": "static public float atan2 (float y, float x) {",
          "children": []
        },
        {
          "name": "arraycopy(Object, int, Object, int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/SpineUtils.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 2
            }
          },
          "preview": "static public void arraycopy (Object src, int srcPos, Object dest, int destPos, int length) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Triangulator",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
      "range": {
        "start": {
          "line": 37,
          "character": 0
        },
        "end": {
          "line": 281,
          "character": 1
        }
      },
      "preview": "class Triangulator",
      "children": [
        {
          "name": "convexPolygons",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 38,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 89
            }
          },
          "preview": "private final Array<FloatArray> convexPolygons = new Array(false, 8, FloatArray[]::new);",
          "children": []
        },
        {
          "name": "convexPolygonsIndices",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 96
            }
          },
          "preview": "private final Array<ShortArray> convexPolygonsIndices = new Array(false, 8, ShortArray[]::new);",
          "children": []
        },
        {
          "name": "indicesArray",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 58
            }
          },
          "preview": "private final ShortArray indicesArray = new ShortArray();",
          "children": []
        },
        {
          "name": "isConcaveArray",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 64
            }
          },
          "preview": "private final BooleanArray isConcaveArray = new BooleanArray();",
          "children": []
        },
        {
          "name": "triangles",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 55
            }
          },
          "preview": "private final ShortArray triangles = new ShortArray();",
          "children": []
        },
        {
          "name": "polygonPool",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 3
            }
          },
          "preview": "private final Pool<FloatArray> polygonPool = new Pool() {",
          "children": [
            {
              "name": "new Pool() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
              "range": {
                "start": {
                  "line": 45,
                  "character": 0
                },
                "end": {
                  "line": 49,
                  "character": 2
                }
              },
              "preview": "private final Pool<FloatArray> polygonPool = new Pool()",
              "children": [
                {
                  "name": "newObject()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
                  "range": {
                    "start": {
                      "line": 46,
                      "character": 0
                    },
                    "end": {
                      "line": 48,
                      "character": 3
                    }
                  },
                  "preview": "protected FloatArray newObject () {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "polygonIndicesPool",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 3
            }
          },
          "preview": "private final Pool<ShortArray> polygonIndicesPool = new Pool() {",
          "children": [
            {
              "name": "new Pool() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
              "range": {
                "start": {
                  "line": 51,
                  "character": 0
                },
                "end": {
                  "line": 55,
                  "character": 2
                }
              },
              "preview": "private final Pool<ShortArray> polygonIndicesPool = new Pool()",
              "children": [
                {
                  "name": "newObject()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
                  "range": {
                    "start": {
                      "line": 52,
                      "character": 0
                    },
                    "end": {
                      "line": 54,
                      "character": 3
                    }
                  },
                  "preview": "protected ShortArray newObject () {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "triangulate(FloatArray)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 2
            }
          },
          "preview": "public ShortArray triangulate (FloatArray verticesArray) {",
          "children": []
        },
        {
          "name": "decompose(FloatArray, ShortArray)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 263,
              "character": 2
            }
          },
          "preview": "public Array<FloatArray> decompose (FloatArray verticesArray, ShortArray triangles) {",
          "children": []
        },
        {
          "name": "isConcave(int, int, float[], short[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 265,
              "character": 0
            },
            "end": {
              "line": 271,
              "character": 2
            }
          },
          "preview": "static private boolean isConcave (int index, int vertexCount, float[] vertices, short[] indices) {",
          "children": []
        },
        {
          "name": "positiveArea(float, float, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 273,
              "character": 0
            },
            "end": {
              "line": 275,
              "character": 2
            }
          },
          "preview": "static private boolean positiveArea (float p1x, float p1y, float p2x, float p2y, float p3x, float p3y) {",
          "children": []
        },
        {
          "name": "winding(float, float, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/Triangulator.java",
          "range": {
            "start": {
              "line": 277,
              "character": 0
            },
            "end": {
              "line": 280,
              "character": 2
            }
          },
          "preview": "static private int winding (float p1x, float p1y, float p2x, float p2y, float p3x, float p3y) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "TwoColorPolygonBatch",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
      "range": {
        "start": {
          "line": 56,
          "character": 0
        },
        "end": {
          "line": 1533,
          "character": 1
        }
      },
      "preview": "public class TwoColorPolygonBatch implements PolygonBatch",
      "documentation": "A batch that renders polygons and performs tinting using a light and dark color.\n<p>\nBecause an additional vertex attribute is used, the {@link Batch} and {@link PolygonBatch} methods that accept float[] vertex\ndata do not perform two color tinting. {@link #drawTwoColor(Texture, float[], int, int)} and\n{@link #drawTwoColor(Texture, float[], int, int, short[], int, int)} are provided to accept float[] vertex data that contains\ntwo colors per vertex.",
      "supertypes": [
        {
          "name": "PolygonBatch"
        }
      ],
      "children": [
        {
          "name": "VERTEX_SIZE",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 46
            }
          },
          "preview": "static final int VERTEX_SIZE = 2 + 1 + 1 + 2;",
          "children": []
        },
        {
          "name": "SPRITE_SIZE",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 48
            }
          },
          "preview": "static final int SPRITE_SIZE = 4 * VERTEX_SIZE;",
          "children": []
        },
        {
          "name": "mesh",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 25
            }
          },
          "preview": "private final Mesh mesh;",
          "children": []
        },
        {
          "name": "vertices",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 32
            }
          },
          "preview": "private final float[] vertices;",
          "children": []
        },
        {
          "name": "triangles",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 33
            }
          },
          "preview": "private final short[] triangles;",
          "children": []
        },
        {
          "name": "transformMatrix",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 55
            }
          },
          "preview": "private final Matrix4 transformMatrix = new Matrix4();",
          "children": []
        },
        {
          "name": "projectionMatrix",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 56
            }
          },
          "preview": "private final Matrix4 projectionMatrix = new Matrix4();",
          "children": []
        },
        {
          "name": "combinedMatrix",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 54
            }
          },
          "preview": "private final Matrix4 combinedMatrix = new Matrix4();",
          "children": []
        },
        {
          "name": "blendingDisabled",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 34
            }
          },
          "preview": "private boolean blendingDisabled;",
          "children": []
        },
        {
          "name": "defaultShader",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 37
            }
          },
          "preview": "private ShaderProgram defaultShader;",
          "children": []
        },
        {
          "name": "ownsDefaultShader",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 35
            }
          },
          "preview": "private boolean ownsDefaultShader;",
          "children": []
        },
        {
          "name": "shader",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 30
            }
          },
          "preview": "private ShaderProgram shader;",
          "children": []
        },
        {
          "name": "vertexIndex",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 40
            }
          },
          "preview": "private int vertexIndex, triangleIndex;",
          "children": []
        },
        {
          "name": "triangleIndex",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 40
            }
          },
          "preview": "private int vertexIndex, triangleIndex;",
          "children": []
        },
        {
          "name": "lastTexture",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 35
            }
          },
          "preview": "private @Null Texture lastTexture;",
          "children": []
        },
        {
          "name": "invTexWidth",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 49
            }
          },
          "preview": "private float invTexWidth = 0, invTexHeight = 0;",
          "children": []
        },
        {
          "name": "invTexHeight",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 49
            }
          },
          "preview": "private float invTexWidth = 0, invTexHeight = 0;",
          "children": []
        },
        {
          "name": "drawing",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 25
            }
          },
          "preview": "private boolean drawing;",
          "children": []
        },
        {
          "name": "blendSrcFunc",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 46
            }
          },
          "preview": "private int blendSrcFunc = GL20.GL_SRC_ALPHA;",
          "children": []
        },
        {
          "name": "blendDstFunc",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 56
            }
          },
          "preview": "private int blendDstFunc = GL20.GL_ONE_MINUS_SRC_ALPHA;",
          "children": []
        },
        {
          "name": "blendSrcFuncAlpha",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 51
            }
          },
          "preview": "private int blendSrcFuncAlpha = GL20.GL_SRC_ALPHA;",
          "children": []
        },
        {
          "name": "blendDstFuncAlpha",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 61
            }
          },
          "preview": "private int blendDstFuncAlpha = GL20.GL_ONE_MINUS_SRC_ALPHA;",
          "children": []
        },
        {
          "name": "premultipliedAlpha",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 36
            }
          },
          "preview": "private boolean premultipliedAlpha;",
          "children": []
        },
        {
          "name": "light",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 51
            }
          },
          "preview": "private final Color light = new Color(1, 1, 1, 1);",
          "children": []
        },
        {
          "name": "dark",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 50
            }
          },
          "preview": "private final Color dark = new Color(0, 0, 0, 1);",
          "children": []
        },
        {
          "name": "lightPacked",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 55
            }
          },
          "preview": "private float lightPacked = Color.WHITE.toFloatBits();",
          "children": []
        },
        {
          "name": "darkPacked",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 54
            }
          },
          "preview": "private float darkPacked = Color.BLACK.toFloatBits();",
          "children": []
        },
        {
          "name": "totalRenderCalls",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 33
            }
          },
          "preview": "public int totalRenderCalls = 0;",
          "documentation": "Number of rendering calls, ever. Will not be reset unless set manually.",
          "children": []
        },
        {
          "name": "TwoColorPolygonBatch()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 2
            }
          },
          "preview": "public TwoColorPolygonBatch () {",
          "documentation": "Constructs a new batch with 2000 max vertices, 4000 max triangles, and the default shader.",
          "children": []
        },
        {
          "name": "TwoColorPolygonBatch(int)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public TwoColorPolygonBatch (int size) {",
          "documentation": "Constructs a new batch with the specified max vertices, twice that for the max triangles, and the default shader.",
          "children": []
        },
        {
          "name": "TwoColorPolygonBatch(int, int)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public TwoColorPolygonBatch (int maxVertices, int maxTriangles) {",
          "documentation": "Constructs a new batch with the specified max vertices and max triangles and the default shader.",
          "children": []
        },
        {
          "name": "TwoColorPolygonBatch(int, int, ShaderProgram)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 2
            }
          },
          "preview": "public TwoColorPolygonBatch (int maxVertices, int maxTriangles, @Null ShaderProgram defaultShader) {",
          "documentation": "Constructs a new batch with the specified max vertices, max triangles, and shader. The shader will not be disposed\nautomatically when the batch is disposed.",
          "children": []
        },
        {
          "name": "begin()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 138,
              "character": 2
            }
          },
          "preview": "public void begin () {",
          "children": []
        },
        {
          "name": "end()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 141,
              "character": 0
            },
            "end": {
              "line": 149,
              "character": 2
            }
          },
          "preview": "public void end () {",
          "children": []
        },
        {
          "name": "setColor(Color)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 152,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 2
            }
          },
          "preview": "public void setColor (Color tint) {",
          "children": []
        },
        {
          "name": "setColor(float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 158,
              "character": 0
            },
            "end": {
              "line": 161,
              "character": 2
            }
          },
          "preview": "public void setColor (float r, float g, float b, float a) {",
          "children": []
        },
        {
          "name": "setPackedColor(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 164,
              "character": 0
            },
            "end": {
              "line": 167,
              "character": 2
            }
          },
          "preview": "public void setPackedColor (float packedColor) {",
          "children": []
        },
        {
          "name": "getColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 170,
              "character": 0
            },
            "end": {
              "line": 172,
              "character": 2
            }
          },
          "preview": "public Color getColor () {",
          "children": []
        },
        {
          "name": "getPackedColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 175,
              "character": 0
            },
            "end": {
              "line": 177,
              "character": 2
            }
          },
          "preview": "public float getPackedColor () {",
          "children": []
        },
        {
          "name": "setDarkColor(Color)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 179,
              "character": 0
            },
            "end": {
              "line": 182,
              "character": 2
            }
          },
          "preview": "public void setDarkColor (Color tint) {",
          "children": []
        },
        {
          "name": "setDarkColor(float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 184,
              "character": 0
            },
            "end": {
              "line": 187,
              "character": 2
            }
          },
          "preview": "public void setDarkColor (float r, float g, float b, float a) {",
          "children": []
        },
        {
          "name": "setPackedDarkColor(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 189,
              "character": 0
            },
            "end": {
              "line": 192,
              "character": 2
            }
          },
          "preview": "public void setPackedDarkColor (float packedColor) {",
          "children": []
        },
        {
          "name": "getDarkColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 194,
              "character": 0
            },
            "end": {
              "line": 196,
              "character": 2
            }
          },
          "preview": "public Color getDarkColor () {",
          "children": []
        },
        {
          "name": "getPackedDarkColor()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 198,
              "character": 0
            },
            "end": {
              "line": 200,
              "character": 2
            }
          },
          "preview": "public float getPackedDarkColor () {",
          "children": []
        },
        {
          "name": "draw(PolygonRegion, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 203,
              "character": 0
            },
            "end": {
              "line": 240,
              "character": 2
            }
          },
          "preview": "public void draw (PolygonRegion region, float x, float y) {",
          "documentation": "Draws a polygon region with the bottom left corner at x,y having the width and height of the region.",
          "children": []
        },
        {
          "name": "draw(PolygonRegion, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 243,
              "character": 0
            },
            "end": {
              "line": 283,
              "character": 2
            }
          },
          "preview": "public void draw (PolygonRegion region, float x, float y, float width, float height) {",
          "documentation": "Draws a polygon region with the bottom left corner at x,y and stretching the region to cover the given width and height.",
          "children": []
        },
        {
          "name": "draw(PolygonRegion, float, float, float, float, float, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 289,
              "character": 0
            },
            "end": {
              "line": 338,
              "character": 2
            }
          },
          "preview": "public void draw (PolygonRegion region, float x, float y, float originX, float originY, float width, float height,",
          "documentation": "Draws the polygon region with the bottom left corner at x,y and stretching the region to cover the given width and height.\nThe polygon region is offset by originX, originY relative to the origin. Scale specifies the scaling factor by which the\npolygon region should be scaled around originX, originY. Rotation specifies the angle of counter clockwise rotation of the\nrectangle around originX, originY.",
          "children": []
        },
        {
          "name": "draw(Texture, float, float, float, float, float, float, float, float, float, int, int, int, int, boolean, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 341,
              "character": 0
            },
            "end": {
              "line": 485,
              "character": 2
            }
          },
          "preview": "public void draw (Texture texture, float x, float y, float originX, float originY, float width, float height, float scaleX,",
          "children": []
        },
        {
          "name": "draw(Texture, float, float, float, float, int, int, int, int, boolean, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 488,
              "character": 0
            },
            "end": {
              "line": 560,
              "character": 2
            }
          },
          "preview": "public void draw (Texture texture, float x, float y, float width, float height, int srcX, int srcY, int srcWidth,",
          "children": []
        },
        {
          "name": "draw(Texture, float, float, int, int, int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 563,
              "character": 0
            },
            "end": {
              "line": 622,
              "character": 2
            }
          },
          "preview": "public void draw (Texture texture, float x, float y, int srcX, int srcY, int srcWidth, int srcHeight) {",
          "children": []
        },
        {
          "name": "draw(Texture, float, float, float, float, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 625,
              "character": 0
            },
            "end": {
              "line": 680,
              "character": 2
            }
          },
          "preview": "public void draw (Texture texture, float x, float y, float width, float height, float u, float v, float u2, float v2) {",
          "children": []
        },
        {
          "name": "draw(Texture, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 683,
              "character": 0
            },
            "end": {
              "line": 685,
              "character": 2
            }
          },
          "preview": "public void draw (Texture texture, float x, float y) {",
          "children": []
        },
        {
          "name": "draw(Texture, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 688,
              "character": 0
            },
            "end": {
              "line": 747,
              "character": 2
            }
          },
          "preview": "public void draw (Texture texture, float x, float y, float width, float height) {",
          "children": []
        },
        {
          "name": "drawTwoColor(Texture, float[], int, int, short[], int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 752,
              "character": 0
            },
            "end": {
              "line": 774,
              "character": 2
            }
          },
          "preview": "public void drawTwoColor (Texture texture, float[] polygonVertices, int verticesOffset, int verticesCount,",
          "documentation": "Draws polygons using the given vertices and triangles. There must be 4 vertices, each made up of 6 elements in this order:\nx, y, lightColor, darkColor, u, v. The {@link #getColor()} and {@link #getDarkColor()} from the TwoColorPolygonBatch is not\napplied.",
          "children": []
        },
        {
          "name": "draw(Texture, float[], int, int, short[], int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 779,
              "character": 0
            },
            "end": {
              "line": 809,
              "character": 2
            }
          },
          "preview": "public void draw (Texture texture, float[] polygonVertices, int verticesOffset, int verticesCount, short[] polygonTriangles,",
          "documentation": "Draws polygons using the given vertices and triangles in the {@link PolygonBatch} format. There must be 4 vertices, each\nmade up of 5 elements in this order: x, y, color, u, v. The {@link #getColor()} and {@link #getDarkColor()} from the\nTwoColorPolygonBatch is not applied.",
          "children": []
        },
        {
          "name": "drawTwoColor(Texture, float[], int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 814,
              "character": 0
            },
            "end": {
              "line": 841,
              "character": 2
            }
          },
          "preview": "public void drawTwoColor (Texture texture, float[] spriteVertices, int offset, int count) {",
          "documentation": "Draws rectangles using the given vertices. There must be 4 vertices, each made up of 6 elements in this order: x, y,\nlightColor, darkColor, u, v. The {@link #getColor()} and {@link #getDarkColor()} from the TwoColorPolygonBatch is not\napplied.",
          "children": []
        },
        {
          "name": "draw(Texture, float[], int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 847,
              "character": 0
            },
            "end": {
              "line": 882,
              "character": 2
            }
          },
          "preview": "public void draw (Texture texture, float[] spriteVertices, int offset, int count) {",
          "documentation": "Draws rectangles using the given vertices in the {@link Batch} format. There must be 4 vertices, each made up of 5 elements\nin this order: x, y, color, u, v. The {@link #getColor()} and {@link #getDarkColor()} from the TwoColorPolygonBatch is not\napplied.",
          "children": []
        },
        {
          "name": "draw(TextureRegion, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 885,
              "character": 0
            },
            "end": {
              "line": 887,
              "character": 2
            }
          },
          "preview": "public void draw (TextureRegion region, float x, float y) {",
          "children": []
        },
        {
          "name": "draw(TextureRegion, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 890,
              "character": 0
            },
            "end": {
              "line": 950,
              "character": 2
            }
          },
          "preview": "public void draw (TextureRegion region, float x, float y, float width, float height) {",
          "children": []
        },
        {
          "name": "draw(TextureRegion, float, float, float, float, float, float, float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 953,
              "character": 0
            },
            "end": {
              "line": 1086,
              "character": 2
            }
          },
          "preview": "public void draw (TextureRegion region, float x, float y, float originX, float originY, float width, float height,",
          "children": []
        },
        {
          "name": "draw(TextureRegion, float, float, float, float, float, float, float, float, float, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1089,
              "character": 0
            },
            "end": {
              "line": 1238,
              "character": 2
            }
          },
          "preview": "public void draw (TextureRegion region, float x, float y, float originX, float originY, float width, float height,",
          "children": []
        },
        {
          "name": "draw(TextureRegion, float, float, Affine2)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1241,
              "character": 0
            },
            "end": {
              "line": 1309,
              "character": 2
            }
          },
          "preview": "public void draw (TextureRegion region, float width, float height, Affine2 transform) {",
          "children": []
        },
        {
          "name": "flush()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1312,
              "character": 0
            },
            "end": {
              "line": 1331,
              "character": 2
            }
          },
          "preview": "public void flush () {",
          "children": []
        },
        {
          "name": "bind(Texture)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1333,
              "character": 0
            },
            "end": {
              "line": 1335,
              "character": 2
            }
          },
          "preview": "protected void bind (Texture texture) {",
          "children": []
        },
        {
          "name": "disableBlending()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1338,
              "character": 0
            },
            "end": {
              "line": 1341,
              "character": 2
            }
          },
          "preview": "public void disableBlending () {",
          "children": []
        },
        {
          "name": "enableBlending()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1344,
              "character": 0
            },
            "end": {
              "line": 1347,
              "character": 2
            }
          },
          "preview": "public void enableBlending () {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1350,
              "character": 0
            },
            "end": {
              "line": 1353,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "getProjectionMatrix()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1356,
              "character": 0
            },
            "end": {
              "line": 1358,
              "character": 2
            }
          },
          "preview": "public Matrix4 getProjectionMatrix () {",
          "children": []
        },
        {
          "name": "getTransformMatrix()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1361,
              "character": 0
            },
            "end": {
              "line": 1363,
              "character": 2
            }
          },
          "preview": "public Matrix4 getTransformMatrix () {",
          "children": []
        },
        {
          "name": "setProjectionMatrix(Matrix4)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1367,
              "character": 0
            },
            "end": {
              "line": 1371,
              "character": 2
            }
          },
          "preview": "public void setProjectionMatrix (Matrix4 projection) {",
          "documentation": "Flushes the batch.",
          "children": []
        },
        {
          "name": "setTransformMatrix(Matrix4)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1375,
              "character": 0
            },
            "end": {
              "line": 1379,
              "character": 2
            }
          },
          "preview": "public void setTransformMatrix (Matrix4 transform) {",
          "documentation": "Flushes the batch.",
          "children": []
        },
        {
          "name": "setPremultipliedAlpha(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1383,
              "character": 0
            },
            "end": {
              "line": 1388,
              "character": 2
            }
          },
          "preview": "public void setPremultipliedAlpha (boolean premultipliedAlpha) {",
          "documentation": "Specifies whether the texture colors have premultiplied alpha. Required for correct dark color tinting. Does not change the\nblending function. Flushes the batch if the setting was changed.",
          "children": []
        },
        {
          "name": "getPremultipliedAlpha()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1390,
              "character": 0
            },
            "end": {
              "line": 1392,
              "character": 2
            }
          },
          "preview": "public boolean getPremultipliedAlpha () {",
          "children": []
        },
        {
          "name": "setupMatrices()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1394,
              "character": 0
            },
            "end": {
              "line": 1399,
              "character": 2
            }
          },
          "preview": "protected void setupMatrices () {",
          "children": []
        },
        {
          "name": "switchTexture(Texture)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1401,
              "character": 0
            },
            "end": {
              "line": 1406,
              "character": 2
            }
          },
          "preview": "private void switchTexture (Texture texture) {",
          "children": []
        },
        {
          "name": "setDefaultShader(ShaderProgram)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1409,
              "character": 0
            },
            "end": {
              "line": 1420,
              "character": 2
            }
          },
          "preview": "public void setDefaultShader (ShaderProgram newDefaultShader) {",
          "documentation": "Flushes the batch if the shader was changed.",
          "children": []
        },
        {
          "name": "setShader(ShaderProgram)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1425,
              "character": 0
            },
            "end": {
              "line": 1434,
              "character": 2
            }
          },
          "preview": "public void setShader (@Null ShaderProgram newShader) {",
          "documentation": "Flushes the batch if the shader was changed.\n@param newShader If null, the default shader is used.",
          "children": []
        },
        {
          "name": "getShader()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1437,
              "character": 0
            },
            "end": {
              "line": 1439,
              "character": 2
            }
          },
          "preview": "public ShaderProgram getShader () {",
          "children": []
        },
        {
          "name": "getDefaultShader()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1441,
              "character": 0
            },
            "end": {
              "line": 1443,
              "character": 2
            }
          },
          "preview": "public ShaderProgram getDefaultShader () {",
          "children": []
        },
        {
          "name": "isBlendingEnabled()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1446,
              "character": 0
            },
            "end": {
              "line": 1448,
              "character": 2
            }
          },
          "preview": "public boolean isBlendingEnabled () {",
          "children": []
        },
        {
          "name": "isDrawing()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1451,
              "character": 0
            },
            "end": {
              "line": 1453,
              "character": 2
            }
          },
          "preview": "public boolean isDrawing () {",
          "children": []
        },
        {
          "name": "setBlendFunction(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1457,
              "character": 0
            },
            "end": {
              "line": 1459,
              "character": 2
            }
          },
          "preview": "public void setBlendFunction (int srcFunc, int dstFunc) {",
          "documentation": "Flushes the batch if the blend function was changed.",
          "children": []
        },
        {
          "name": "setBlendFunctionSeparate(int, int, int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1463,
              "character": 0
            },
            "end": {
              "line": 1471,
              "character": 2
            }
          },
          "preview": "public void setBlendFunctionSeparate (int srcFuncColor, int dstFuncColor, int srcFuncAlpha, int dstFuncAlpha) {",
          "documentation": "Flushes the batch if the blend function was changed.",
          "children": []
        },
        {
          "name": "getBlendSrcFunc()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1474,
              "character": 0
            },
            "end": {
              "line": 1476,
              "character": 2
            }
          },
          "preview": "public int getBlendSrcFunc () {",
          "children": []
        },
        {
          "name": "getBlendDstFunc()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1479,
              "character": 0
            },
            "end": {
              "line": 1481,
              "character": 2
            }
          },
          "preview": "public int getBlendDstFunc () {",
          "children": []
        },
        {
          "name": "getBlendSrcFuncAlpha()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1484,
              "character": 0
            },
            "end": {
              "line": 1486,
              "character": 2
            }
          },
          "preview": "public int getBlendSrcFuncAlpha () {",
          "children": []
        },
        {
          "name": "getBlendDstFuncAlpha()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1489,
              "character": 0
            },
            "end": {
              "line": 1491,
              "character": 2
            }
          },
          "preview": "public int getBlendDstFuncAlpha () {",
          "children": []
        },
        {
          "name": "createDefaultShader()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx/src/com/esotericsoftware/spine/utils/TwoColorPolygonBatch.java",
          "range": {
            "start": {
              "line": 1493,
              "character": 0
            },
            "end": {
              "line": 1532,
              "character": 2
            }
          },
          "preview": "static public ShaderProgram createDefaultShader () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "ActorTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 108,
          "character": 1
        }
      },
      "preview": "public class ActorTest extends ApplicationAdapter",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "stage",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 13
            }
          },
          "preview": "Stage stage;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "skeletonActor",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 29
            }
          },
          "preview": "SkeletonActor skeletonActor;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/ActorTest.java",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "AnimationStateTests",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 1012,
          "character": 1
        }
      },
      "preview": "public class AnimationStateTests",
      "documentation": "Unit tests to ensure {@link AnimationState} is working as expected.",
      "children": [
        {
          "name": "json",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 4
            }
          },
          "preview": "final SkeletonJson json = new SkeletonJson(new AttachmentLoader() {",
          "children": [
            {
              "name": "new AttachmentLoader() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 54,
                  "character": 0
                },
                "end": {
                  "line": 78,
                  "character": 2
                }
              },
              "preview": "final SkeletonJson json = new SkeletonJson(new AttachmentLoader()",
              "children": [
                {
                  "name": "newRegionAttachment(Skin, String, String, Sequence)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 55,
                      "character": 0
                    },
                    "end": {
                      "line": 57,
                      "character": 3
                    }
                  },
                  "preview": "public RegionAttachment newRegionAttachment (Skin skin, String name, String path, @Null Sequence sequence) {",
                  "children": []
                },
                {
                  "name": "newMeshAttachment(Skin, String, String, Sequence)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 59,
                      "character": 0
                    },
                    "end": {
                      "line": 61,
                      "character": 3
                    }
                  },
                  "preview": "public MeshAttachment newMeshAttachment (Skin skin, String name, String path, @Null Sequence sequence) {",
                  "children": []
                },
                {
                  "name": "newBoundingBoxAttachment(Skin, String)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 63,
                      "character": 0
                    },
                    "end": {
                      "line": 65,
                      "character": 3
                    }
                  },
                  "preview": "public BoundingBoxAttachment newBoundingBoxAttachment (Skin skin, String name) {",
                  "children": []
                },
                {
                  "name": "newClippingAttachment(Skin, String)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 67,
                      "character": 0
                    },
                    "end": {
                      "line": 69,
                      "character": 3
                    }
                  },
                  "preview": "public ClippingAttachment newClippingAttachment (Skin skin, String name) {",
                  "children": []
                },
                {
                  "name": "newPathAttachment(Skin, String)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 71,
                      "character": 0
                    },
                    "end": {
                      "line": 73,
                      "character": 3
                    }
                  },
                  "preview": "public PathAttachment newPathAttachment (Skin skin, String name) {",
                  "children": []
                },
                {
                  "name": "newPointAttachment(Skin, String)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 75,
                      "character": 0
                    },
                    "end": {
                      "line": 77,
                      "character": 3
                    }
                  },
                  "preview": "public PointAttachment newPointAttachment (Skin skin, String name) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "stateListener",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 3
            }
          },
          "preview": "final AnimationStateListener stateListener = new AnimationStateListener() {",
          "children": [
            {
              "name": "new AnimationStateListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 80,
                  "character": 0
                },
                "end": {
                  "line": 125,
                  "character": 2
                }
              },
              "preview": "final AnimationStateListener stateListener = new AnimationStateListener()",
              "children": [
                {
                  "name": "start(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 81,
                      "character": 0
                    },
                    "end": {
                      "line": 83,
                      "character": 3
                    }
                  },
                  "preview": "public void start (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "interrupt(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 85,
                      "character": 0
                    },
                    "end": {
                      "line": 87,
                      "character": 3
                    }
                  },
                  "preview": "public void interrupt (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "end(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 89,
                      "character": 0
                    },
                    "end": {
                      "line": 91,
                      "character": 3
                    }
                  },
                  "preview": "public void end (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "dispose(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 93,
                      "character": 0
                    },
                    "end": {
                      "line": 95,
                      "character": 3
                    }
                  },
                  "preview": "public void dispose (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "complete(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 97,
                      "character": 0
                    },
                    "end": {
                      "line": 99,
                      "character": 3
                    }
                  },
                  "preview": "public void complete (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "event(TrackEntry, Event)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 101,
                      "character": 0
                    },
                    "end": {
                      "line": 103,
                      "character": 3
                    }
                  },
                  "preview": "public void event (TrackEntry entry, Event event) {",
                  "children": []
                },
                {
                  "name": "add(Result)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 105,
                      "character": 0
                    },
                    "end": {
                      "line": 124,
                      "character": 3
                    }
                  },
                  "preview": "private void add (Result result) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 33
            }
          },
          "preview": "final SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "actual",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 42
            }
          },
          "preview": "final Array<Result> actual = new Array();",
          "children": []
        },
        {
          "name": "expected",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 44
            }
          },
          "preview": "final Array<Result> expected = new Array();",
          "children": []
        },
        {
          "name": "stateData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 30
            }
          },
          "preview": "AnimationStateData stateData;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 132,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "entryCount",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 16
            }
          },
          "preview": "int entryCount;",
          "children": []
        },
        {
          "name": "time",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 16
            }
          },
          "preview": "float time = 0;",
          "children": []
        },
        {
          "name": "fail",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 135,
              "character": 0
            },
            "end": {
              "line": 135,
              "character": 14
            }
          },
          "preview": "boolean fail;",
          "children": []
        },
        {
          "name": "test",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 10
            }
          },
          "preview": "int test;",
          "children": []
        },
        {
          "name": "AnimationStateTests()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 138,
              "character": 0
            },
            "end": {
              "line": 845,
              "character": 2
            }
          },
          "preview": "AnimationStateTests () {",
          "children": [
            {
              "name": "new TestListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 442,
                  "character": 0
                },
                "end": {
                  "line": 446,
                  "character": 3
                }
              },
              "preview": "run(0.1f, 6, new TestListener()",
              "children": [
                {
                  "name": "frame(float)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 443,
                      "character": 0
                    },
                    "end": {
                      "line": 445,
                      "character": 4
                    }
                  },
                  "preview": "public void frame (float time) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new TestListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 573,
                  "character": 0
                },
                "end": {
                  "line": 581,
                  "character": 3
                }
              },
              "preview": "run(0.1f, 1000, new TestListener()",
              "children": [
                {
                  "name": "frame(float)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 574,
                      "character": 0
                    },
                    "end": {
                      "line": 580,
                      "character": 4
                    }
                  },
                  "preview": "public void frame (float time) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new TestListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 616,
                  "character": 0
                },
                "end": {
                  "line": 623,
                  "character": 3
                }
              },
              "preview": "run(0.1f, 1000, new TestListener()",
              "children": [
                {
                  "name": "frame(float)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 617,
                      "character": 0
                    },
                    "end": {
                      "line": 622,
                      "character": 4
                    }
                  },
                  "preview": "public void frame (float time) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new TestListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 674,
                  "character": 0
                },
                "end": {
                  "line": 685,
                  "character": 3
                }
              },
              "preview": "run(0.1f, 1000, new TestListener()",
              "children": [
                {
                  "name": "frame(float)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 675,
                      "character": 0
                    },
                    "end": {
                      "line": 684,
                      "character": 4
                    }
                  },
                  "preview": "public void frame (float time) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new AnimationStateListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 700,
                  "character": 0
                },
                "end": {
                  "line": 724,
                  "character": 3
                }
              },
              "preview": "state.addListener(new AnimationStateListener()",
              "children": [
                {
                  "name": "start(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 701,
                      "character": 0
                    },
                    "end": {
                      "line": 703,
                      "character": 4
                    }
                  },
                  "preview": "public void start (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "interrupt(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 705,
                      "character": 0
                    },
                    "end": {
                      "line": 707,
                      "character": 4
                    }
                  },
                  "preview": "public void interrupt (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "end(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 709,
                      "character": 0
                    },
                    "end": {
                      "line": 711,
                      "character": 4
                    }
                  },
                  "preview": "public void end (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "dispose(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 713,
                      "character": 0
                    },
                    "end": {
                      "line": 715,
                      "character": 4
                    }
                  },
                  "preview": "public void dispose (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "complete(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 717,
                      "character": 0
                    },
                    "end": {
                      "line": 719,
                      "character": 4
                    }
                  },
                  "preview": "public void complete (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "event(TrackEntry, Event)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 721,
                      "character": 0
                    },
                    "end": {
                      "line": 723,
                      "character": 4
                    }
                  },
                  "preview": "public void event (TrackEntry entry, Event event) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new TestListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 738,
                  "character": 0
                },
                "end": {
                  "line": 742,
                  "character": 3
                }
              },
              "preview": "run(0.1f, 10, new TestListener()",
              "children": [
                {
                  "name": "frame(float)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 739,
                      "character": 0
                    },
                    "end": {
                      "line": 741,
                      "character": 4
                    }
                  },
                  "preview": "public void frame (float time) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new TestListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 760,
                  "character": 0
                },
                "end": {
                  "line": 764,
                  "character": 3
                }
              },
              "preview": "run(0.1f, 10, new TestListener()",
              "children": [
                {
                  "name": "frame(float)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 761,
                      "character": 0
                    },
                    "end": {
                      "line": 763,
                      "character": 4
                    }
                  },
                  "preview": "public void frame (float time) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new AnimationStateListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 768,
                  "character": 0
                },
                "end": {
                  "line": 792,
                  "character": 3
                }
              },
              "preview": "state.addAnimation(0, \"events0\", false, 0).setListener(new AnimationStateListener()",
              "children": [
                {
                  "name": "start(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 769,
                      "character": 0
                    },
                    "end": {
                      "line": 771,
                      "character": 4
                    }
                  },
                  "preview": "public void start (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "interrupt(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 773,
                      "character": 0
                    },
                    "end": {
                      "line": 775,
                      "character": 4
                    }
                  },
                  "preview": "public void interrupt (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "end(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 777,
                      "character": 0
                    },
                    "end": {
                      "line": 779,
                      "character": 4
                    }
                  },
                  "preview": "public void end (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "dispose(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 781,
                      "character": 0
                    },
                    "end": {
                      "line": 783,
                      "character": 4
                    }
                  },
                  "preview": "public void dispose (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "complete(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 785,
                      "character": 0
                    },
                    "end": {
                      "line": 787,
                      "character": 4
                    }
                  },
                  "preview": "public void complete (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "event(TrackEntry, Event)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 789,
                      "character": 0
                    },
                    "end": {
                      "line": 791,
                      "character": 4
                    }
                  },
                  "preview": "public void event (TrackEntry entry, Event event) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "setup(String, Result...)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 847,
              "character": 0
            },
            "end": {
              "line": 886,
              "character": 2
            }
          },
          "preview": "void setup (String description, Result... expectedArray) {",
          "children": [
            {
              "name": "new Pool() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 853,
                  "character": 0
                },
                "end": {
                  "line": 870,
                  "character": 3
                }
              },
              "preview": "Pool trackEntryPool = new Pool<TrackEntry>()",
              "children": [
                {
                  "name": "obtain()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 854,
                      "character": 0
                    },
                    "end": {
                      "line": 859,
                      "character": 4
                    }
                  },
                  "preview": "public TrackEntry obtain () {",
                  "children": []
                },
                {
                  "name": "newObject()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 861,
                      "character": 0
                    },
                    "end": {
                      "line": 863,
                      "character": 4
                    }
                  },
                  "preview": "protected TrackEntry newObject () {",
                  "children": []
                },
                {
                  "name": "free(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
                  "range": {
                    "start": {
                      "line": 865,
                      "character": 0
                    },
                    "end": {
                      "line": 869,
                      "character": 4
                    }
                  },
                  "preview": "public void free (TrackEntry entry) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "run(float, float, TestListener)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 888,
              "character": 0
            },
            "end": {
              "line": 936,
              "character": 2
            }
          },
          "preview": "void run (float incr, float endTime, TestListener listener) {",
          "children": []
        },
        {
          "name": "expect(int, String, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 938,
              "character": 0
            },
            "end": {
              "line": 945,
              "character": 2
            }
          },
          "preview": "Result expect (int animationIndex, String name, float trackTime, float totalTime) {",
          "children": []
        },
        {
          "name": "actual(String, TrackEntry)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 947,
              "character": 0
            },
            "end": {
              "line": 954,
              "character": 2
            }
          },
          "preview": "Result actual (String name, TrackEntry entry) {",
          "children": []
        },
        {
          "name": "note(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 956,
              "character": 0
            },
            "end": {
              "line": 961,
              "character": 2
            }
          },
          "preview": "Result note (String message) {",
          "children": []
        },
        {
          "name": "log(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 963,
              "character": 0
            },
            "end": {
              "line": 965,
              "character": 2
            }
          },
          "preview": "void log (String message) {",
          "children": []
        },
        {
          "name": "Result",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 967,
              "character": 0
            },
            "end": {
              "line": 993,
              "character": 2
            }
          },
          "preview": "class Result",
          "children": [
            {
              "name": "name",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 968,
                  "character": 0
                },
                "end": {
                  "line": 968,
                  "character": 14
                }
              },
              "preview": "String name;",
              "children": []
            },
            {
              "name": "animationIndex",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 969,
                  "character": 0
                },
                "end": {
                  "line": 969,
                  "character": 21
                }
              },
              "preview": "int animationIndex;",
              "children": []
            },
            {
              "name": "trackTime",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 970,
                  "character": 0
                },
                "end": {
                  "line": 970,
                  "character": 29
                }
              },
              "preview": "float trackTime, totalTime;",
              "children": []
            },
            {
              "name": "totalTime",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 970,
                  "character": 0
                },
                "end": {
                  "line": 970,
                  "character": 29
                }
              },
              "preview": "float trackTime, totalTime;",
              "children": []
            },
            {
              "name": "note",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 971,
                  "character": 0
                },
                "end": {
                  "line": 971,
                  "character": 15
                }
              },
              "preview": "boolean note;",
              "children": []
            },
            {
              "name": "hashCode()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 973,
                  "character": 0
                },
                "end": {
                  "line": 979,
                  "character": 3
                }
              },
              "preview": "public int hashCode () {",
              "children": []
            },
            {
              "name": "equals(Object)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 981,
                  "character": 0
                },
                "end": {
                  "line": 988,
                  "character": 3
                }
              },
              "preview": "public boolean equals (Object obj) {",
              "children": []
            },
            {
              "name": "toString()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 990,
                  "character": 0
                },
                "end": {
                  "line": 992,
                  "character": 3
                }
              },
              "preview": "public String toString () {",
              "children": []
            }
          ]
        },
        {
          "name": "round(float, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 995,
              "character": 0
            },
            "end": {
              "line": 998,
              "character": 2
            }
          },
          "preview": "static float round (float value, int decimals) {",
          "children": []
        },
        {
          "name": "roundTime(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 1000,
              "character": 0
            },
            "end": {
              "line": 1003,
              "character": 2
            }
          },
          "preview": "static String roundTime (float value) {",
          "children": []
        },
        {
          "name": "TestListener",
          "kind": "interface",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 1005,
              "character": 0
            },
            "end": {
              "line": 1007,
              "character": 2
            }
          },
          "preview": "static interface TestListener",
          "children": [
            {
              "name": "frame(float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
              "range": {
                "start": {
                  "line": 1006,
                  "character": 0
                },
                "end": {
                  "line": 1006,
                  "character": 26
                }
              },
              "preview": "void frame (float time);",
              "children": []
            }
          ]
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AnimationStateTests.java",
          "range": {
            "start": {
              "line": 1009,
              "character": 0
            },
            "end": {
              "line": 1011,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "AttachmentTimelineTests",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
      "range": {
        "start": {
          "line": 38,
          "character": 0
        },
        "end": {
          "line": 110,
          "character": 1
        }
      },
      "preview": "public class AttachmentTimelineTests",
      "documentation": "Unit tests to ensure {@link AttachmentTimeline} is working as expected.",
      "children": [
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
          "range": {
            "start": {
              "line": 39,
              "character": 0
            },
            "end": {
              "line": 39,
              "character": 41
            }
          },
          "preview": "private final SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 40,
              "character": 33
            }
          },
          "preview": "private final Skeleton skeleton;",
          "children": []
        },
        {
          "name": "slot",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 19
            }
          },
          "preview": "private Slot slot;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 30
            }
          },
          "preview": "private AnimationState state;",
          "children": []
        },
        {
          "name": "AttachmentTimelineTests()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 2
            }
          },
          "preview": "public AttachmentTimelineTests () {",
          "children": [
            {
              "name": "new Attachment() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
              "range": {
                "start": {
                  "line": 52,
                  "character": 0
                },
                "end": {
                  "line": 56,
                  "character": 3
                }
              },
              "preview": "Attachment attachment1 = new Attachment(\"attachment1\")",
              "children": [
                {
                  "name": "copy()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
                  "range": {
                    "start": {
                      "line": 53,
                      "character": 0
                    },
                    "end": {
                      "line": 55,
                      "character": 4
                    }
                  },
                  "preview": "public Attachment copy () {",
                  "children": []
                }
              ]
            },
            {
              "name": "new Attachment() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
              "range": {
                "start": {
                  "line": 57,
                  "character": 0
                },
                "end": {
                  "line": 61,
                  "character": 3
                }
              },
              "preview": "Attachment attachment2 = new Attachment(\"attachment2\")",
              "children": [
                {
                  "name": "copy()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
                  "range": {
                    "start": {
                      "line": 58,
                      "character": 0
                    },
                    "end": {
                      "line": 60,
                      "character": 4
                    }
                  },
                  "preview": "public Attachment copy () {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "test(float, Attachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 2
            }
          },
          "preview": "private void test (float delta, Attachment attachment) {",
          "children": []
        },
        {
          "name": "FailException",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 2
            }
          },
          "preview": "static class FailException extends RuntimeException",
          "supertypes": [
            {
              "name": "RuntimeException"
            }
          ],
          "children": [
            {
              "name": "FailException(String)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
              "range": {
                "start": {
                  "line": 102,
                  "character": 0
                },
                "end": {
                  "line": 104,
                  "character": 3
                }
              },
              "preview": "public FailException (String message) {",
              "children": []
            }
          ]
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/AttachmentTimelineTests.java",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "BonePlotting",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
      "range": {
        "start": {
          "line": 46,
          "character": 0
        },
        "end": {
          "line": 95,
          "character": 1
        }
      },
      "preview": "public class BonePlotting",
      "documentation": "Demonstrates loading skeleton data without an atlas and plotting bone transform for each animation.",
      "children": [
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": [
            {
              "name": "new AttachmentLoader() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
              "range": {
                "start": {
                  "line": 49,
                  "character": 0
                },
                "end": {
                  "line": 73,
                  "character": 3
                }
              },
              "preview": "SkeletonJson json = new SkeletonJson(new AttachmentLoader()",
              "children": [
                {
                  "name": "newRegionAttachment(Skin, String, String, Sequence)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
                  "range": {
                    "start": {
                      "line": 50,
                      "character": 0
                    },
                    "end": {
                      "line": 52,
                      "character": 4
                    }
                  },
                  "preview": "public RegionAttachment newRegionAttachment (Skin skin, String name, String path, @Null Sequence sequence) {",
                  "children": []
                },
                {
                  "name": "newMeshAttachment(Skin, String, String, Sequence)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
                  "range": {
                    "start": {
                      "line": 54,
                      "character": 0
                    },
                    "end": {
                      "line": 56,
                      "character": 4
                    }
                  },
                  "preview": "public MeshAttachment newMeshAttachment (Skin skin, String name, String path, @Null Sequence sequence) {",
                  "children": []
                },
                {
                  "name": "newBoundingBoxAttachment(Skin, String)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
                  "range": {
                    "start": {
                      "line": 58,
                      "character": 0
                    },
                    "end": {
                      "line": 60,
                      "character": 4
                    }
                  },
                  "preview": "public BoundingBoxAttachment newBoundingBoxAttachment (Skin skin, String name) {",
                  "children": []
                },
                {
                  "name": "newClippingAttachment(Skin, String)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
                  "range": {
                    "start": {
                      "line": 62,
                      "character": 0
                    },
                    "end": {
                      "line": 64,
                      "character": 4
                    }
                  },
                  "preview": "public ClippingAttachment newClippingAttachment (Skin skin, String name) {",
                  "children": []
                },
                {
                  "name": "newPathAttachment(Skin, String)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
                  "range": {
                    "start": {
                      "line": 66,
                      "character": 0
                    },
                    "end": {
                      "line": 68,
                      "character": 4
                    }
                  },
                  "preview": "public PathAttachment newPathAttachment (Skin skin, String name) {",
                  "children": []
                },
                {
                  "name": "newPointAttachment(Skin, String)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/BonePlotting.java",
                  "range": {
                    "start": {
                      "line": 70,
                      "character": 0
                    },
                    "end": {
                      "line": 72,
                      "character": 4
                    }
                  },
                  "preview": "public PointAttachment newPointAttachment (Skin skin, String name) {",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "Box2DExample",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
      "range": {
        "start": {
          "line": 61,
          "character": 0
        },
        "end": {
          "line": 244,
          "character": 1
        }
      },
      "preview": "public class Box2DExample extends ApplicationAdapter",
      "documentation": "Demonstrates positioning physics bodies for a skeleton.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 19
            }
          },
          "preview": "SpriteBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 24
            }
          },
          "preview": "ShapeRenderer renderer;",
          "children": []
        },
        {
          "name": "skeletonRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 35
            }
          },
          "preview": "SkeletonRenderer skeletonRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "animation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 21
            }
          },
          "preview": "Animation animation;",
          "children": []
        },
        {
          "name": "time",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 12
            }
          },
          "preview": "float time;",
          "children": []
        },
        {
          "name": "events",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 35
            }
          },
          "preview": "Array<Event> events = new Array();",
          "children": []
        },
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "box2dRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 34
            }
          },
          "preview": "Box2DDebugRenderer box2dRenderer;",
          "children": []
        },
        {
          "name": "world",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 13
            }
          },
          "preview": "World world;",
          "children": []
        },
        {
          "name": "groundBody",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 17
            }
          },
          "preview": "Body groundBody;",
          "children": []
        },
        {
          "name": "transform",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 35
            }
          },
          "preview": "Matrix4 transform = new Matrix4();",
          "children": []
        },
        {
          "name": "vector",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 32
            }
          },
          "preview": "Vector2 vector = new Vector2();",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": [
            {
              "name": "new AtlasAttachmentLoader() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
              "range": {
                "start": {
                  "line": 89,
                  "character": 0
                },
                "end": {
                  "line": 97,
                  "character": 3
                }
              },
              "preview": "AtlasAttachmentLoader atlasLoader = new AtlasAttachmentLoader(atlas)",
              "supertypes": [
                {
                  "name": "AttachmentLoader"
                }
              ],
              "children": [
                {
                  "name": "newRegionAttachment(Skin, String, String, Sequence)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
                  "range": {
                    "start": {
                      "line": 90,
                      "character": 0
                    },
                    "end": {
                      "line": 96,
                      "character": 4
                    }
                  },
                  "preview": "public RegionAttachment newRegionAttachment (Skin skin, String name, String path, @Null Sequence sequence) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 171,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 173,
              "character": 0
            },
            "end": {
              "line": 176,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "createWorld()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 178,
              "character": 0
            },
            "end": {
              "line": 224,
              "character": 2
            }
          },
          "preview": "private void createWorld () {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 226,
              "character": 0
            },
            "end": {
              "line": 228,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "Box2dAttachment",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 230,
              "character": 0
            },
            "end": {
              "line": 236,
              "character": 2
            }
          },
          "preview": "static class Box2dAttachment extends RegionAttachment",
          "supertypes": [
            {
              "name": "RegionAttachment"
            }
          ],
          "children": [
            {
              "name": "body",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
              "range": {
                "start": {
                  "line": 231,
                  "character": 0
                },
                "end": {
                  "line": 231,
                  "character": 12
                }
              },
              "preview": "Body body;",
              "children": []
            },
            {
              "name": "Box2dAttachment(String)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
              "range": {
                "start": {
                  "line": 233,
                  "character": 0
                },
                "end": {
                  "line": 235,
                  "character": 3
                }
              },
              "preview": "public Box2dAttachment (String name) {",
              "children": []
            }
          ]
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/Box2DExample.java",
          "range": {
            "start": {
              "line": 238,
              "character": 0
            },
            "end": {
              "line": 243,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "EventTimelineTests",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
      "range": {
        "start": {
          "line": 41,
          "character": 0
        },
        "end": {
          "line": 227,
          "character": 1
        }
      },
      "preview": "public class EventTimelineTests",
      "documentation": "Unit tests to ensure {@link EventTimeline} is working as expected.",
      "children": [
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 41
            }
          },
          "preview": "private final SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 33
            }
          },
          "preview": "private final Skeleton skeleton;",
          "children": []
        },
        {
          "name": "firedEvents",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 54
            }
          },
          "preview": "private final Array<Event> firedEvents = new Array();",
          "children": []
        },
        {
          "name": "timeline",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 55
            }
          },
          "preview": "private EventTimeline timeline = new EventTimeline(1);",
          "children": []
        },
        {
          "name": "events",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 23
            }
          },
          "preview": "private char[] events;",
          "children": []
        },
        {
          "name": "frames",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 24
            }
          },
          "preview": "private float[] frames;",
          "children": []
        },
        {
          "name": "EventTimelineTests()",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 2
            }
          },
          "preview": "public EventTimelineTests () {",
          "children": []
        },
        {
          "name": "test(float...)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 2
            }
          },
          "preview": "private void test (float... frames) {",
          "children": []
        },
        {
          "name": "run(float, float, float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 119,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 2
            }
          },
          "preview": "private void run (float startTime, float endTime, float timeStep) {",
          "children": []
        },
        {
          "name": "fire(float, float, float, boolean, boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 212,
              "character": 2
            }
          },
          "preview": "private void fire (float timeStart, float timeEnd, float timeStep, boolean loop, boolean print) {",
          "children": []
        },
        {
          "name": "fail(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 214,
              "character": 0
            },
            "end": {
              "line": 216,
              "character": 2
            }
          },
          "preview": "private void fail (String message) {",
          "children": []
        },
        {
          "name": "FailException",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 218,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 2
            }
          },
          "preview": "static class FailException extends RuntimeException",
          "supertypes": [
            {
              "name": "RuntimeException"
            }
          ],
          "children": [
            {
              "name": "FailException(String)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
              "range": {
                "start": {
                  "line": 219,
                  "character": 0
                },
                "end": {
                  "line": 221,
                  "character": 3
                }
              },
              "preview": "public FailException (String message) {",
              "children": []
            }
          ]
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/EventTimelineTests.java",
          "range": {
            "start": {
              "line": 224,
              "character": 0
            },
            "end": {
              "line": 226,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "FboTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
      "range": {
        "start": {
          "line": 49,
          "character": 0
        },
        "end": {
          "line": 142,
          "character": 1
        }
      },
      "preview": "public class FboTest extends ApplicationAdapter",
      "documentation": "Demonstrates rendering an animation to a frame buffer (FBO) and then rendering the FBO to the screen.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "font",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 17
            }
          },
          "preview": "BitmapFont font;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "fbo",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 58,
              "character": 17
            }
          },
          "preview": "FrameBuffer fbo;",
          "children": []
        },
        {
          "name": "fboRegion",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 25
            }
          },
          "preview": "TextureRegion fboRegion;",
          "children": []
        },
        {
          "name": "drawFbo",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 24
            }
          },
          "preview": "boolean drawFbo = true;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 137,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FboTest.java",
          "range": {
            "start": {
              "line": 139,
              "character": 0
            },
            "end": {
              "line": 141,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "FrameByFrameTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 93,
          "character": 1
        }
      },
      "preview": "public class FrameByFrameTest extends ApplicationAdapter",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 26
            }
          },
          "preview": "PolygonSpriteBatch batch;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "time",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 12
            }
          },
          "preview": "float time;",
          "children": []
        },
        {
          "name": "walkAnimation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 47
            }
          },
          "preview": "Animation<AtlasSprite> walkAnimation, current;",
          "children": []
        },
        {
          "name": "current",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 47
            }
          },
          "preview": "Animation<AtlasSprite> walkAnimation, current;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/FrameByFrameTest.java",
          "range": {
            "start": {
              "line": 90,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "HeadlessTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 299,
          "character": 1
        }
      },
      "preview": "public class HeadlessTest implements ApplicationListener",
      "supertypes": [
        {
          "name": "ApplicationListener"
        }
      ],
      "children": [
        {
          "name": "skeletonPath",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 29
            }
          },
          "preview": "private String skeletonPath;",
          "children": []
        },
        {
          "name": "atlasPath",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 26
            }
          },
          "preview": "private String atlasPath;",
          "children": []
        },
        {
          "name": "animationName",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 30
            }
          },
          "preview": "private String animationName;",
          "children": []
        },
        {
          "name": "HeadlessTest(String, String, String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 2
            }
          },
          "preview": "public HeadlessTest (String skeletonPath, String atlasPath, String animationName) {",
          "children": []
        },
        {
          "name": "MockTexture",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 166,
              "character": 2
            }
          },
          "preview": "static class MockTexture extends Texture",
          "supertypes": [
            {
              "name": "Texture"
            }
          ],
          "children": [
            {
              "name": "width",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 134,
                  "character": 0
                },
                "end": {
                  "line": 134,
                  "character": 28
                }
              },
              "preview": "private int width, height;",
              "children": []
            },
            {
              "name": "height",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 134,
                  "character": 0
                },
                "end": {
                  "line": 134,
                  "character": 28
                }
              },
              "preview": "private int width, height;",
              "children": []
            },
            {
              "name": "MockTexture(int, int)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 136,
                  "character": 0
                },
                "end": {
                  "line": 140,
                  "character": 3
                }
              },
              "preview": "public MockTexture (int width, int height) {",
              "children": []
            },
            {
              "name": "getWidth()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 143,
                  "character": 0
                },
                "end": {
                  "line": 145,
                  "character": 3
                }
              },
              "preview": "public int getWidth () {",
              "children": []
            },
            {
              "name": "getHeight()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 148,
                  "character": 0
                },
                "end": {
                  "line": 150,
                  "character": 3
                }
              },
              "preview": "public int getHeight () {",
              "children": []
            },
            {
              "name": "bind()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 153,
                  "character": 0
                },
                "end": {
                  "line": 155,
                  "character": 3
                }
              },
              "preview": "public void bind () {",
              "children": []
            },
            {
              "name": "bind(int)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 158,
                  "character": 0
                },
                "end": {
                  "line": 160,
                  "character": 3
                }
              },
              "preview": "public void bind (int unit) {",
              "children": []
            },
            {
              "name": "dispose()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 163,
                  "character": 0
                },
                "end": {
                  "line": 165,
                  "character": 3
                }
              },
              "preview": "public void dispose () {",
              "children": []
            }
          ]
        },
        {
          "name": "HeadlessTextureAtlas",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 169,
              "character": 0
            },
            "end": {
              "line": 198,
              "character": 2
            }
          },
          "preview": "static class HeadlessTextureAtlas extends TextureAtlas",
          "supertypes": [
            {
              "name": "TextureAtlas"
            }
          ],
          "children": [
            {
              "name": "HeadlessTextureAtlas(FileHandle)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
              "range": {
                "start": {
                  "line": 170,
                  "character": 0
                },
                "end": {
                  "line": 197,
                  "character": 3
                }
              },
              "preview": "public HeadlessTextureAtlas (FileHandle packFile) {",
              "children": []
            }
          ]
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 201,
              "character": 0
            },
            "end": {
              "line": 266,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 269,
              "character": 0
            },
            "end": {
              "line": 270,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 273,
              "character": 0
            },
            "end": {
              "line": 274,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "pause()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 277,
              "character": 0
            },
            "end": {
              "line": 278,
              "character": 2
            }
          },
          "preview": "public void pause () {",
          "children": []
        },
        {
          "name": "resume()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 281,
              "character": 0
            },
            "end": {
              "line": 282,
              "character": 2
            }
          },
          "preview": "public void resume () {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 285,
              "character": 0
            },
            "end": {
              "line": 286,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/HeadlessTest.java",
          "range": {
            "start": {
              "line": 288,
              "character": 0
            },
            "end": {
              "line": 298,
              "character": 2
            }
          },
          "preview": "public static void main (String[] args) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "IKTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 136,
          "character": 1
        }
      },
      "preview": "public class IKTest extends ApplicationAdapter",
      "documentation": "Demonstrates how to let the target bone of an IK constraint follow the mouse or touch position, which in turn repositions part\nof the skeleton, in this case Spineboy's back arm including his gun.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "cameraCoords",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 38
            }
          },
          "preview": "Vector3 cameraCoords = new Vector3();",
          "children": []
        },
        {
          "name": "boneCoords",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 36
            }
          },
          "preview": "Vector2 boneCoords = new Vector2();",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 123,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 125,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/IKTest.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 135,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "MixAndMatchTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 118,
          "character": 1
        }
      },
      "preview": "public class MixAndMatchTest extends ApplicationAdapter",
      "documentation": "Demonstrates creating and configuring a new skin at runtime.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 26
            }
          },
          "preview": "PolygonSpriteBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/MixAndMatchTest.java",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "NormalMapTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
      "range": {
        "start": {
          "line": 64,
          "character": 0
        },
        "end": {
          "line": 387,
          "character": 1
        }
      },
      "preview": "public class NormalMapTest extends ApplicationAdapter",
      "documentation": "Demonstrates simplistic usage of lighting with normal maps.\n<p>\nNote the normals are not rotated when bones are rotated, making lighting incorrect.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "skeletonPath",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 36
            }
          },
          "preview": "String skeletonPath, animationName;",
          "children": []
        },
        {
          "name": "animationName",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 36
            }
          },
          "preview": "String skeletonPath, animationName;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 19
            }
          },
          "preview": "SpriteBatch batch;",
          "children": []
        },
        {
          "name": "time",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 12
            }
          },
          "preview": "float time;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "atlasTexture",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 40
            }
          },
          "preview": "Texture atlasTexture, normalMapTexture;",
          "children": []
        },
        {
          "name": "normalMapTexture",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 40
            }
          },
          "preview": "Texture atlasTexture, normalMapTexture;",
          "children": []
        },
        {
          "name": "program",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 70,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 23
            }
          },
          "preview": "ShaderProgram program;",
          "children": []
        },
        {
          "name": "ui",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 7
            }
          },
          "preview": "UI ui;",
          "children": []
        },
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 27
            }
          },
          "preview": "SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "animation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 21
            }
          },
          "preview": "Animation animation;",
          "children": []
        },
        {
          "name": "ambientColor",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 44
            }
          },
          "preview": "final Vector3 ambientColor = new Vector3();",
          "children": []
        },
        {
          "name": "lightColor",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 42
            }
          },
          "preview": "final Vector3 lightColor = new Vector3();",
          "children": []
        },
        {
          "name": "lightPosition",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 45
            }
          },
          "preview": "final Vector3 lightPosition = new Vector3();",
          "children": []
        },
        {
          "name": "resolution",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 42
            }
          },
          "preview": "final Vector2 resolution = new Vector2();",
          "children": []
        },
        {
          "name": "attenuation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 43
            }
          },
          "preview": "final Vector3 attenuation = new Vector3();",
          "children": []
        },
        {
          "name": "NormalMapTest(String, String)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public NormalMapTest (String skeletonPath, String animationName) {",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 132,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": [
            {
              "name": "new InputAdapter() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 114,
                  "character": 0
                },
                "end": {
                  "line": 131,
                  "character": 3
                }
              },
              "preview": "Gdx.input.setInputProcessor(new InputMultiplexer(ui.stage, new InputAdapter()",
              "supertypes": [
                {
                  "name": "InputProcessor"
                }
              ],
              "children": [
                {
                  "name": "touchDown(int, int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                  "range": {
                    "start": {
                      "line": 115,
                      "character": 0
                    },
                    "end": {
                      "line": 118,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDown (int screenX, int screenY, int pointer, int button) {",
                  "children": []
                },
                {
                  "name": "touchDragged(int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                  "range": {
                    "start": {
                      "line": 120,
                      "character": 0
                    },
                    "end": {
                      "line": 123,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDragged (int screenX, int screenY, int pointer) {",
                  "children": []
                },
                {
                  "name": "touchUp(int, int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                  "range": {
                    "start": {
                      "line": 125,
                      "character": 0
                    },
                    "end": {
                      "line": 130,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchUp (int screenX, int screenY, int pointer, int button) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 176,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 178,
              "character": 0
            },
            "end": {
              "line": 182,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "createShader()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 184,
              "character": 0
            },
            "end": {
              "line": 261,
              "character": 2
            }
          },
          "preview": "private ShaderProgram createShader () {",
          "children": []
        },
        {
          "name": "UI",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 263,
              "character": 0
            },
            "end": {
              "line": 377,
              "character": 2
            }
          },
          "preview": "class UI",
          "children": [
            {
              "name": "stage",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 264,
                  "character": 0
                },
                "end": {
                  "line": 264,
                  "character": 28
                }
              },
              "preview": "Stage stage = new Stage();",
              "children": []
            },
            {
              "name": "skin",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 265,
                  "character": 0
                },
                "end": {
                  "line": 266,
                  "character": 41
                }
              },
              "preview": "com.badlogic.gdx.scenes.scene2d.ui.Skin skin = new com.badlogic.gdx.scenes.scene2d.ui.Skin(",
              "children": []
            },
            {
              "name": "prefs",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 267,
                  "character": 0
                },
                "end": {
                  "line": 267,
                  "character": 69
                }
              },
              "preview": "Preferences prefs = Gdx.app.getPreferences(\".spine/NormalMapTest\");",
              "children": []
            },
            {
              "name": "window",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 269,
                  "character": 0
                },
                "end": {
                  "line": 269,
                  "character": 16
                }
              },
              "preview": "Window window;",
              "children": []
            },
            {
              "name": "root",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 270,
                  "character": 0
                },
                "end": {
                  "line": 270,
                  "character": 13
                }
              },
              "preview": "Table root;",
              "children": []
            },
            {
              "name": "ambientColorR",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 271,
                  "character": 0
                },
                "end": {
                  "line": 271,
                  "character": 53
                }
              },
              "preview": "Slider ambientColorR, ambientColorG, ambientColorB;",
              "children": []
            },
            {
              "name": "ambientColorG",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 271,
                  "character": 0
                },
                "end": {
                  "line": 271,
                  "character": 53
                }
              },
              "preview": "Slider ambientColorR, ambientColorG, ambientColorB;",
              "children": []
            },
            {
              "name": "ambientColorB",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 271,
                  "character": 0
                },
                "end": {
                  "line": 271,
                  "character": 53
                }
              },
              "preview": "Slider ambientColorR, ambientColorG, ambientColorB;",
              "children": []
            },
            {
              "name": "lightColorR",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 272,
                  "character": 0
                },
                "end": {
                  "line": 272,
                  "character": 55
                }
              },
              "preview": "Slider lightColorR, lightColorG, lightColorB, lightZ;",
              "children": []
            },
            {
              "name": "lightColorG",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 272,
                  "character": 0
                },
                "end": {
                  "line": 272,
                  "character": 55
                }
              },
              "preview": "Slider lightColorR, lightColorG, lightColorB, lightZ;",
              "children": []
            },
            {
              "name": "lightColorB",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 272,
                  "character": 0
                },
                "end": {
                  "line": 272,
                  "character": 55
                }
              },
              "preview": "Slider lightColorR, lightColorG, lightColorB, lightZ;",
              "children": []
            },
            {
              "name": "lightZ",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 272,
                  "character": 0
                },
                "end": {
                  "line": 272,
                  "character": 55
                }
              },
              "preview": "Slider lightColorR, lightColorG, lightColorB, lightZ;",
              "children": []
            },
            {
              "name": "attenuationX",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 273,
                  "character": 0
                },
                "end": {
                  "line": 273,
                  "character": 50
                }
              },
              "preview": "Slider attenuationX, attenuationY, attenuationZ;",
              "children": []
            },
            {
              "name": "attenuationY",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 273,
                  "character": 0
                },
                "end": {
                  "line": 273,
                  "character": 50
                }
              },
              "preview": "Slider attenuationX, attenuationY, attenuationZ;",
              "children": []
            },
            {
              "name": "attenuationZ",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 273,
                  "character": 0
                },
                "end": {
                  "line": 273,
                  "character": 50
                }
              },
              "preview": "Slider attenuationX, attenuationY, attenuationZ;",
              "children": []
            },
            {
              "name": "ambientIntensity",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 274,
                  "character": 0
                },
                "end": {
                  "line": 274,
                  "character": 26
                }
              },
              "preview": "Slider ambientIntensity;",
              "children": []
            },
            {
              "name": "strength",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 275,
                  "character": 0
                },
                "end": {
                  "line": 275,
                  "character": 18
                }
              },
              "preview": "Slider strength;",
              "children": []
            },
            {
              "name": "useShadow",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 276,
                  "character": 0
                },
                "end": {
                  "line": 276,
                  "character": 42
                }
              },
              "preview": "CheckBox useShadow, useNormals, yInvert;",
              "children": []
            },
            {
              "name": "useNormals",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 276,
                  "character": 0
                },
                "end": {
                  "line": 276,
                  "character": 42
                }
              },
              "preview": "CheckBox useShadow, useNormals, yInvert;",
              "children": []
            },
            {
              "name": "yInvert",
              "kind": "field",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 276,
                  "character": 0
                },
                "end": {
                  "line": 276,
                  "character": 42
                }
              },
              "preview": "CheckBox useShadow, useNormals, yInvert;",
              "children": []
            },
            {
              "name": "UI()",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 278,
                  "character": 0
                },
                "end": {
                  "line": 280,
                  "character": 3
                }
              },
              "preview": "public UI () {",
              "children": []
            },
            {
              "name": "create()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 282,
                  "character": 0
                },
                "end": {
                  "line": 335,
                  "character": 3
                }
              },
              "preview": "public void create () {",
              "children": [
                {
                  "name": "new InputListener() {...}",
                  "kind": "class",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                  "range": {
                    "start": {
                      "line": 320,
                      "character": 0
                    },
                    "end": {
                      "line": 325,
                      "character": 4
                    }
                  },
                  "preview": "window.addListener(new InputListener()",
                  "supertypes": [
                    {
                      "name": "EventListener"
                    }
                  ],
                  "children": [
                    {
                      "name": "touchDown(InputEvent, float, float, int, int)",
                      "kind": "method",
                      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                      "range": {
                        "start": {
                          "line": 321,
                          "character": 0
                        },
                        "end": {
                          "line": 324,
                          "character": 5
                        }
                      },
                      "preview": "public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {",
                      "children": []
                    }
                  ]
                },
                {
                  "name": "new ChangeListener() {...}",
                  "kind": "class",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                  "range": {
                    "start": {
                      "line": 327,
                      "character": 0
                    },
                    "end": {
                      "line": 334,
                      "character": 4
                    }
                  },
                  "preview": "resetButton.addListener(new ChangeListener()",
                  "supertypes": [
                    {
                      "name": "EventListener"
                    }
                  ],
                  "children": [
                    {
                      "name": "changed(ChangeEvent, Actor)",
                      "kind": "method",
                      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                      "range": {
                        "start": {
                          "line": 328,
                          "character": 0
                        },
                        "end": {
                          "line": 333,
                          "character": 5
                        }
                      },
                      "preview": "public void changed (ChangeEvent event, Actor actor) {",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "checkbox(String, boolean)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 337,
                  "character": 0
                },
                "end": {
                  "line": 349,
                  "character": 3
                }
              },
              "preview": "private CheckBox checkbox (final String name, boolean defaultValue) {",
              "children": [
                {
                  "name": "new ChangeListener() {...}",
                  "kind": "class",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                  "range": {
                    "start": {
                      "line": 341,
                      "character": 0
                    },
                    "end": {
                      "line": 346,
                      "character": 4
                    }
                  },
                  "preview": "checkbox.addListener(new ChangeListener()",
                  "supertypes": [
                    {
                      "name": "EventListener"
                    }
                  ],
                  "children": [
                    {
                      "name": "changed(ChangeEvent, Actor)",
                      "kind": "method",
                      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                      "range": {
                        "start": {
                          "line": 342,
                          "character": 0
                        },
                        "end": {
                          "line": 345,
                          "character": 5
                        }
                      },
                      "preview": "public void changed (ChangeEvent event, Actor actor) {",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "name": "slider(String, float)",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
              "range": {
                "start": {
                  "line": 351,
                  "character": 0
                },
                "end": {
                  "line": 376,
                  "character": 3
                }
              },
              "preview": "private Slider slider (final String name, float defaultValue) {",
              "children": [
                {
                  "name": "new ChangeListener() {...}",
                  "kind": "class",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                  "range": {
                    "start": {
                      "line": 359,
                      "character": 0
                    },
                    "end": {
                      "line": 367,
                      "character": 4
                    }
                  },
                  "preview": "slider.addListener(new ChangeListener()",
                  "supertypes": [
                    {
                      "name": "EventListener"
                    }
                  ],
                  "children": [
                    {
                      "name": "changed(ChangeEvent, Actor)",
                      "kind": "method",
                      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
                      "range": {
                        "start": {
                          "line": 360,
                          "character": 0
                        },
                        "end": {
                          "line": 366,
                          "character": 5
                        }
                      },
                      "preview": "public void changed (ChangeEvent event, Actor actor) {",
                      "children": []
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/NormalMapTest.java",
          "range": {
            "start": {
              "line": 379,
              "character": 0
            },
            "end": {
              "line": 386,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PhysicsTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 107,
          "character": 1
        }
      },
      "preview": "public class PhysicsTest extends ApplicationAdapter",
      "documentation": "Demonstrates loading, animating, and rendering a skeleton.\n@see SkeletonAssetManagerTest",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PhysicsTest2",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
      "range": {
        "start": {
          "line": 43,
          "character": 0
        },
        "end": {
          "line": 126,
          "character": 1
        }
      },
      "preview": "public class PhysicsTest2 extends ApplicationAdapter",
      "documentation": "Demonstrates loading, animating, and rendering a skeleton.\n@see SkeletonAssetManagerTest",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "lastX",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 17
            }
          },
          "preview": "float lastX = 0;",
          "children": []
        },
        {
          "name": "lastY",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 17
            }
          },
          "preview": "float lastY = 0;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": [
            {
              "name": "new InputAdapter() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
              "range": {
                "start": {
                  "line": 76,
                  "character": 0
                },
                "end": {
                  "line": 90,
                  "character": 3
                }
              },
              "preview": "Gdx.input.setInputProcessor(new InputAdapter()",
              "supertypes": [
                {
                  "name": "InputProcessor"
                }
              ],
              "children": [
                {
                  "name": "touchDown(int, int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
                  "range": {
                    "start": {
                      "line": 77,
                      "character": 0
                    },
                    "end": {
                      "line": 81,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDown (int screenX, int screenY, int pointer, int button) {",
                  "children": []
                },
                {
                  "name": "touchDragged(int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
                  "range": {
                    "start": {
                      "line": 83,
                      "character": 0
                    },
                    "end": {
                      "line": 89,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDragged (int screenX, int screenY, int pointer) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 115,
              "character": 0
            },
            "end": {
              "line": 117,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 119,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest2.java",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PhysicsTest3",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 107,
          "character": 1
        }
      },
      "preview": "public class PhysicsTest3 extends ApplicationAdapter",
      "documentation": "Demonstrates loading, animating, and rendering a skeleton.\n@see SkeletonAssetManagerTest",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest3.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PhysicsTest4",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 107,
          "character": 1
        }
      },
      "preview": "public class PhysicsTest4 extends ApplicationAdapter",
      "documentation": "Demonstrates loading, animating, and rendering a skeleton.\n@see SkeletonAssetManagerTest",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 94,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PhysicsTest4.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "PngExportTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 138,
          "character": 1
        }
      },
      "preview": "public class PngExportTest extends ApplicationAdapter",
      "documentation": "Demonstrates rendering an animation to a frame buffer (FBO) and then writing each frame as a PNG.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "font",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 57,
              "character": 0
            },
            "end": {
              "line": 57,
              "character": 17
            }
          },
          "preview": "BitmapFont font;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 59,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 60,
              "character": 0
            },
            "end": {
              "line": 60,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "fbo",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 17
            }
          },
          "preview": "FrameBuffer fbo;",
          "children": []
        },
        {
          "name": "fboRegion",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 25
            }
          },
          "preview": "TextureRegion fboRegion;",
          "children": []
        },
        {
          "name": "drawFbo",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 24
            }
          },
          "preview": "boolean drawFbo = true;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/PngExportTest.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 137,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SimpleTest1",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 115,
          "character": 1
        }
      },
      "preview": "public class SimpleTest1 extends ApplicationAdapter",
      "documentation": "Demonstrates loading, animating, and rendering a skeleton.\n@see SkeletonAssetManagerTest",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest1.java",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SimpleTest2",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
      "range": {
        "start": {
          "line": 47,
          "character": 0
        },
        "end": {
          "line": 176,
          "character": 1
        }
      },
      "preview": "public class SimpleTest2 extends ApplicationAdapter",
      "documentation": "Demonstrates loading, animating, and rendering a skeleton with hit detectiong using a bounding box attachment.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "bounds",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 23
            }
          },
          "preview": "SkeletonBounds bounds;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 141,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": [
            {
              "name": "new AnimationStateListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
              "range": {
                "start": {
                  "line": 83,
                  "character": 0
                },
                "end": {
                  "line": 109,
                  "character": 3
                }
              },
              "preview": "state.addListener(new AnimationStateListener()",
              "children": [
                {
                  "name": "start(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 85,
                      "character": 0
                    },
                    "end": {
                      "line": 87,
                      "character": 4
                    }
                  },
                  "preview": "public void start (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "interrupt(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 89,
                      "character": 0
                    },
                    "end": {
                      "line": 91,
                      "character": 4
                    }
                  },
                  "preview": "public void interrupt (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "end(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 93,
                      "character": 0
                    },
                    "end": {
                      "line": 95,
                      "character": 4
                    }
                  },
                  "preview": "public void end (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "dispose(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 97,
                      "character": 0
                    },
                    "end": {
                      "line": 99,
                      "character": 4
                    }
                  },
                  "preview": "public void dispose (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "complete(TrackEntry)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 101,
                      "character": 0
                    },
                    "end": {
                      "line": 103,
                      "character": 4
                    }
                  },
                  "preview": "public void complete (TrackEntry entry) {",
                  "children": []
                },
                {
                  "name": "event(TrackEntry, Event)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 105,
                      "character": 0
                    },
                    "end": {
                      "line": 108,
                      "character": 4
                    }
                  },
                  "preview": "public void event (TrackEntry entry, Event event) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new InputAdapter() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
              "range": {
                "start": {
                  "line": 114,
                  "character": 0
                },
                "end": {
                  "line": 140,
                  "character": 3
                }
              },
              "preview": "Gdx.input.setInputProcessor(new InputAdapter()",
              "supertypes": [
                {
                  "name": "InputProcessor"
                }
              ],
              "children": [
                {
                  "name": "point",
                  "kind": "field",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 115,
                      "character": 0
                    },
                    "end": {
                      "line": 115,
                      "character": 39
                    }
                  },
                  "preview": "final Vector3 point = new Vector3();",
                  "children": []
                },
                {
                  "name": "touchDown(int, int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 117,
                      "character": 0
                    },
                    "end": {
                      "line": 128,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDown (int screenX, int screenY, int pointer, int button) {",
                  "children": []
                },
                {
                  "name": "touchUp(int, int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 130,
                      "character": 0
                    },
                    "end": {
                      "line": 133,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchUp (int screenX, int screenY, int pointer, int button) {",
                  "children": []
                },
                {
                  "name": "keyDown(int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
                  "range": {
                    "start": {
                      "line": 135,
                      "character": 0
                    },
                    "end": {
                      "line": 139,
                      "character": 4
                    }
                  },
                  "preview": "public boolean keyDown (int keycode) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 143,
              "character": 0
            },
            "end": {
              "line": 163,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 165,
              "character": 0
            },
            "end": {
              "line": 167,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 169,
              "character": 0
            },
            "end": {
              "line": 171,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest2.java",
          "range": {
            "start": {
              "line": 173,
              "character": 0
            },
            "end": {
              "line": 175,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SimpleTest3",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
      "range": {
        "start": {
          "line": 40,
          "character": 0
        },
        "end": {
          "line": 113,
          "character": 1
        }
      },
      "preview": "public class SimpleTest3 extends ApplicationAdapter",
      "documentation": "Demonstrates applying multiple animations at once using {@link AnimationState} tracks.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 41,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 42,
              "character": 0
            },
            "end": {
              "line": 42,
              "character": 26
            }
          },
          "preview": "PolygonSpriteBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 102,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 106,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SimpleTest3.java",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonAssetManagerTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 131,
          "character": 1
        }
      },
      "preview": "public class SkeletonAssetManagerTest extends ApplicationAdapter",
      "documentation": "Demonstrates loading an atlas and skeleton using {@link AssetManager}.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 26
            }
          },
          "preview": "PolygonSpriteBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "assetManager",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 27
            }
          },
          "preview": "AssetManager assetManager;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 70,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 126,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAssetManagerTest.java",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonAttachmentTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 120,
          "character": 1
        }
      },
      "preview": "public class SkeletonAttachmentTest extends ApplicationAdapter",
      "documentation": "Demonstrates using {@link SkeletonAttachment} to use an entire skeleton as an attachment.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 26
            }
          },
          "preview": "PolygonSpriteBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "spineboy",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 27
            }
          },
          "preview": "Skeleton spineboy, goblin;",
          "children": []
        },
        {
          "name": "goblin",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 27
            }
          },
          "preview": "Skeleton spineboy, goblin;",
          "children": []
        },
        {
          "name": "spineboyState",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 43
            }
          },
          "preview": "AnimationState spineboyState, goblinState;",
          "children": []
        },
        {
          "name": "goblinState",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 43
            }
          },
          "preview": "AnimationState spineboyState, goblinState;",
          "children": []
        },
        {
          "name": "attachmentBone",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 25
            }
          },
          "preview": "BonePose attachmentBone;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 90,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 115,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/SkeletonAttachmentTest.java",
          "range": {
            "start": {
              "line": 117,
              "character": 0
            },
            "end": {
              "line": 119,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "TestHarness",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
      "range": {
        "start": {
          "line": 42,
          "character": 0
        },
        "end": {
          "line": 113,
          "character": 1
        }
      },
      "preview": "public class TestHarness extends ApplicationAdapter",
      "documentation": "Boilerplate for basic skeleton rendering, used for various testing.",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "JSON",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 43,
              "character": 47
            }
          },
          "preview": "static String JSON = \"raptor/raptor-pro.json\";",
          "children": []
        },
        {
          "name": "ATLAS",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 44,
              "character": 0
            },
            "end": {
              "line": 44,
              "character": 49
            }
          },
          "preview": "static String ATLAS = \"raptor/raptor-pma.atlas\";",
          "children": []
        },
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 26
            }
          },
          "preview": "PolygonSpriteBatch batch;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "shapes",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 22
            }
          },
          "preview": "ShapeRenderer shapes;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 52,
              "character": 0
            },
            "end": {
              "line": 52,
              "character": 20
            }
          },
          "preview": "TextureAtlas atlas;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 98,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 106,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TestHarness.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "TimelineApiTest",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
      "range": {
        "start": {
          "line": 45,
          "character": 0
        },
        "end": {
          "line": 148,
          "character": 1
        }
      },
      "preview": "public class TimelineApiTest extends ApplicationAdapter",
      "documentation": "Demonstrates using the timeline API. See {@link SimpleTest1} for a higher level API using {@link AnimationState}.\n<p>\nSee: https://esotericsoftware.com/spine-applying-animations",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 19
            }
          },
          "preview": "SpriteBatch batch;",
          "children": []
        },
        {
          "name": "time",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 12
            }
          },
          "preview": "float time;",
          "children": []
        },
        {
          "name": "events",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 48,
              "character": 35
            }
          },
          "preview": "Array<Event> events = new Array();",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 50,
              "character": 0
            },
            "end": {
              "line": 50,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 51,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 53,
              "character": 0
            },
            "end": {
              "line": 53,
              "character": 27
            }
          },
          "preview": "SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 54,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "walkAnimation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 55,
              "character": 0
            },
            "end": {
              "line": 55,
              "character": 25
            }
          },
          "preview": "Animation walkAnimation;",
          "children": []
        },
        {
          "name": "jumpAnimation",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 56,
              "character": 0
            },
            "end": {
              "line": 56,
              "character": 25
            }
          },
          "preview": "Animation jumpAnimation;",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 58,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 138,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 140,
              "character": 0
            },
            "end": {
              "line": 143,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/TimelineApiTest.java",
          "range": {
            "start": {
              "line": 145,
              "character": 0
            },
            "end": {
              "line": 147,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
      "range": {
        "start": {
          "line": 0,
          "character": 0
        },
        "end": {
          "line": 0,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;"
    },
    {
      "name": "JsonWriter",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
      "range": {
        "start": {
          "line": 4,
          "character": 0
        },
        "end": {
          "line": 114,
          "character": 1
        }
      },
      "preview": "public class JsonWriter",
      "children": [
        {
          "name": "buffer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 5,
              "character": 0
            },
            "end": {
              "line": 5,
              "character": 59
            }
          },
          "preview": "private final StringBuffer buffer = new StringBuffer();",
          "children": []
        },
        {
          "name": "depth",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 6,
              "character": 0
            },
            "end": {
              "line": 6,
              "character": 26
            }
          },
          "preview": "private int depth = 0;",
          "children": []
        },
        {
          "name": "needsComma",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 7,
              "character": 0
            },
            "end": {
              "line": 7,
              "character": 39
            }
          },
          "preview": "private boolean needsComma = false;",
          "children": []
        },
        {
          "name": "writeObjectStart()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 9,
              "character": 0
            },
            "end": {
              "line": 14,
              "character": 5
            }
          },
          "preview": "public void writeObjectStart() {",
          "children": []
        },
        {
          "name": "writeObjectEnd()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 16,
              "character": 0
            },
            "end": {
              "line": 24,
              "character": 5
            }
          },
          "preview": "public void writeObjectEnd() {",
          "children": []
        },
        {
          "name": "writeArrayStart()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 26,
              "character": 0
            },
            "end": {
              "line": 31,
              "character": 5
            }
          },
          "preview": "public void writeArrayStart() {",
          "children": []
        },
        {
          "name": "writeArrayEnd()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 33,
              "character": 0
            },
            "end": {
              "line": 41,
              "character": 5
            }
          },
          "preview": "public void writeArrayEnd() {",
          "children": []
        },
        {
          "name": "writeName(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 43,
              "character": 0
            },
            "end": {
              "line": 49,
              "character": 5
            }
          },
          "preview": "public void writeName(String name) {",
          "children": []
        },
        {
          "name": "writeValue(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 51,
              "character": 0
            },
            "end": {
              "line": 59,
              "character": 5
            }
          },
          "preview": "public void writeValue(String value) {",
          "children": []
        },
        {
          "name": "writeValue(float)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 5
            }
          },
          "preview": "public void writeValue(float value) {",
          "children": []
        },
        {
          "name": "writeValue(int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 5
            }
          },
          "preview": "public void writeValue(int value) {",
          "children": []
        },
        {
          "name": "writeValue(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 5
            }
          },
          "preview": "public void writeValue(boolean value) {",
          "children": []
        },
        {
          "name": "writeNull()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 5
            }
          },
          "preview": "public void writeNull() {",
          "children": []
        },
        {
          "name": "close()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 5
            }
          },
          "preview": "public void close() {",
          "children": []
        },
        {
          "name": "getString()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 5
            }
          },
          "preview": "public String getString() {",
          "children": []
        },
        {
          "name": "writeCommaIfNeeded()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 5
            }
          },
          "preview": "private void writeCommaIfNeeded() {",
          "children": []
        },
        {
          "name": "writeIndent()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 5
            }
          },
          "preview": "private void writeIndent() {",
          "children": []
        },
        {
          "name": "escapeString(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/JsonWriter.java",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 5
            }
          },
          "preview": "private String escapeString(String str) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine.utils",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
      "range": {
        "start": {
          "line": 0,
          "character": 0
        },
        "end": {
          "line": 0,
          "character": 41
        }
      },
      "preview": "package com.esotericsoftware.spine.utils;"
    },
    {
      "name": "SkeletonSerializer",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
      "range": {
        "start": {
          "line": 20,
          "character": 0
        },
        "end": {
          "line": 3843,
          "character": 1
        }
      },
      "preview": "public class SkeletonSerializer",
      "children": [
        {
          "name": "visitedObjects",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 21,
              "character": 0
            },
            "end": {
              "line": 21,
              "character": 63
            }
          },
          "preview": "private final Set<Object> visitedObjects = new HashSet<>();",
          "children": []
        },
        {
          "name": "json",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 22,
              "character": 0
            },
            "end": {
              "line": 22,
              "character": 28
            }
          },
          "preview": "private JsonWriter json;",
          "children": []
        },
        {
          "name": "serializeSkeletonData(SkeletonData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 24,
              "character": 0
            },
            "end": {
              "line": 30,
              "character": 5
            }
          },
          "preview": "public String serializeSkeletonData(SkeletonData data) {",
          "children": []
        },
        {
          "name": "serializeSkeleton(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 32,
              "character": 0
            },
            "end": {
              "line": 38,
              "character": 5
            }
          },
          "preview": "public String serializeSkeleton(Skeleton skeleton) {",
          "children": []
        },
        {
          "name": "serializeAnimationState(AnimationState)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 40,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 5
            }
          },
          "preview": "public String serializeAnimationState(AnimationState state) {",
          "children": []
        },
        {
          "name": "writeAnimation(Animation)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 48,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 5
            }
          },
          "preview": "private void writeAnimation(Animation obj) {",
          "children": []
        },
        {
          "name": "writeAlphaTimeline(AlphaTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 120,
              "character": 5
            }
          },
          "preview": "private void writeAlphaTimeline(Animation.AlphaTimeline obj) {",
          "children": []
        },
        {
          "name": "writeAttachmentTimeline(AttachmentTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 167,
              "character": 5
            }
          },
          "preview": "private void writeAttachmentTimeline(Animation.AttachmentTimeline obj) {",
          "children": []
        },
        {
          "name": "writeDeformTimeline(DeformTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 169,
              "character": 0
            },
            "end": {
              "line": 225,
              "character": 5
            }
          },
          "preview": "private void writeDeformTimeline(Animation.DeformTimeline obj) {",
          "children": []
        },
        {
          "name": "writeDrawOrderTimeline(DrawOrderTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 227,
              "character": 0
            },
            "end": {
              "line": 277,
              "character": 5
            }
          },
          "preview": "private void writeDrawOrderTimeline(Animation.DrawOrderTimeline obj) {",
          "children": []
        },
        {
          "name": "writeEventTimeline(EventTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 279,
              "character": 0
            },
            "end": {
              "line": 321,
              "character": 5
            }
          },
          "preview": "private void writeEventTimeline(Animation.EventTimeline obj) {",
          "children": []
        },
        {
          "name": "writeIkConstraintTimeline(IkConstraintTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 323,
              "character": 0
            },
            "end": {
              "line": 361,
              "character": 5
            }
          },
          "preview": "private void writeIkConstraintTimeline(Animation.IkConstraintTimeline obj) {",
          "children": []
        },
        {
          "name": "writeInheritTimeline(InheritTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 363,
              "character": 0
            },
            "end": {
              "line": 401,
              "character": 5
            }
          },
          "preview": "private void writeInheritTimeline(Animation.InheritTimeline obj) {",
          "children": []
        },
        {
          "name": "writePathConstraintMixTimeline(PathConstraintMixTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 403,
              "character": 0
            },
            "end": {
              "line": 441,
              "character": 5
            }
          },
          "preview": "private void writePathConstraintMixTimeline(Animation.PathConstraintMixTimeline obj) {",
          "children": []
        },
        {
          "name": "writePathConstraintPositionTimeline(PathConstraintPositionTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 443,
              "character": 0
            },
            "end": {
              "line": 481,
              "character": 5
            }
          },
          "preview": "private void writePathConstraintPositionTimeline(Animation.PathConstraintPositionTimeline obj) {",
          "children": []
        },
        {
          "name": "writePathConstraintSpacingTimeline(PathConstraintSpacingTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 483,
              "character": 0
            },
            "end": {
              "line": 521,
              "character": 5
            }
          },
          "preview": "private void writePathConstraintSpacingTimeline(Animation.PathConstraintSpacingTimeline obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintDampingTimeline(PhysicsConstraintDampingTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 523,
              "character": 0
            },
            "end": {
              "line": 561,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintDampingTimeline(Animation.PhysicsConstraintDampingTimeline obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintGravityTimeline(PhysicsConstraintGravityTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 563,
              "character": 0
            },
            "end": {
              "line": 601,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintGravityTimeline(Animation.PhysicsConstraintGravityTimeline obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintInertiaTimeline(PhysicsConstraintInertiaTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 603,
              "character": 0
            },
            "end": {
              "line": 641,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintInertiaTimeline(Animation.PhysicsConstraintInertiaTimeline obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintMassTimeline(PhysicsConstraintMassTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 643,
              "character": 0
            },
            "end": {
              "line": 681,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintMassTimeline(Animation.PhysicsConstraintMassTimeline obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintMixTimeline(PhysicsConstraintMixTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 683,
              "character": 0
            },
            "end": {
              "line": 721,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintMixTimeline(Animation.PhysicsConstraintMixTimeline obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintResetTimeline(PhysicsConstraintResetTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 723,
              "character": 0
            },
            "end": {
              "line": 761,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintResetTimeline(Animation.PhysicsConstraintResetTimeline obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintStrengthTimeline(PhysicsConstraintStrengthTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 763,
              "character": 0
            },
            "end": {
              "line": 801,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintStrengthTimeline(Animation.PhysicsConstraintStrengthTimeline obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintWindTimeline(PhysicsConstraintWindTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 803,
              "character": 0
            },
            "end": {
              "line": 841,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintWindTimeline(Animation.PhysicsConstraintWindTimeline obj) {",
          "children": []
        },
        {
          "name": "writeRGB2Timeline(RGB2Timeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 843,
              "character": 0
            },
            "end": {
              "line": 881,
              "character": 5
            }
          },
          "preview": "private void writeRGB2Timeline(Animation.RGB2Timeline obj) {",
          "children": []
        },
        {
          "name": "writeRGBA2Timeline(RGBA2Timeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 883,
              "character": 0
            },
            "end": {
              "line": 921,
              "character": 5
            }
          },
          "preview": "private void writeRGBA2Timeline(Animation.RGBA2Timeline obj) {",
          "children": []
        },
        {
          "name": "writeRGBATimeline(RGBATimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 923,
              "character": 0
            },
            "end": {
              "line": 961,
              "character": 5
            }
          },
          "preview": "private void writeRGBATimeline(Animation.RGBATimeline obj) {",
          "children": []
        },
        {
          "name": "writeRGBTimeline(RGBTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 963,
              "character": 0
            },
            "end": {
              "line": 1001,
              "character": 5
            }
          },
          "preview": "private void writeRGBTimeline(Animation.RGBTimeline obj) {",
          "children": []
        },
        {
          "name": "writeRotateTimeline(RotateTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1003,
              "character": 0
            },
            "end": {
              "line": 1041,
              "character": 5
            }
          },
          "preview": "private void writeRotateTimeline(Animation.RotateTimeline obj) {",
          "children": []
        },
        {
          "name": "writeScaleTimeline(ScaleTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1043,
              "character": 0
            },
            "end": {
              "line": 1081,
              "character": 5
            }
          },
          "preview": "private void writeScaleTimeline(Animation.ScaleTimeline obj) {",
          "children": []
        },
        {
          "name": "writeScaleXTimeline(ScaleXTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1083,
              "character": 0
            },
            "end": {
              "line": 1121,
              "character": 5
            }
          },
          "preview": "private void writeScaleXTimeline(Animation.ScaleXTimeline obj) {",
          "children": []
        },
        {
          "name": "writeScaleYTimeline(ScaleYTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1123,
              "character": 0
            },
            "end": {
              "line": 1161,
              "character": 5
            }
          },
          "preview": "private void writeScaleYTimeline(Animation.ScaleYTimeline obj) {",
          "children": []
        },
        {
          "name": "writeSequenceTimeline(SequenceTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1163,
              "character": 0
            },
            "end": {
              "line": 1204,
              "character": 5
            }
          },
          "preview": "private void writeSequenceTimeline(Animation.SequenceTimeline obj) {",
          "children": []
        },
        {
          "name": "writeShearTimeline(ShearTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1206,
              "character": 0
            },
            "end": {
              "line": 1244,
              "character": 5
            }
          },
          "preview": "private void writeShearTimeline(Animation.ShearTimeline obj) {",
          "children": []
        },
        {
          "name": "writeShearXTimeline(ShearXTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1246,
              "character": 0
            },
            "end": {
              "line": 1284,
              "character": 5
            }
          },
          "preview": "private void writeShearXTimeline(Animation.ShearXTimeline obj) {",
          "children": []
        },
        {
          "name": "writeShearYTimeline(ShearYTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1286,
              "character": 0
            },
            "end": {
              "line": 1324,
              "character": 5
            }
          },
          "preview": "private void writeShearYTimeline(Animation.ShearYTimeline obj) {",
          "children": []
        },
        {
          "name": "writeSliderMixTimeline(SliderMixTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1326,
              "character": 0
            },
            "end": {
              "line": 1364,
              "character": 5
            }
          },
          "preview": "private void writeSliderMixTimeline(Animation.SliderMixTimeline obj) {",
          "children": []
        },
        {
          "name": "writeSliderTimeline(SliderTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1366,
              "character": 0
            },
            "end": {
              "line": 1404,
              "character": 5
            }
          },
          "preview": "private void writeSliderTimeline(Animation.SliderTimeline obj) {",
          "children": []
        },
        {
          "name": "writeTimeline(Timeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1406,
              "character": 0
            },
            "end": {
              "line": 1482,
              "character": 5
            }
          },
          "preview": "private void writeTimeline(Animation.Timeline obj) {",
          "children": []
        },
        {
          "name": "writeTransformConstraintTimeline(TransformConstraintTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1484,
              "character": 0
            },
            "end": {
              "line": 1522,
              "character": 5
            }
          },
          "preview": "private void writeTransformConstraintTimeline(Animation.TransformConstraintTimeline obj) {",
          "children": []
        },
        {
          "name": "writeTranslateTimeline(TranslateTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1524,
              "character": 0
            },
            "end": {
              "line": 1562,
              "character": 5
            }
          },
          "preview": "private void writeTranslateTimeline(Animation.TranslateTimeline obj) {",
          "children": []
        },
        {
          "name": "writeTranslateXTimeline(TranslateXTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1564,
              "character": 0
            },
            "end": {
              "line": 1602,
              "character": 5
            }
          },
          "preview": "private void writeTranslateXTimeline(Animation.TranslateXTimeline obj) {",
          "children": []
        },
        {
          "name": "writeTranslateYTimeline(TranslateYTimeline)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1604,
              "character": 0
            },
            "end": {
              "line": 1642,
              "character": 5
            }
          },
          "preview": "private void writeTranslateYTimeline(Animation.TranslateYTimeline obj) {",
          "children": []
        },
        {
          "name": "writeAnimationState(AnimationState)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1644,
              "character": 0
            },
            "end": {
              "line": 1669,
              "character": 5
            }
          },
          "preview": "private void writeAnimationState(AnimationState obj) {",
          "children": []
        },
        {
          "name": "writeTrackEntry(TrackEntry)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1671,
              "character": 0
            },
            "end": {
              "line": 1781,
              "character": 5
            }
          },
          "preview": "private void writeTrackEntry(AnimationState.TrackEntry obj) {",
          "children": []
        },
        {
          "name": "writeAnimationStateData(AnimationStateData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1783,
              "character": 0
            },
            "end": {
              "line": 1801,
              "character": 5
            }
          },
          "preview": "private void writeAnimationStateData(AnimationStateData obj) {",
          "children": []
        },
        {
          "name": "writeAttachment(Attachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1803,
              "character": 0
            },
            "end": {
              "line": 1819,
              "character": 5
            }
          },
          "preview": "private void writeAttachment(Attachment obj) {",
          "children": []
        },
        {
          "name": "writeBone(Bone)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1821,
              "character": 0
            },
            "end": {
              "line": 1856,
              "character": 5
            }
          },
          "preview": "private void writeBone(Bone obj) {",
          "children": []
        },
        {
          "name": "writeBoneData(BoneData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1858,
              "character": 0
            },
            "end": {
              "line": 1901,
              "character": 5
            }
          },
          "preview": "private void writeBoneData(BoneData obj) {",
          "children": []
        },
        {
          "name": "writeBoneLocal(BoneLocal)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1903,
              "character": 0
            },
            "end": {
              "line": 1939,
              "character": 5
            }
          },
          "preview": "private void writeBoneLocal(BoneLocal obj) {",
          "children": []
        },
        {
          "name": "writeBonePose(BonePose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 1941,
              "character": 0
            },
            "end": {
              "line": 2007,
              "character": 5
            }
          },
          "preview": "private void writeBonePose(BonePose obj) {",
          "children": []
        },
        {
          "name": "writeBoundingBoxAttachment(BoundingBoxAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2009,
              "character": 0
            },
            "end": {
              "line": 2058,
              "character": 5
            }
          },
          "preview": "private void writeBoundingBoxAttachment(BoundingBoxAttachment obj) {",
          "children": []
        },
        {
          "name": "writeClippingAttachment(ClippingAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2060,
              "character": 0
            },
            "end": {
              "line": 2116,
              "character": 5
            }
          },
          "preview": "private void writeClippingAttachment(ClippingAttachment obj) {",
          "children": []
        },
        {
          "name": "writeConstraint(Constraint)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2118,
              "character": 0
            },
            "end": {
              "line": 2132,
              "character": 5
            }
          },
          "preview": "private void writeConstraint(Constraint obj) {",
          "children": []
        },
        {
          "name": "writeConstraintData(ConstraintData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2134,
              "character": 0
            },
            "end": {
              "line": 2148,
              "character": 5
            }
          },
          "preview": "private void writeConstraintData(ConstraintData obj) {",
          "children": []
        },
        {
          "name": "writeEvent(Event)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2150,
              "character": 0
            },
            "end": {
              "line": 2183,
              "character": 5
            }
          },
          "preview": "private void writeEvent(Event obj) {",
          "children": []
        },
        {
          "name": "writeEventData(EventData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2185,
              "character": 0
            },
            "end": {
              "line": 2218,
              "character": 5
            }
          },
          "preview": "private void writeEventData(EventData obj) {",
          "children": []
        },
        {
          "name": "writeIkConstraint(IkConstraint)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2220,
              "character": 0
            },
            "end": {
              "line": 2251,
              "character": 5
            }
          },
          "preview": "private void writeIkConstraint(IkConstraint obj) {",
          "children": []
        },
        {
          "name": "writeIkConstraintData(IkConstraintData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2253,
              "character": 0
            },
            "end": {
              "line": 2287,
              "character": 5
            }
          },
          "preview": "private void writeIkConstraintData(IkConstraintData obj) {",
          "children": []
        },
        {
          "name": "writeIkConstraintPose(IkConstraintPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2289,
              "character": 0
            },
            "end": {
              "line": 2316,
              "character": 5
            }
          },
          "preview": "private void writeIkConstraintPose(IkConstraintPose obj) {",
          "children": []
        },
        {
          "name": "writeMeshAttachment(MeshAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2318,
              "character": 0
            },
            "end": {
              "line": 2428,
              "character": 5
            }
          },
          "preview": "private void writeMeshAttachment(MeshAttachment obj) {",
          "children": []
        },
        {
          "name": "writePathAttachment(PathAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2430,
              "character": 0
            },
            "end": {
              "line": 2492,
              "character": 5
            }
          },
          "preview": "private void writePathAttachment(PathAttachment obj) {",
          "children": []
        },
        {
          "name": "writePathConstraint(PathConstraint)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2494,
              "character": 0
            },
            "end": {
              "line": 2525,
              "character": 5
            }
          },
          "preview": "private void writePathConstraint(PathConstraint obj) {",
          "children": []
        },
        {
          "name": "writePathConstraintData(PathConstraintData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2527,
              "character": 0
            },
            "end": {
              "line": 2570,
              "character": 5
            }
          },
          "preview": "private void writePathConstraintData(PathConstraintData obj) {",
          "children": []
        },
        {
          "name": "writePathConstraintPose(PathConstraintPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2572,
              "character": 0
            },
            "end": {
              "line": 2599,
              "character": 5
            }
          },
          "preview": "private void writePathConstraintPose(PathConstraintPose obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraint(PhysicsConstraint)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2601,
              "character": 0
            },
            "end": {
              "line": 2625,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraint(PhysicsConstraint obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintData(PhysicsConstraintData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2627,
              "character": 0
            },
            "end": {
              "line": 2693,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintData(PhysicsConstraintData obj) {",
          "children": []
        },
        {
          "name": "writePhysicsConstraintPose(PhysicsConstraintPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2695,
              "character": 0
            },
            "end": {
              "line": 2728,
              "character": 5
            }
          },
          "preview": "private void writePhysicsConstraintPose(PhysicsConstraintPose obj) {",
          "children": []
        },
        {
          "name": "writePointAttachment(PointAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2730,
              "character": 0
            },
            "end": {
              "line": 2757,
              "character": 5
            }
          },
          "preview": "private void writePointAttachment(PointAttachment obj) {",
          "children": []
        },
        {
          "name": "writeRegionAttachment(RegionAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2759,
              "character": 0
            },
            "end": {
              "line": 2825,
              "character": 5
            }
          },
          "preview": "private void writeRegionAttachment(RegionAttachment obj) {",
          "children": []
        },
        {
          "name": "writeSequence(Sequence)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2827,
              "character": 0
            },
            "end": {
              "line": 2858,
              "character": 5
            }
          },
          "preview": "private void writeSequence(Sequence obj) {",
          "children": []
        },
        {
          "name": "writeSkeleton(Skeleton)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2860,
              "character": 0
            },
            "end": {
              "line": 2957,
              "character": 5
            }
          },
          "preview": "private void writeSkeleton(Skeleton obj) {",
          "children": []
        },
        {
          "name": "writeSkeletonData(SkeletonData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 2959,
              "character": 0
            },
            "end": {
              "line": 3053,
              "character": 5
            }
          },
          "preview": "private void writeSkeletonData(SkeletonData obj) {",
          "children": []
        },
        {
          "name": "writeSkin(Skin)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3055,
              "character": 0
            },
            "end": {
              "line": 3094,
              "character": 5
            }
          },
          "preview": "private void writeSkin(Skin obj) {",
          "children": []
        },
        {
          "name": "writeSkinEntry(SkinEntry)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3096,
              "character": 0
            },
            "end": {
              "line": 3117,
              "character": 5
            }
          },
          "preview": "private void writeSkinEntry(Skin.SkinEntry obj) {",
          "children": []
        },
        {
          "name": "writeSlider(Slider)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3119,
              "character": 0
            },
            "end": {
              "line": 3143,
              "character": 5
            }
          },
          "preview": "private void writeSlider(Slider obj) {",
          "children": []
        },
        {
          "name": "writeSliderData(SliderData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3145,
              "character": 0
            },
            "end": {
              "line": 3198,
              "character": 5
            }
          },
          "preview": "private void writeSliderData(SliderData obj) {",
          "children": []
        },
        {
          "name": "writeSliderPose(SliderPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3200,
              "character": 0
            },
            "end": {
              "line": 3218,
              "character": 5
            }
          },
          "preview": "private void writeSliderPose(SliderPose obj) {",
          "children": []
        },
        {
          "name": "writeSlot(Slot)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3220,
              "character": 0
            },
            "end": {
              "line": 3244,
              "character": 5
            }
          },
          "preview": "private void writeSlot(Slot obj) {",
          "children": []
        },
        {
          "name": "writeSlotData(SlotData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3246,
              "character": 0
            },
            "end": {
              "line": 3282,
              "character": 5
            }
          },
          "preview": "private void writeSlotData(SlotData obj) {",
          "children": []
        },
        {
          "name": "writeSlotPose(SlotPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3284,
              "character": 0
            },
            "end": {
              "line": 3319,
              "character": 5
            }
          },
          "preview": "private void writeSlotPose(SlotPose obj) {",
          "children": []
        },
        {
          "name": "writeTransformConstraint(TransformConstraint)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3321,
              "character": 0
            },
            "end": {
              "line": 3352,
              "character": 5
            }
          },
          "preview": "private void writeTransformConstraint(TransformConstraint obj) {",
          "children": []
        },
        {
          "name": "writeTransformConstraintData(TransformConstraintData)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3354,
              "character": 0
            },
            "end": {
              "line": 3422,
              "character": 5
            }
          },
          "preview": "private void writeTransformConstraintData(TransformConstraintData obj) {",
          "children": []
        },
        {
          "name": "writeFromProperty(FromProperty)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3424,
              "character": 0
            },
            "end": {
              "line": 3440,
              "character": 5
            }
          },
          "preview": "private void writeFromProperty(TransformConstraintData.FromProperty obj) {",
          "children": []
        },
        {
          "name": "writeFromRotate(FromRotate)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3442,
              "character": 0
            },
            "end": {
              "line": 3464,
              "character": 5
            }
          },
          "preview": "private void writeFromRotate(TransformConstraintData.FromRotate obj) {",
          "children": []
        },
        {
          "name": "writeFromScaleX(FromScaleX)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3466,
              "character": 0
            },
            "end": {
              "line": 3488,
              "character": 5
            }
          },
          "preview": "private void writeFromScaleX(TransformConstraintData.FromScaleX obj) {",
          "children": []
        },
        {
          "name": "writeFromScaleY(FromScaleY)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3490,
              "character": 0
            },
            "end": {
              "line": 3512,
              "character": 5
            }
          },
          "preview": "private void writeFromScaleY(TransformConstraintData.FromScaleY obj) {",
          "children": []
        },
        {
          "name": "writeFromShearY(FromShearY)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3514,
              "character": 0
            },
            "end": {
              "line": 3536,
              "character": 5
            }
          },
          "preview": "private void writeFromShearY(TransformConstraintData.FromShearY obj) {",
          "children": []
        },
        {
          "name": "writeFromX(FromX)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3538,
              "character": 0
            },
            "end": {
              "line": 3560,
              "character": 5
            }
          },
          "preview": "private void writeFromX(TransformConstraintData.FromX obj) {",
          "children": []
        },
        {
          "name": "writeFromY(FromY)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3562,
              "character": 0
            },
            "end": {
              "line": 3584,
              "character": 5
            }
          },
          "preview": "private void writeFromY(TransformConstraintData.FromY obj) {",
          "children": []
        },
        {
          "name": "writeToProperty(ToProperty)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3586,
              "character": 0
            },
            "end": {
              "line": 3602,
              "character": 5
            }
          },
          "preview": "private void writeToProperty(TransformConstraintData.ToProperty obj) {",
          "children": []
        },
        {
          "name": "writeToRotate(ToRotate)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3604,
              "character": 0
            },
            "end": {
              "line": 3625,
              "character": 5
            }
          },
          "preview": "private void writeToRotate(TransformConstraintData.ToRotate obj) {",
          "children": []
        },
        {
          "name": "writeToScaleX(ToScaleX)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3627,
              "character": 0
            },
            "end": {
              "line": 3648,
              "character": 5
            }
          },
          "preview": "private void writeToScaleX(TransformConstraintData.ToScaleX obj) {",
          "children": []
        },
        {
          "name": "writeToScaleY(ToScaleY)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3650,
              "character": 0
            },
            "end": {
              "line": 3671,
              "character": 5
            }
          },
          "preview": "private void writeToScaleY(TransformConstraintData.ToScaleY obj) {",
          "children": []
        },
        {
          "name": "writeToShearY(ToShearY)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3673,
              "character": 0
            },
            "end": {
              "line": 3694,
              "character": 5
            }
          },
          "preview": "private void writeToShearY(TransformConstraintData.ToShearY obj) {",
          "children": []
        },
        {
          "name": "writeToX(ToX)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3696,
              "character": 0
            },
            "end": {
              "line": 3717,
              "character": 5
            }
          },
          "preview": "private void writeToX(TransformConstraintData.ToX obj) {",
          "children": []
        },
        {
          "name": "writeToY(ToY)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3719,
              "character": 0
            },
            "end": {
              "line": 3740,
              "character": 5
            }
          },
          "preview": "private void writeToY(TransformConstraintData.ToY obj) {",
          "children": []
        },
        {
          "name": "writeTransformConstraintPose(TransformConstraintPose)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3742,
              "character": 0
            },
            "end": {
              "line": 3772,
              "character": 5
            }
          },
          "preview": "private void writeTransformConstraintPose(TransformConstraintPose obj) {",
          "children": []
        },
        {
          "name": "writeUpdate(Update)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3774,
              "character": 0
            },
            "end": {
              "line": 3790,
              "character": 5
            }
          },
          "preview": "private void writeUpdate(Update obj) {",
          "children": []
        },
        {
          "name": "writeVertexAttachment(VertexAttachment)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3792,
              "character": 0
            },
            "end": {
              "line": 3804,
              "character": 5
            }
          },
          "preview": "private void writeVertexAttachment(VertexAttachment obj) {",
          "children": []
        },
        {
          "name": "writeColor(Color)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3806,
              "character": 0
            },
            "end": {
              "line": 3821,
              "character": 5
            }
          },
          "preview": "private void writeColor(Color obj) {",
          "children": []
        },
        {
          "name": "writeTextureRegion(TextureRegion)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-libgdx-tests/src/com/esotericsoftware/spine/utils/SkeletonSerializer.java",
          "range": {
            "start": {
              "line": 3823,
              "character": 0
            },
            "end": {
              "line": 3842,
              "character": 5
            }
          },
          "preview": "private void writeTextureRegion(TextureRegion obj) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "JsonRollback",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
      "range": {
        "start": {
          "line": 53,
          "character": 0
        },
        "end": {
          "line": 281,
          "character": 1
        }
      },
      "preview": "public class JsonRollback",
      "documentation": "Takes Spine JSON data and transforms it to work with an older version of Spine. Target versions:<br>\n2.1: supports going from version 3.3.xx to 2.1.27.<br>\n3.7: supports going from version 3.8.xx to 3.7.94.<br>\n3.8: supports going from version 4.0.xx to 3.8.99 (all curves become linear, separate timelines are lost, constraint translate\nY and shear Y are lost).\n<p>\nData can be exported from a Spine project, processed with JsonRollback, then imported into an older version of Spine. However,\nJsonRollback may remove data for features not supported by the older Spine version. Because of this, JsonRollback is only\nintended for situations were work was accidentally done with a newer Spine version and now needs to be imported into an older\nSpine version (eg, if runtime support for the new version is not yet available).\n<p>\nAnimators should freeze their Spine editor version to match the Spine version supported by the runtime being used. Only when\nthe runtime is updated to support a newer Spine version should animators update their Spine editor version to match.",
      "children": [
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 54,
              "character": 0
            },
            "end": {
              "line": 162,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": []
        },
        {
          "name": "log(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 164,
              "character": 0
            },
            "end": {
              "line": 166,
              "character": 2
            }
          },
          "preview": "static private void log (String message) {",
          "children": []
        },
        {
          "name": "constraintNames(JsonValue, String...)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 168,
              "character": 0
            },
            "end": {
              "line": 183,
              "character": 2
            }
          },
          "preview": "static private void constraintNames (JsonValue root, String... path) {",
          "children": []
        },
        {
          "name": "linearCurves(JsonValue)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 185,
              "character": 0
            },
            "end": {
              "line": 215,
              "character": 2
            }
          },
          "preview": "static private void linearCurves (JsonValue map) {",
          "children": []
        },
        {
          "name": "rollbackCurves(JsonValue)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 217,
              "character": 0
            },
            "end": {
              "line": 248,
              "character": 2
            }
          },
          "preview": "static private void rollbackCurves (JsonValue map) {",
          "children": []
        },
        {
          "name": "setValue(JsonValue, String, String...)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 250,
              "character": 0
            },
            "end": {
              "line": 253,
              "character": 2
            }
          },
          "preview": "static void setValue (JsonValue root, String newValue, String... path) {",
          "children": []
        },
        {
          "name": "rename(JsonValue, String, String...)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 255,
              "character": 0
            },
            "end": {
              "line": 258,
              "character": 2
            }
          },
          "preview": "static void rename (JsonValue root, String newName, String... path) {",
          "children": []
        },
        {
          "name": "delete(JsonValue, String...)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 260,
              "character": 0
            },
            "end": {
              "line": 263,
              "character": 2
            }
          },
          "preview": "static void delete (JsonValue root, String... path) {",
          "children": []
        },
        {
          "name": "find(JsonValue, Array",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/JsonRollback.java",
          "range": {
            "start": {
              "line": 265,
              "character": 0
            },
            "end": {
              "line": 280,
              "character": 2
            }
          },
          "preview": "static Array<JsonValue> find (JsonValue current, Array<JsonValue> values, int index, String... path) {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonViewer",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
      "range": {
        "start": {
          "line": 60,
          "character": 0
        },
        "end": {
          "line": 423,
          "character": 1
        }
      },
      "preview": "public class SkeletonViewer extends ApplicationAdapter",
      "supertypes": [
        {
          "name": "ApplicationAdapter"
        }
      ],
      "children": [
        {
          "name": "version",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 61,
              "character": 0
            },
            "end": {
              "line": 61,
              "character": 56
            }
          },
          "preview": "static final String version = \"\"; // Replaced by build.",
          "children": []
        },
        {
          "name": "checkModifiedInterval",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 62,
              "character": 0
            },
            "end": {
              "line": 62,
              "character": 51
            }
          },
          "preview": "static final float checkModifiedInterval = 0.250f;",
          "children": []
        },
        {
          "name": "reloadDelay",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 63,
              "character": 0
            },
            "end": {
              "line": 63,
              "character": 36
            }
          },
          "preview": "static final float reloadDelay = 1;",
          "children": []
        },
        {
          "name": "startSuffixes",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 64,
              "character": 0
            },
            "end": {
              "line": 64,
              "character": 60
            }
          },
          "preview": "static final String[] startSuffixes = {\"\", \"-pro\", \"-ess\"};",
          "children": []
        },
        {
          "name": "dataSuffixes",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 65,
              "character": 0
            },
            "end": {
              "line": 65,
              "character": 57
            }
          },
          "preview": "static final String[] dataSuffixes = {\".json\", \".skel\"};",
          "children": []
        },
        {
          "name": "endSuffixes",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 66,
              "character": 0
            },
            "end": {
              "line": 66,
              "character": 60
            }
          },
          "preview": "static final String[] endSuffixes = {\"\", \".txt\", \".bytes\"};",
          "children": []
        },
        {
          "name": "atlasSuffixes",
          "kind": "constant",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 67,
              "character": 0
            },
            "end": {
              "line": 67,
              "character": 64
            }
          },
          "preview": "static final String[] atlasSuffixes = {\".atlas\", \"-pma.atlas\"};",
          "children": []
        },
        {
          "name": "args",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 68,
              "character": 0
            },
            "end": {
              "line": 68,
              "character": 22
            }
          },
          "preview": "static String[] args;",
          "children": []
        },
        {
          "name": "uiScale",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 69,
              "character": 0
            },
            "end": {
              "line": 69,
              "character": 26
            }
          },
          "preview": "static float uiScale = 1;",
          "children": []
        },
        {
          "name": "prefs",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 71,
              "character": 0
            },
            "end": {
              "line": 71,
              "character": 19
            }
          },
          "preview": "Preferences prefs;",
          "children": []
        },
        {
          "name": "batch",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 72,
              "character": 0
            },
            "end": {
              "line": 72,
              "character": 28
            }
          },
          "preview": "TwoColorPolygonBatch batch;",
          "children": []
        },
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 73,
              "character": 0
            },
            "end": {
              "line": 73,
              "character": 27
            }
          },
          "preview": "OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "renderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 74,
              "character": 0
            },
            "end": {
              "line": 74,
              "character": 27
            }
          },
          "preview": "SkeletonRenderer renderer;",
          "children": []
        },
        {
          "name": "debugRenderer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 75,
              "character": 0
            },
            "end": {
              "line": 75,
              "character": 37
            }
          },
          "preview": "SkeletonRendererDebug debugRenderer;",
          "children": []
        },
        {
          "name": "ui",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 21
            }
          },
          "preview": "SkeletonViewerUI ui;",
          "children": []
        },
        {
          "name": "atlas",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 78,
              "character": 0
            },
            "end": {
              "line": 78,
              "character": 27
            }
          },
          "preview": "SkeletonViewerAtlas atlas;",
          "children": []
        },
        {
          "name": "skeletonData",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 27
            }
          },
          "preview": "SkeletonData skeletonData;",
          "children": []
        },
        {
          "name": "skeleton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 80,
              "character": 0
            },
            "end": {
              "line": 80,
              "character": 19
            }
          },
          "preview": "Skeleton skeleton;",
          "children": []
        },
        {
          "name": "state",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 22
            }
          },
          "preview": "AnimationState state;",
          "children": []
        },
        {
          "name": "skeletonFile",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 35
            }
          },
          "preview": "FileHandle skeletonFile, lastFile;",
          "children": []
        },
        {
          "name": "lastFile",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 82,
              "character": 35
            }
          },
          "preview": "FileHandle skeletonFile, lastFile;",
          "children": []
        },
        {
          "name": "skeletonModified",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 38
            }
          },
          "preview": "long skeletonModified, atlasModified;",
          "children": []
        },
        {
          "name": "atlasModified",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 83,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 38
            }
          },
          "preview": "long skeletonModified, atlasModified;",
          "children": []
        },
        {
          "name": "lastModifiedCheck",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 38
            }
          },
          "preview": "float lastModifiedCheck, reloadTimer;",
          "children": []
        },
        {
          "name": "reloadTimer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 84,
              "character": 0
            },
            "end": {
              "line": 84,
              "character": 38
            }
          },
          "preview": "float lastModifiedCheck, reloadTimer;",
          "children": []
        },
        {
          "name": "status",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 50
            }
          },
          "preview": "final StringBuilder status = new StringBuilder();",
          "children": []
        },
        {
          "name": "create()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 2
            }
          },
          "preview": "public void create () {",
          "children": [
            {
              "name": "new UncaughtExceptionHandler() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
              "range": {
                "start": {
                  "line": 88,
                  "character": 0
                },
                "end": {
                  "line": 94,
                  "character": 3
                }
              },
              "preview": "Thread.setDefaultUncaughtExceptionHandler(new UncaughtExceptionHandler()",
              "children": [
                {
                  "name": "uncaughtException(Thread, Throwable)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
                  "range": {
                    "start": {
                      "line": 89,
                      "character": 0
                    },
                    "end": {
                      "line": 93,
                      "character": 4
                    }
                  },
                  "preview": "public void uncaughtException (Thread thread, Throwable ex) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "loadSkeleton(FileHandle)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 123,
              "character": 0
            },
            "end": {
              "line": 196,
              "character": 2
            }
          },
          "preview": "boolean loadSkeleton (@Null FileHandle skeletonFile) {",
          "children": [
            {
              "name": "new AnimationStateAdapter() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
              "range": {
                "start": {
                  "line": 162,
                  "character": 0
                },
                "end": {
                  "line": 166,
                  "character": 3
                }
              },
              "preview": "state.addListener(new AnimationStateAdapter()",
              "supertypes": [
                {
                  "name": "AnimationState$AnimationStateListener"
                }
              ],
              "children": [
                {
                  "name": "event(TrackEntry, Event)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
                  "range": {
                    "start": {
                      "line": 163,
                      "character": 0
                    },
                    "end": {
                      "line": 165,
                      "character": 4
                    }
                  },
                  "preview": "public void event (TrackEntry entry, Event event) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "clearSkeleton()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 198,
              "character": 0
            },
            "end": {
              "line": 204,
              "character": 2
            }
          },
          "preview": "void clearSkeleton () {",
          "children": []
        },
        {
          "name": "setAnimation(boolean)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 206,
              "character": 0
            },
            "end": {
              "line": 222,
              "character": 2
            }
          },
          "preview": "void setAnimation (boolean first) {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 224,
              "character": 0
            },
            "end": {
              "line": 345,
              "character": 2
            }
          },
          "preview": "public void render () {",
          "children": []
        },
        {
          "name": "status(TrackEntry)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 347,
              "character": 0
            },
            "end": {
              "line": 355,
              "character": 2
            }
          },
          "preview": "void status (TrackEntry entry) {",
          "children": []
        },
        {
          "name": "resetCameraPosition()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 357,
              "character": 0
            },
            "end": {
              "line": 360,
              "character": 2
            }
          },
          "preview": "void resetCameraPosition () {",
          "children": []
        },
        {
          "name": "resize(int, int)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 362,
              "character": 0
            },
            "end": {
              "line": 369,
              "character": 2
            }
          },
          "preview": "public void resize (int width, int height) {",
          "children": []
        },
        {
          "name": "dispose()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 371,
              "character": 0
            },
            "end": {
              "line": 374,
              "character": 2
            }
          },
          "preview": "public void dispose () {",
          "children": []
        },
        {
          "name": "main(String[])",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
          "range": {
            "start": {
              "line": 376,
              "character": 0
            },
            "end": {
              "line": 422,
              "character": 2
            }
          },
          "preview": "static public void main (String[] args) throws Exception {",
          "children": [
            {
              "name": "new Lwjgl3WindowAdapter() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
              "range": {
                "start": {
                  "line": 409,
                  "character": 0
                },
                "end": {
                  "line": 420,
                  "character": 3
                }
              },
              "preview": "config.setWindowListener(new Lwjgl3WindowAdapter()",
              "supertypes": [
                {
                  "name": "Lwjgl3WindowListener"
                }
              ],
              "children": [
                {
                  "name": "filesDropped(String[])",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewer.java",
                  "range": {
                    "start": {
                      "line": 411,
                      "character": 0
                    },
                    "end": {
                      "line": 419,
                      "character": 4
                    }
                  },
                  "preview": "public void filesDropped (String[] files) {",
                  "children": []
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonViewerAtlas",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
      "range": {
        "start": {
          "line": 44,
          "character": 0
        },
        "end": {
          "line": 134,
          "character": 1
        }
      },
      "preview": "class SkeletonViewerAtlas extends TextureAtlas",
      "supertypes": [
        {
          "name": "TextureAtlas"
        }
      ],
      "children": [
        {
          "name": "viewer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
          "range": {
            "start": {
              "line": 45,
              "character": 0
            },
            "end": {
              "line": 45,
              "character": 37
            }
          },
          "preview": "private final SkeletonViewer viewer;",
          "children": []
        },
        {
          "name": "atlasFile",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
          "range": {
            "start": {
              "line": 46,
              "character": 0
            },
            "end": {
              "line": 46,
              "character": 36
            }
          },
          "preview": "private @Null FileHandle atlasFile;",
          "children": []
        },
        {
          "name": "fake",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
          "range": {
            "start": {
              "line": 47,
              "character": 0
            },
            "end": {
              "line": 47,
              "character": 32
            }
          },
          "preview": "private final AtlasRegion fake;",
          "children": []
        },
        {
          "name": "SkeletonViewerAtlas(SkeletonViewer, FileHandle)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
          "range": {
            "start": {
              "line": 49,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 2
            }
          },
          "preview": "public SkeletonViewerAtlas (final SkeletonViewer viewer, @Null FileHandle skeletonFile) {",
          "children": [
            {
              "name": "new Runnable() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
              "range": {
                "start": {
                  "line": 55,
                  "character": 0
                },
                "end": {
                  "line": 69,
                  "character": 4
                }
              },
              "preview": "Gdx.app.postRunnable(new Runnable()",
              "children": [
                {
                  "name": "run()",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
                  "range": {
                    "start": {
                      "line": 56,
                      "character": 0
                    },
                    "end": {
                      "line": 68,
                      "character": 5
                    }
                  },
                  "preview": "public void run () {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "findAtlasFile(FileHandle)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 102,
              "character": 2
            }
          },
          "preview": "private @Null FileHandle findAtlasFile (FileHandle skeletonFile) {",
          "children": []
        },
        {
          "name": "findAtlasFile(FileHandle, String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 2
            }
          },
          "preview": "private @Null FileHandle findAtlasFile (FileHandle skeletonFile, String baseName) {",
          "children": []
        },
        {
          "name": "findRegion(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
          "range": {
            "start": {
              "line": 116,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 2
            }
          },
          "preview": "public AtlasRegion findRegion (String name) {",
          "children": []
        },
        {
          "name": "lastModified()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerAtlas.java",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 2
            }
          },
          "preview": "public long lastModified () {",
          "children": []
        }
      ]
    },
    {
      "name": "com.esotericsoftware.spine",
      "kind": "package",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
      "range": {
        "start": {
          "line": 29,
          "character": 0
        },
        "end": {
          "line": 29,
          "character": 35
        }
      },
      "preview": "package com.esotericsoftware.spine;",
      "documentation": "****************************************************************************\nSpine Runtimes License Agreement\nLast updated April 5, 2025. Replaces all prior versions.\nCopyright (c) 2013-2025, Esoteric Software LLC\nIntegration of the Spine Runtimes into software or otherwise creating\nderivative works of the Spine Runtimes is permitted under the terms and\nconditions of Section 2 of the Spine Editor License Agreement:\nhttp://esotericsoftware.com/spine-editor-license\nOtherwise, it is permitted to integrate the Spine Runtimes into software\nor otherwise create derivative works of the Spine Runtimes (collectively,\n\"Products\"), provided that each user of the Products must obtain their own\nSpine Editor license and redistribution of the Products in any form must\ninclude this license and copyright notice.\nTHE SPINE RUNTIMES ARE PROVIDED BY ESOTERIC SOFTWARE LLC \"AS IS\" AND ANY\nEXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL ESOTERIC SOFTWARE LLC BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES,\nBUSINESS INTERRUPTION, OR LOSS OF USE, DATA, OR PROFITS) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\nTHE SPINE RUNTIMES, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n****************************************************************************"
    },
    {
      "name": "SkeletonViewerUI",
      "kind": "class",
      "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
      "range": {
        "start": {
          "line": 75,
          "character": 0
        },
        "end": {
          "line": 784,
          "character": 1
        }
      },
      "preview": "class SkeletonViewerUI",
      "children": [
        {
          "name": "viewer",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 76,
              "character": 0
            },
            "end": {
              "line": 76,
              "character": 29
            }
          },
          "preview": "final SkeletonViewer viewer;",
          "children": []
        },
        {
          "name": "camera",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 77,
              "character": 0
            },
            "end": {
              "line": 77,
              "character": 33
            }
          },
          "preview": "final OrthographicCamera camera;",
          "children": []
        },
        {
          "name": "prefsLoaded",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 79,
              "character": 0
            },
            "end": {
              "line": 79,
              "character": 21
            }
          },
          "preview": "boolean prefsLoaded;",
          "children": []
        },
        {
          "name": "stage",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 81,
              "character": 0
            },
            "end": {
              "line": 81,
              "character": 47
            }
          },
          "preview": "Stage stage = new Stage(new ScreenViewport());",
          "children": []
        },
        {
          "name": "skin",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 82,
              "character": 0
            },
            "end": {
              "line": 83,
              "character": 40
            }
          },
          "preview": "com.badlogic.gdx.scenes.scene2d.ui.Skin skin = new com.badlogic.gdx.scenes.scene2d.ui.Skin(",
          "children": []
        },
        {
          "name": "window",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 85,
              "character": 0
            },
            "end": {
              "line": 85,
              "character": 46
            }
          },
          "preview": "Window window = new Window(\"Skeleton\", skin);",
          "children": []
        },
        {
          "name": "root",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 86,
              "character": 0
            },
            "end": {
              "line": 86,
              "character": 30
            }
          },
          "preview": "Table root = new Table(skin);",
          "children": []
        },
        {
          "name": "openButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 87,
              "character": 0
            },
            "end": {
              "line": 87,
              "character": 54
            }
          },
          "preview": "TextButton openButton = new TextButton(\"Open\", skin);",
          "children": []
        },
        {
          "name": "reloadButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 88,
              "character": 0
            },
            "end": {
              "line": 88,
              "character": 58
            }
          },
          "preview": "TextButton reloadButton = new TextButton(\"Reload\", skin);",
          "children": []
        },
        {
          "name": "minimizeButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 89,
              "character": 0
            },
            "end": {
              "line": 89,
              "character": 55
            }
          },
          "preview": "TextButton minimizeButton = new TextButton(\"-\", skin);",
          "children": []
        },
        {
          "name": "loadScaleSlider",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 91,
              "character": 0
            },
            "end": {
              "line": 91,
              "character": 66
            }
          },
          "preview": "Slider loadScaleSlider = new Slider(0.1f, 3, 0.01f, false, skin);",
          "children": []
        },
        {
          "name": "loadScaleLabel",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 92,
              "character": 0
            },
            "end": {
              "line": 92,
              "character": 48
            }
          },
          "preview": "Label loadScaleLabel = new Label(\"100%\", skin);",
          "children": []
        },
        {
          "name": "loadScaleResetButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 93,
              "character": 0
            },
            "end": {
              "line": 93,
              "character": 65
            }
          },
          "preview": "TextButton loadScaleResetButton = new TextButton(\"Reset\", skin);",
          "children": []
        },
        {
          "name": "zoomSlider",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 95,
              "character": 0
            },
            "end": {
              "line": 95,
              "character": 63
            }
          },
          "preview": "Slider zoomSlider = new Slider(0.01f, 10, 0.01f, false, skin);",
          "children": []
        },
        {
          "name": "zoomLabel",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 96,
              "character": 0
            },
            "end": {
              "line": 96,
              "character": 43
            }
          },
          "preview": "Label zoomLabel = new Label(\"100%\", skin);",
          "children": []
        },
        {
          "name": "zoomResetButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 97,
              "character": 0
            },
            "end": {
              "line": 97,
              "character": 60
            }
          },
          "preview": "TextButton zoomResetButton = new TextButton(\"Reset\", skin);",
          "children": []
        },
        {
          "name": "xScaleSlider",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 99,
              "character": 0
            },
            "end": {
              "line": 99,
              "character": 61
            }
          },
          "preview": "Slider xScaleSlider = new Slider(-2, 2, 0.01f, false, skin);",
          "children": []
        },
        {
          "name": "xScaleLabel",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 100,
              "character": 0
            },
            "end": {
              "line": 100,
              "character": 45
            }
          },
          "preview": "Label xScaleLabel = new Label(\"100%\", skin);",
          "children": []
        },
        {
          "name": "xScaleResetButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 101,
              "character": 0
            },
            "end": {
              "line": 101,
              "character": 62
            }
          },
          "preview": "TextButton xScaleResetButton = new TextButton(\"Reset\", skin);",
          "children": []
        },
        {
          "name": "yScaleSlider",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 103,
              "character": 0
            },
            "end": {
              "line": 103,
              "character": 61
            }
          },
          "preview": "Slider yScaleSlider = new Slider(-2, 2, 0.01f, false, skin);",
          "children": []
        },
        {
          "name": "yScaleLabel",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 104,
              "character": 0
            },
            "end": {
              "line": 104,
              "character": 45
            }
          },
          "preview": "Label yScaleLabel = new Label(\"100%\", skin);",
          "children": []
        },
        {
          "name": "yScaleResetButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 105,
              "character": 0
            },
            "end": {
              "line": 105,
              "character": 62
            }
          },
          "preview": "TextButton yScaleResetButton = new TextButton(\"Reset\", skin);",
          "children": []
        },
        {
          "name": "debugBonesCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 107,
              "character": 0
            },
            "end": {
              "line": 107,
              "character": 59
            }
          },
          "preview": "CheckBox debugBonesCheckbox = new CheckBox(\"Bones\", skin);",
          "children": []
        },
        {
          "name": "debugRegionsCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 108,
              "character": 0
            },
            "end": {
              "line": 108,
              "character": 63
            }
          },
          "preview": "CheckBox debugRegionsCheckbox = new CheckBox(\"Regions\", skin);",
          "children": []
        },
        {
          "name": "debugBoundingBoxesCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 109,
              "character": 0
            },
            "end": {
              "line": 109,
              "character": 68
            }
          },
          "preview": "CheckBox debugBoundingBoxesCheckbox = new CheckBox(\"Bounds\", skin);",
          "children": []
        },
        {
          "name": "debugMeshHullCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 110,
              "character": 0
            },
            "end": {
              "line": 110,
              "character": 66
            }
          },
          "preview": "CheckBox debugMeshHullCheckbox = new CheckBox(\"Mesh hull\", skin);",
          "children": []
        },
        {
          "name": "debugMeshTrianglesCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 111,
              "character": 0
            },
            "end": {
              "line": 111,
              "character": 71
            }
          },
          "preview": "CheckBox debugMeshTrianglesCheckbox = new CheckBox(\"Triangles\", skin);",
          "children": []
        },
        {
          "name": "debugPathsCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 112,
              "character": 0
            },
            "end": {
              "line": 112,
              "character": 59
            }
          },
          "preview": "CheckBox debugPathsCheckbox = new CheckBox(\"Paths\", skin);",
          "children": []
        },
        {
          "name": "debugPointsCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 113,
              "character": 0
            },
            "end": {
              "line": 113,
              "character": 61
            }
          },
          "preview": "CheckBox debugPointsCheckbox = new CheckBox(\"Points\", skin);",
          "children": []
        },
        {
          "name": "debugClippingCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 114,
              "character": 0
            },
            "end": {
              "line": 114,
              "character": 65
            }
          },
          "preview": "CheckBox debugClippingCheckbox = new CheckBox(\"Clipping\", skin);",
          "children": []
        },
        {
          "name": "pmaCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 116,
              "character": 0
            },
            "end": {
              "line": 116,
              "character": 60
            }
          },
          "preview": "CheckBox pmaCheckbox = new CheckBox(\"Premultiplied\", skin);",
          "children": []
        },
        {
          "name": "linearCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 118,
              "character": 0
            },
            "end": {
              "line": 118,
              "character": 56
            }
          },
          "preview": "CheckBox linearCheckbox = new CheckBox(\"Linear\", skin);",
          "children": []
        },
        {
          "name": "bonesSetupPoseButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 120,
              "character": 0
            },
            "end": {
              "line": 120,
              "character": 75
            }
          },
          "preview": "TextButton bonesSetupPoseButton = new TextButton(\"Bones\", skin, \"toggle\");",
          "children": []
        },
        {
          "name": "slotsSetupPoseButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 121,
              "character": 0
            },
            "end": {
              "line": 121,
              "character": 75
            }
          },
          "preview": "TextButton slotsSetupPoseButton = new TextButton(\"Slots\", skin, \"toggle\");",
          "children": []
        },
        {
          "name": "setupPoseButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 122,
              "character": 0
            },
            "end": {
              "line": 122,
              "character": 69
            }
          },
          "preview": "TextButton setupPoseButton = new TextButton(\"Both\", skin, \"toggle\");",
          "children": []
        },
        {
          "name": "skinList",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 124,
              "character": 0
            },
            "end": {
              "line": 124,
              "character": 40
            }
          },
          "preview": "List<String> skinList = new List(skin);",
          "children": []
        },
        {
          "name": "skinScroll",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 125,
              "character": 0
            },
            "end": {
              "line": 125,
              "character": 62
            }
          },
          "preview": "ScrollPane skinScroll = new ScrollPane(skinList, skin, \"bg\");",
          "children": []
        },
        {
          "name": "trackButtons",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 127,
              "character": 0
            },
            "end": {
              "line": 127,
              "character": 58
            }
          },
          "preview": "ButtonGroup<TextButton> trackButtons = new ButtonGroup();",
          "children": []
        },
        {
          "name": "loopCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 128,
              "character": 0
            },
            "end": {
              "line": 128,
              "character": 52
            }
          },
          "preview": "CheckBox loopCheckbox = new CheckBox(\"Loop\", skin);",
          "children": []
        },
        {
          "name": "reverseCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 129,
              "character": 0
            },
            "end": {
              "line": 129,
              "character": 58
            }
          },
          "preview": "CheckBox reverseCheckbox = new CheckBox(\"Reverse\", skin);",
          "children": []
        },
        {
          "name": "holdPrevCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 130,
              "character": 0
            },
            "end": {
              "line": 130,
              "character": 70
            }
          },
          "preview": "CheckBox holdPrevCheckbox = new HigherTrackCheckBox(\"Hold previous\");",
          "children": []
        },
        {
          "name": "addCheckbox",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 131,
              "character": 0
            },
            "end": {
              "line": 131,
              "character": 55
            }
          },
          "preview": "CheckBox addCheckbox = new HigherTrackCheckBox(\"Add\");",
          "children": []
        },
        {
          "name": "alphaSlider",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 133,
              "character": 0
            },
            "end": {
              "line": 133,
              "character": 59
            }
          },
          "preview": "Slider alphaSlider = new Slider(0, 1, 0.01f, false, skin);",
          "children": []
        },
        {
          "name": "alphaLabel",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 134,
              "character": 0
            },
            "end": {
              "line": 134,
              "character": 44
            }
          },
          "preview": "Label alphaLabel = new Label(\"100%\", skin);",
          "children": []
        },
        {
          "name": "animationList",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 136,
              "character": 0
            },
            "end": {
              "line": 136,
              "character": 45
            }
          },
          "preview": "List<String> animationList = new List(skin);",
          "children": []
        },
        {
          "name": "animationScroll",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 137,
              "character": 0
            },
            "end": {
              "line": 137,
              "character": 72
            }
          },
          "preview": "ScrollPane animationScroll = new ScrollPane(animationList, skin, \"bg\");",
          "children": []
        },
        {
          "name": "speedSlider",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 139,
              "character": 0
            },
            "end": {
              "line": 139,
              "character": 59
            }
          },
          "preview": "Slider speedSlider = new Slider(0, 3, 0.01f, false, skin);",
          "children": []
        },
        {
          "name": "speedLabel",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 140,
              "character": 0
            },
            "end": {
              "line": 140,
              "character": 44
            }
          },
          "preview": "Label speedLabel = new Label(\"1.0x\", skin);",
          "children": []
        },
        {
          "name": "speedResetButton",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 141,
              "character": 0
            },
            "end": {
              "line": 141,
              "character": 61
            }
          },
          "preview": "TextButton speedResetButton = new TextButton(\"Reset\", skin);",
          "children": []
        },
        {
          "name": "mixSlider",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 143,
              "character": 0
            },
            "end": {
              "line": 143,
              "character": 57
            }
          },
          "preview": "Slider mixSlider = new Slider(0, 4, 0.01f, false, skin);",
          "children": []
        },
        {
          "name": "mixLabel",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 144,
              "character": 0
            },
            "end": {
              "line": 144,
              "character": 42
            }
          },
          "preview": "Label mixLabel = new Label(\"0.3s\", skin);",
          "children": []
        },
        {
          "name": "statusLabel",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 146,
              "character": 0
            },
            "end": {
              "line": 146,
              "character": 41
            }
          },
          "preview": "Label statusLabel = new Label(\"\", skin);",
          "children": []
        },
        {
          "name": "toasts",
          "kind": "field",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 147,
              "character": 0
            },
            "end": {
              "line": 147,
              "character": 40
            }
          },
          "preview": "WidgetGroup toasts = new WidgetGroup();",
          "children": []
        },
        {
          "name": "SkeletonViewerUI(SkeletonViewer)",
          "kind": "constructor",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 149,
              "character": 0
            },
            "end": {
              "line": 155,
              "character": 2
            }
          },
          "preview": "SkeletonViewerUI (SkeletonViewer viewer) {",
          "children": []
        },
        {
          "name": "initialize()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 157,
              "character": 0
            },
            "end": {
              "line": 216,
              "character": 2
            }
          },
          "preview": "void initialize () {",
          "children": []
        },
        {
          "name": "layout()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 218,
              "character": 0
            },
            "end": {
              "line": 348,
              "character": 2
            }
          },
          "preview": "void layout () {",
          "children": []
        },
        {
          "name": "events()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 350,
              "character": 0
            },
            "end": {
              "line": 651,
              "character": 2
            }
          },
          "preview": "void events () {",
          "children": [
            {
              "name": "new InputListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 351,
                  "character": 0
                },
                "end": {
                  "line": 356,
                  "character": 3
                }
              },
              "preview": "window.addListener(new InputListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "touchDown(InputEvent, float, float, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 352,
                      "character": 0
                    },
                    "end": {
                      "line": 355,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 358,
                  "character": 0
                },
                "end": {
                  "line": 368,
                  "character": 3
                }
              },
              "preview": "openButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 359,
                      "character": 0
                    },
                    "end": {
                      "line": 367,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 370,
                  "character": 0
                },
                "end": {
                  "line": 374,
                  "character": 3
                }
              },
              "preview": "setupPoseButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 371,
                      "character": 0
                    },
                    "end": {
                      "line": 373,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 375,
                  "character": 0
                },
                "end": {
                  "line": 379,
                  "character": 3
                }
              },
              "preview": "bonesSetupPoseButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 376,
                      "character": 0
                    },
                    "end": {
                      "line": 378,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 380,
                  "character": 0
                },
                "end": {
                  "line": 384,
                  "character": 3
                }
              },
              "preview": "slotsSetupPoseButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 381,
                      "character": 0
                    },
                    "end": {
                      "line": 383,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 386,
                  "character": 0
                },
                "end": {
                  "line": 391,
                  "character": 3
                }
              },
              "preview": "reloadButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 387,
                      "character": 0
                    },
                    "end": {
                      "line": 390,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ClickListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 393,
                  "character": 0
                },
                "end": {
                  "line": 411,
                  "character": 3
                }
              },
              "preview": "minimizeButton.addListener(new ClickListener()",
              "supertypes": [
                {
                  "name": "InputListener"
                }
              ],
              "children": [
                {
                  "name": "touchDown(InputEvent, float, float, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 394,
                      "character": 0
                    },
                    "end": {
                      "line": 397,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {",
                  "children": []
                },
                {
                  "name": "clicked(InputEvent, float, float)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 399,
                      "character": 0
                    },
                    "end": {
                      "line": 410,
                      "character": 4
                    }
                  },
                  "preview": "public void clicked (InputEvent event, float x, float y) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 413,
                  "character": 0
                },
                "end": {
                  "line": 418,
                  "character": 3
                }
              },
              "preview": "loadScaleSlider.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 414,
                      "character": 0
                    },
                    "end": {
                      "line": 417,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 419,
                  "character": 0
                },
                "end": {
                  "line": 424,
                  "character": 3
                }
              },
              "preview": "loadScaleResetButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 420,
                      "character": 0
                    },
                    "end": {
                      "line": 423,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 426,
                  "character": 0
                },
                "end": {
                  "line": 433,
                  "character": 3
                }
              },
              "preview": "zoomSlider.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 427,
                      "character": 0
                    },
                    "end": {
                      "line": 432,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 434,
                  "character": 0
                },
                "end": {
                  "line": 441,
                  "character": 3
                }
              },
              "preview": "zoomResetButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 435,
                      "character": 0
                    },
                    "end": {
                      "line": 440,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 443,
                  "character": 0
                },
                "end": {
                  "line": 448,
                  "character": 3
                }
              },
              "preview": "xScaleSlider.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 444,
                      "character": 0
                    },
                    "end": {
                      "line": 447,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 449,
                  "character": 0
                },
                "end": {
                  "line": 453,
                  "character": 3
                }
              },
              "preview": "xScaleResetButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 450,
                      "character": 0
                    },
                    "end": {
                      "line": 452,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 455,
                  "character": 0
                },
                "end": {
                  "line": 460,
                  "character": 3
                }
              },
              "preview": "yScaleSlider.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 456,
                      "character": 0
                    },
                    "end": {
                      "line": 459,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 461,
                  "character": 0
                },
                "end": {
                  "line": 465,
                  "character": 3
                }
              },
              "preview": "yScaleResetButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 462,
                      "character": 0
                    },
                    "end": {
                      "line": 464,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 467,
                  "character": 0
                },
                "end": {
                  "line": 471,
                  "character": 3
                }
              },
              "preview": "speedSlider.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 468,
                      "character": 0
                    },
                    "end": {
                      "line": 470,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 472,
                  "character": 0
                },
                "end": {
                  "line": 476,
                  "character": 3
                }
              },
              "preview": "speedResetButton.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 473,
                      "character": 0
                    },
                    "end": {
                      "line": 475,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 478,
                  "character": 0
                },
                "end": {
                  "line": 490,
                  "character": 3
                }
              },
              "preview": "alphaSlider.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 479,
                      "character": 0
                    },
                    "end": {
                      "line": 489,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 492,
                  "character": 0
                },
                "end": {
                  "line": 497,
                  "character": 3
                }
              },
              "preview": "mixSlider.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 493,
                      "character": 0
                    },
                    "end": {
                      "line": 496,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new InputListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 499,
                  "character": 0
                },
                "end": {
                  "line": 507,
                  "character": 3
                }
              },
              "preview": "InputListener scrollFocusListener = new InputListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "enter(InputEvent, float, float, int, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 500,
                      "character": 0
                    },
                    "end": {
                      "line": 502,
                      "character": 4
                    }
                  },
                  "preview": "public void enter (InputEvent event, float x, float y, int pointer, @Null Actor fromActor) {",
                  "children": []
                },
                {
                  "name": "exit(InputEvent, float, float, int, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 504,
                      "character": 0
                    },
                    "end": {
                      "line": 506,
                      "character": 4
                    }
                  },
                  "preview": "public void exit (InputEvent event, float x, float y, int pointer, @Null Actor toActor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 509,
                  "character": 0
                },
                "end": {
                  "line": 519,
                  "character": 3
                }
              },
              "preview": "animationList.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 510,
                      "character": 0
                    },
                    "end": {
                      "line": 518,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 522,
                  "character": 0
                },
                "end": {
                  "line": 526,
                  "character": 3
                }
              },
              "preview": "ChangeListener setAnimation = new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 523,
                      "character": 0
                    },
                    "end": {
                      "line": 525,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 532,
                  "character": 0
                },
                "end": {
                  "line": 539,
                  "character": 3
                }
              },
              "preview": "linearCheckbox.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 533,
                      "character": 0
                    },
                    "end": {
                      "line": 538,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 541,
                  "character": 0
                },
                "end": {
                  "line": 552,
                  "character": 3
                }
              },
              "preview": "skinList.addListener(new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 542,
                      "character": 0
                    },
                    "end": {
                      "line": 551,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 555,
                  "character": 0
                },
                "end": {
                  "line": 580,
                  "character": 3
                }
              },
              "preview": "ChangeListener trackButtonListener = new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 556,
                      "character": 0
                    },
                    "end": {
                      "line": 579,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new InputAdapter() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 584,
                  "character": 0
                },
                "end": {
                  "line": 618,
                  "character": 3
                }
              },
              "preview": "Gdx.input.setInputProcessor(new InputMultiplexer(stage, new InputAdapter()",
              "supertypes": [
                {
                  "name": "InputProcessor"
                }
              ],
              "children": [
                {
                  "name": "offsetX",
                  "kind": "field",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 585,
                      "character": 0
                    },
                    "end": {
                      "line": 585,
                      "character": 17
                    }
                  },
                  "preview": "float offsetX;",
                  "children": []
                },
                {
                  "name": "offsetY",
                  "kind": "field",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 586,
                      "character": 0
                    },
                    "end": {
                      "line": 586,
                      "character": 17
                    }
                  },
                  "preview": "float offsetY;",
                  "children": []
                },
                {
                  "name": "touchDown(int, int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 588,
                      "character": 0
                    },
                    "end": {
                      "line": 592,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDown (int screenX, int screenY, int pointer, int button) {",
                  "children": []
                },
                {
                  "name": "touchDragged(int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 594,
                      "character": 0
                    },
                    "end": {
                      "line": 604,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchDragged (int screenX, int screenY, int pointer) {",
                  "children": []
                },
                {
                  "name": "touchUp(int, int, int, int)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 606,
                      "character": 0
                    },
                    "end": {
                      "line": 609,
                      "character": 4
                    }
                  },
                  "preview": "public boolean touchUp (int screenX, int screenY, int pointer, int button) {",
                  "children": []
                },
                {
                  "name": "scrolled(float, float)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 611,
                      "character": 0
                    },
                    "end": {
                      "line": 617,
                      "character": 4
                    }
                  },
                  "preview": "public boolean scrolled (float amountX, float amountY) {",
                  "children": []
                }
              ]
            },
            {
              "name": "new ChangeListener() {...}",
              "kind": "class",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 620,
                  "character": 0
                },
                "end": {
                  "line": 625,
                  "character": 3
                }
              },
              "preview": "ChangeListener savePrefsListener = new ChangeListener()",
              "supertypes": [
                {
                  "name": "EventListener"
                }
              ],
              "children": [
                {
                  "name": "changed(ChangeEvent, Actor)",
                  "kind": "method",
                  "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
                  "range": {
                    "start": {
                      "line": 621,
                      "character": 0
                    },
                    "end": {
                      "line": 624,
                      "character": 4
                    }
                  },
                  "preview": "public void changed (ChangeEvent event, Actor actor) {",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "name": "table(Actor...)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 653,
              "character": 0
            },
            "end": {
              "line": 658,
              "character": 2
            }
          },
          "preview": "Table table (Actor... actors) {",
          "children": []
        },
        {
          "name": "render()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 660,
              "character": 0
            },
            "end": {
              "line": 675,
              "character": 2
            }
          },
          "preview": "void render () {",
          "children": []
        },
        {
          "name": "toast(String)",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 677,
              "character": 0
            },
            "end": {
              "line": 693,
              "character": 2
            }
          },
          "preview": "void toast (String text) {",
          "children": []
        },
        {
          "name": "savePrefs()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 695,
              "character": 0
            },
            "end": {
              "line": 735,
              "character": 2
            }
          },
          "preview": "void savePrefs () {",
          "children": []
        },
        {
          "name": "loadPrefs()",
          "kind": "method",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 737,
              "character": 0
            },
            "end": {
              "line": 772,
              "character": 2
            }
          },
          "preview": "void loadPrefs () {",
          "children": []
        },
        {
          "name": "HigherTrackCheckBox",
          "kind": "class",
          "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
          "range": {
            "start": {
              "line": 774,
              "character": 0
            },
            "end": {
              "line": 783,
              "character": 2
            }
          },
          "preview": "class HigherTrackCheckBox extends CheckBox",
          "supertypes": [
            {
              "name": "CheckBox"
            }
          ],
          "children": [
            {
              "name": "HigherTrackCheckBox(String)",
              "kind": "constructor",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 775,
                  "character": 0
                },
                "end": {
                  "line": 777,
                  "character": 3
                }
              },
              "preview": "public HigherTrackCheckBox (String text) {",
              "children": []
            },
            {
              "name": "getImageDrawable()",
              "kind": "method",
              "file": "/Users/badlogic/workspaces/spine-runtimes/spine-libgdx/spine-skeletonviewer/src/com/esotericsoftware/spine/SkeletonViewerUI.java",
              "range": {
                "start": {
                  "line": 779,
                  "character": 0
                },
                "end": {
                  "line": 782,
                  "character": 3
                }
              },
              "preview": "protected Drawable getImageDrawable () {",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}